{"abi":[{"type":"function","name":"multicall","inputs":[{"name":"data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"results","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"error","name":"MulticallFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"multicall(bytes[])":"ac9650d8"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MulticallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"This function requires that the contract has sufficient balance for the delegate calls. If any of the calls fail, the function will revert with the failure message.\",\"params\":{\"data\":\"An array of encoded function calls\"},\"returns\":{\"results\":\"An bytes array with the return data of each function call\"}}},\"title\":\"IMulticall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Performs multiple delegate calls and returns the results of all calls as an array\"}},\"notice\":\"This contract is a multi-functional smart contract which allows for multiple contract calls in a single transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/\",\":@axelar-network/interchain-token-service/=lib/interchain-token-service/contracts/\",\":@ipc/=../../contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":fevmate/=../../contracts/lib/fevmate/contracts/\",\":forge-std/=lib/forge-std/src/\",\":interchain-token-service/=lib/interchain-token-service/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0x49d2a1b49f073216898bfa66a9a6e61b63de6dba4acb3b180f3d9237f000f0bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba675a7832c441bfdf419860be5bc0c6eb83abfe0fe89aad155f9d0e771095d6\",\"dweb:/ipfs/QmNsPju7vm5hakDKCDYJ7sjqxfKMvsTDRbMKjLXELBtZKR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"MulticallFailed"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"stateMutability":"payable","type":"function","name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}]}],"devdoc":{"kind":"dev","methods":{"multicall(bytes[])":{"details":"This function requires that the contract has sufficient balance for the delegate calls. If any of the calls fail, the function will revert with the failure message.","params":{"data":"An array of encoded function calls"},"returns":{"results":"An bytes array with the return data of each function call"}}},"version":1},"userdoc":{"kind":"user","methods":{"multicall(bytes[])":{"notice":"Performs multiple delegate calls and returns the results of all calls as an array"}},"version":1}},"settings":{"remappings":["@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/","@axelar-network/interchain-token-service/=lib/interchain-token-service/contracts/","@ipc/=../../contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","fevmate/=../../contracts/lib/fevmate/contracts/","forge-std/=lib/forge-std/src/","interchain-token-service/=lib/interchain-token-service/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IMulticall.sol":"IMulticall"},"libraries":{}},"sources":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IMulticall.sol":{"keccak256":"0x49d2a1b49f073216898bfa66a9a6e61b63de6dba4acb3b180f3d9237f000f0bf","urls":["bzz-raw://ba675a7832c441bfdf419860be5bc0c6eb83abfe0fe89aad155f9d0e771095d6","dweb:/ipfs/QmNsPju7vm5hakDKCDYJ7sjqxfKMvsTDRbMKjLXELBtZKR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IMulticall.sol","id":9961,"exportedSymbols":{"IMulticall":[9960]},"nodeType":"SourceUnit","src":"33:769:49","nodes":[{"id":9946,"nodeType":"PragmaDirective","src":"33:23:49","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":9960,"nodeType":"ContractDefinition","src":"218:583:49","nodes":[{"id":9949,"nodeType":"ErrorDefinition","src":"245:24:49","nodes":[],"errorSelector":"4d6a2328","name":"MulticallFailed","nameLocation":"251:15:49","parameters":{"id":9948,"nodeType":"ParameterList","parameters":[],"src":"266:2:49"}},{"id":9959,"nodeType":"FunctionDefinition","src":"707:92:49","nodes":[],"documentation":{"id":9950,"nodeType":"StructuredDocumentation","src":"275:427:49","text":" @notice Performs multiple delegate calls and returns the results of all calls as an array\n @dev This function requires that the contract has sufficient balance for the delegate calls.\n If any of the calls fail, the function will revert with the failure message.\n @param data An array of encoded function calls\n @return results An bytes array with the return data of each function call"},"functionSelector":"ac9650d8","implemented":false,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"716:9:49","parameters":{"id":9954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9953,"mutability":"mutable","name":"data","nameLocation":"743:4:49","nodeType":"VariableDeclaration","scope":9959,"src":"726:21:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":9951,"name":"bytes","nodeType":"ElementaryTypeName","src":"726:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":9952,"nodeType":"ArrayTypeName","src":"726:7:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"725:23:49"},"returnParameters":{"id":9958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9957,"mutability":"mutable","name":"results","nameLocation":"790:7:49","nodeType":"VariableDeclaration","scope":9959,"src":"775:22:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":9955,"name":"bytes","nodeType":"ElementaryTypeName","src":"775:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":9956,"nodeType":"ArrayTypeName","src":"775:7:49","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"774:24:49"},"scope":9960,"stateMutability":"payable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IMulticall","contractDependencies":[],"contractKind":"interface","documentation":{"id":9947,"nodeType":"StructuredDocumentation","src":"58:159:49","text":" @title IMulticall\n @notice This contract is a multi-functional smart contract which allows for multiple\n contract calls in a single transaction."},"fullyImplemented":false,"linearizedBaseContracts":[9960],"name":"IMulticall","nameLocation":"228:10:49","scope":9961,"usedErrors":[9949],"usedEvents":[]}],"license":"MIT"},"id":49}