{"id":"ecddbd04ba57c1fdd9c83e31b45cc402","source_id_to_path":{"0":"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","1":"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol","3":"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol","4":"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol","5":"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol","6":"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol","7":"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol","8":"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol","9":"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol","10":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","11":"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol","12":"lib/openzeppelin-contracts/contracts/utils/Address.sol","13":"lib/openzeppelin-contracts/contracts/utils/Errors.sol","14":"lib/openzeppelin-contracts/contracts/utils/Panic.sol","15":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol","16":"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","17":"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","18":"lib/openzeppelin-contracts/contracts/utils/math/Math.sol","19":"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol","20":"lib/openzeppelin-contracts/contracts//utils/structs/EnumerableSet.sol","21":"src/ArbHelper.sol","22":"src/balance-keeper/BalanceKeeper.sol","23":"src/balance-keeper/IBalanceKeeper.sol","24":"src/core/DealStakerRewards.sol","25":"src/core/Snapshot.sol","26":"src/core/Vesting.sol","27":"src/core/interfaces/IBaseOffer.sol","28":"src/core/interfaces/ICapacity.sol","29":"src/core/interfaces/ICapacityConst.sol","30":"src/core/interfaces/ICore.sol","31":"src/core/interfaces/IDealFactory.sol","32":"src/core/interfaces/IEpochController.sol","33":"src/core/interfaces/IGlobalConst.sol","34":"src/core/interfaces/IOffer.sol","35":"src/core/interfaces/IOfferV2.sol","36":"src/deal/interfaces/IConfig.sol","37":"src/deal/interfaces/IDeal.sol","38":"src/deal/interfaces/IWorkerManager.sol","39":"src/deal/v1/interfaces/IConfig.sol","40":"src/deal/v1/interfaces/IDeal.sol","41":"src/deal/v1/interfaces/IWorkerManager.sol","42":"src/interfaces/ArbSysInterface.sol","43":"src/interfaces/IDiamond.sol","44":"src/interfaces/IDiamondCut.sol","45":"src/interfaces/IERC173.sol","46":"src/interfaces/IWhitelist.sol","47":"src/lib/LibBaseOffer.sol","48":"src/lib/LibCapacity.sol","49":"src/lib/LibCapacityConst.sol","50":"src/lib/LibDiamond.sol","51":"src/lib/LibEpochController.sol","52":"src/lib/LibGlobalConst.sol","53":"src/lib/LibOffer.sol","54":"src/lib/LibOfferV2.sol","55":"src/lib/LibOraclePrice.sol","56":"src/lib/LibSendValue.sol","57":"src/utils/Common.sol","58":"src/utils/OwnableUpgradableDiamond.sol"},"language":"Solidity","_format":"ethers-rs-sol-build-info-1","input":{"version":"0.8.26","language":"Solidity","sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n/**\n * @dev Variant of {ReentrancyGuard} that uses transient storage.\n *\n * NOTE: This variant only works on networks where EIP-1153 is available.\n */\nabstract contract ReentrancyGuardTransient {\n    using StorageSlot for *;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }\n\n    function _nonReentrantAfter() private {\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.24;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * Since version 5.1, this library also support writing and reading value types to and from transient storage.\n *\n *  * Example using transient storage:\n * ```solidity\n * contract Lock {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;\n *\n *     modifier locked() {\n *         require(!_LOCK_SLOT.asBoolean().tload());\n *\n *         _LOCK_SLOT.asBoolean().tstore(true);\n *         _;\n *         _LOCK_SLOT.asBoolean().tstore(false);\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a address.\n     */\n    type AddressSlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a AddressSlotType.\n     */\n    function asAddress(bytes32 slot) internal pure returns (AddressSlotType) {\n        return AddressSlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bool.\n     */\n    type BooleanSlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a BooleanSlotType.\n     */\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlotType) {\n        return BooleanSlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bytes32.\n     */\n    type Bytes32SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Bytes32SlotType.\n     */\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32SlotType) {\n        return Bytes32SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a uint256.\n     */\n    type Uint256SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Uint256SlotType.\n     */\n    function asUint256(bytes32 slot) internal pure returns (Uint256SlotType) {\n        return Uint256SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a int256.\n     */\n    type Int256SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Int256SlotType.\n     */\n    function asInt256(bytes32 slot) internal pure returns (Int256SlotType) {\n        return Int256SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(AddressSlotType slot) internal view returns (address value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(AddressSlotType slot, address value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(BooleanSlotType slot) internal view returns (bool value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(BooleanSlotType slot, bool value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Bytes32SlotType slot) internal view returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Bytes32SlotType slot, bytes32 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Uint256SlotType slot) internal view returns (uint256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Uint256SlotType slot, uint256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Int256SlotType slot) internal view returns (int256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Int256SlotType slot, int256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, expect 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"},"src/ArbHelper.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\npragma solidity ^0.8.19;\n\nimport {ArbSys} from \"src/interfaces/ArbSysInterface.sol\";\n\n\n/// @custom:fluence-abi-checker\nabstract contract ArbHelper {\n    address constant ARB_SYS = address(100); // precompiled address for arbitrum chains\n\n    // DON'T CREATE STORAGE SLOTS HERE! (constant vars don't occupy ones)\n    // as there are contracts that are inherited from it, it will break storage\n\n    function getL2BlockNumber() internal returns (uint256) {\n        if (ARB_SYS.code.length != 0) {\n            return ArbSys(ARB_SYS).arbBlockNumber();\n        } else {\n            // in tests or not arbitrum\n            return block.number;\n        }\n    }\n}\n"},"src/balance-keeper/BalanceKeeper.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {ReentrancyGuardTransient} from \"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC173} from \"src/interfaces/IERC173.sol\";\nimport {IBalanceKeeper} from \"src/balance-keeper/IBalanceKeeper.sol\";\nimport {IDealFactory} from \"src/core/interfaces/IDealFactory.sol\";\nimport {ArbHelper} from \"src/ArbHelper.sol\";\n\n\n/// @custom:fluence-abi-checker\ncontract BalanceKeeper is UUPSUpgradeable, IBalanceKeeper, ReentrancyGuardTransient, ArbHelper {\n    using SafeERC20 for IERC20;\n\n    uint256 constant public WITHDRAW_REQUEST_DELAY = 7 days;\n\n    address public diamond;\n    address public coordinator;\n\n    // free balance is an unallocated balance\n    // deal balance is a balance allocated to deals\n    mapping(IERC20 token => mapping(address user => uint256 balance)) private freeBalances;\n    mapping(IERC20 token => mapping(address user => uint256 balance)) private dealBalances;\n    mapping(IERC20 token => mapping(address user => uint256 timestamp)) private terminationRequests;\n    mapping(IERC20 token => uint256 supply) public freeBalanceTotal;\n    mapping(IERC20 token => uint256 supply) public dealBalancesTotal;\n\n    mapping(IERC20 token => uint256 amount) public poolBalance;\n    mapping(IERC20 token => mapping(address user => uint256 balance)) public limbo;\n    mapping(IERC20 token => uint256 amount) public limboTotal;\n\n    mapping(address user => bool frozen) public frozen;\n\n    mapping(string => bool) public topUpIds;\n\n    bool public manualWithdrawEnabled = false;\n\n    DealDepositInfo[] private dealDeposits;\n\n    function owner() private view returns (address) {\n        return IERC173(diamond).owner();\n    }\n\n    modifier onlyDiamondOwner {\n        require(msg.sender == owner(), \"BalanceKeeper: Only owner can call this function\");\n        _;\n    }\n\n    modifier onlyDeal() {\n        require(IDealFactory(diamond).hasDeal(msg.sender), \"BalanceKeeper: Only deal can call this function\");\n        _;\n    }\n\n    modifier onlyVodopad() {\n        require(msg.sender == IDealFactory(diamond).vodopad(), \"BalanceKeeper: Only vodopad can call this function\");\n        _;\n    }\n\n    modifier onlyCoordinator() {\n        require(msg.sender == coordinator, \"BalanceKeeper: Only coordinator can call this function\");\n        _;\n    }\n\n    modifier onlyCoordinatorOrDiamondOwner() {\n        require(\n            msg.sender == coordinator || msg.sender == owner(),\n            \"BalanceKeeper: Only coordinator or diamond owner can call this function\"\n        );\n        _;\n    }\n\n    modifier onlyIfNotFrozen(address user) {\n        require(!frozen[user], \"BalanceKeeper: User is permanently frozen\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function increaseFreeBalance(\n        IERC20 token,\n        address user,\n        uint256 amount,\n        BalanceChangeReason reason,\n        address info\n    ) private {\n        freeBalances[token][user] += amount;\n        freeBalanceTotal[token] += amount;\n        emit FreeBalanceIncrease(token, user, reason, amount, info);\n    }\n\n    function decreaseFreeBalance(\n        IERC20 token,\n        address user,\n        uint256 amount,\n        BalanceChangeReason reason,\n        address info\n    ) private {\n        freeBalances[token][user] -= amount;\n        freeBalanceTotal[token] -= amount;\n        emit FreeBalanceDecrease(token, user, reason, amount, info);\n    }\n\n    function initialize(\n        address _diamond\n    ) external initializer {\n        diamond = _diamond;\n        __UUPSUpgradeable_init();\n    }\n\n    function getFreeBalance(IERC20 token, address user) external view returns (uint256) {\n        return freeBalances[token][user];\n    }\n\n    function getFullBalance(IERC20 token, address user) external view returns (uint256) {\n        return freeBalances[token][user] + dealBalances[token][user];\n    }\n\n    /*\n     * Sends the specified amount of tokens to limbo, freezing them for user\n     */\n    function _sendToLimbo(IERC20 token, address user) private {\n        uint256 amount = freeBalances[token][user];\n        require(amount > 0, \"BalanceKeeper: _sendToLimbo: not enough balance\");\n        require(freeBalanceTotal[token] >= amount, \"BalanceKeeper: _sendToLimbo: not enough total balance\");\n        limbo[token][user] += amount;\n        limboTotal[token] += amount;\n        decreaseFreeBalance(token, user, amount, BalanceChangeReason.SEND_TO_LIMBO, msg.sender);\n        emit SentToLimbo(token, user, msg.sender, amount);\n    }\n\n    // METHODS FROM COORDINATOR\n    function poolTopUp(IERC20 token, uint256 amount) external nonReentrant onlyCoordinatorOrDiamondOwner {\n        poolBalance[token] += amount;\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        emit PoolTopUp(token, msg.sender, amount);\n    }\n\n    function poolWithdraw(IERC20 token, uint256 amount) external nonReentrant onlyDiamondOwner {\n        require(poolBalance[token] >= amount, \"BalanceKeeper: not enough amount to withdraw from pool\");\n        poolBalance[token] -= amount;\n        token.safeTransfer(msg.sender, amount);\n        emit PoolWithdraw(token, msg.sender, amount);\n    }\n\n    function enableOnchainRefund() external onlyCoordinator {\n        manualWithdrawEnabled = true;\n        emit ManualWithdrawEnabled(msg.sender);\n    }\n\n    function disableOnchainRefund() external onlyCoordinator {\n        manualWithdrawEnabled = false;\n        emit ManualWithdrawDisabled(msg.sender);\n    }\n\n    /// @dev Refunds the specified amount of tokens to the user\n    function refund(IERC20 token, address user, uint256 amount) external nonReentrant onlyCoordinator {\n        require(freeBalanceTotal[token] >= amount, \"BalanceKeeper: vodopadWithdraw: not enough total balance\");\n        require(freeBalances[token][user] >= amount, \"BalanceKeeper: vodopadWithdraw: not enough balance\");\n        decreaseFreeBalance(token, user, amount, BalanceChangeReason.REFUND, msg.sender);\n        token.safeTransfer(user, amount);\n        emit Refunded(token, user, amount, msg.sender);\n    }\n\n    function _freezeAccount(address user, bool freeze) private {\n        frozen[user] = freeze;\n        emit AccountFreezeStateChanged(user, freeze, msg.sender);\n    }\n\n    function freezeAccount(address user) external onlyCoordinator {\n        _freezeAccount(user, true);\n    }\n\n    function unfreezeAccount(address user) external onlyCoordinator {\n        _freezeAccount(user, false);\n    }\n\n    function sendToLimbo(IERC20 token, address user) external onlyCoordinator {\n        _sendToLimbo(token, user);\n    }\n\n    function terminationVeto(IERC20 token, address user) external onlyCoordinator {\n        require(terminationRequests[token][user] > 0, \"BalanceKeeper: veto: no request\");\n        terminationRequests[token][user] = 0;\n        _sendToLimbo(token, user);\n        _freezeAccount(user, true);\n        emit TerminationVeto(token, user, msg.sender);\n    }\n\n    // METHODS FROM VODOPAD\n    function userTopUp(IERC20 token, address user, uint256 amount, string memory topUpId) external onlyIfNotFrozen(user) onlyVodopad {\n        require(topUpIds[topUpId] == false, \"BalanceKeeper: userTopUp: top-up id already used\");\n        topUpIds[topUpId] = true;\n        require(poolBalance[token] >= amount, \"BalanceKeeper: userTopUp: not enough gateway balance\");\n        poolBalance[token] -= amount;\n        increaseFreeBalance(token, user, amount, BalanceChangeReason.USER_TOP_UP, msg.sender);\n        emit UserBalanceIncrease(token, user, msg.sender, amount, topUpId);\n    }\n\n    // METHODS FROM DEAL\n    function moveBalanceFromDeal(IERC20 token, address user, uint256 amount, uint8 reserved)\n        external onlyDeal onlyIfNotFrozen(user) nonReentrant\n    {\n        require(dealBalances[token][user] >= amount, \"BalanceKeeper: moveBalanceFromDeal: not enough balance\");\n        require(dealBalancesTotal[token] >= amount, \"BalanceKeeper: moveBalanceFromDeal: not enough total balance\");\n        dealBalances[token][user] -= amount;\n        dealBalancesTotal[token] -= amount;\n        increaseFreeBalance(token, user, amount, BalanceChangeReason.MOVE_FROM_DEAL, msg.sender);\n\n\n        emit DealWithdraw(token, msg.sender, user, amount, reserved);\n    }\n\n    function moveFreeBalance(IERC20 token, address from, address to, uint256 amount, uint8 reserved)\n        external onlyDeal onlyIfNotFrozen(from) onlyIfNotFrozen(to) nonReentrant\n    {\n        require(freeBalances[token][from] >= amount, \"BalanceKeeper: moveFreeBalance: not enough balance\");\n        decreaseFreeBalance(token, from, amount, BalanceChangeReason.MOVE_FREE_BALANCE, to);\n        increaseFreeBalance(token, to, amount, BalanceChangeReason.MOVE_FREE_BALANCE, from);\n\n        emit BalanceMoved(token, from, to, amount, reserved);\n    }\n\n    // moves funds from free to deal balance\n    function moveBalanceToDeal(IERC20 token, address user, uint256 amount, DealDepositReason reason)\n        external onlyDeal onlyIfNotFrozen(user) nonReentrant\n    {\n        require(freeBalances[token][user] >= amount, \"BalanceKeeper: moveBalanceToDeal: not enough balance\");\n        require(freeBalanceTotal[token] >= amount, \"BalanceKeeper: moveBalanceToDeal: not enough total balance\");\n        dealBalances[token][user] += amount;\n        dealBalancesTotal[token] += amount;\n        decreaseFreeBalance(token, user, amount, BalanceChangeReason.MOVE_TO_DEAL, msg.sender);\n\n        uint256 blockNumber = getL2BlockNumber();\n        DealDepositInfo memory depositInfo = DealDepositInfo({\n            token: token,\n            deal: msg.sender,\n            user: user,\n            amount: amount,\n            reason: reason,\n            blockNumber: blockNumber,\n            reserved1: 0,\n            reserved2: 0,\n            reserved3: 0\n        });\n        dealDeposits.push(depositInfo);\n\n        emit DealDeposit(token, msg.sender, user, amount, reason, blockNumber, dealDeposits.length - 1);\n    }\n\n    function getDepositInfoLength() external view returns (uint256) {\n        return dealDeposits.length;\n    }\n\n    function getDepositInfo(uint256 from, uint256 to) external view returns (DealDepositInfo[] memory) {\n        require(to >= from, \"storedDeals: to < from\");\n        require(to < dealDeposits.length, \"getDepositInfo: overflow\");\n        DealDepositInfo[] memory result = new DealDepositInfo[](to - from + 1);\n        for (uint index = from; index <= to; ++index) {\n            result[index - from] = dealDeposits[index];\n        }\n        return result;\n    }\n\n    function withdrawByDeal(IERC20 token, address user, uint256 amount, uint8 reserved) external onlyDeal onlyIfNotFrozen(user) nonReentrant {\n        require(freeBalances[token][user] >= amount, \"BalanceKeeper: withdrawByDeal: not enough balance\");\n        require(freeBalanceTotal[token] >= amount, \"BalanceKeeper: withdrawByDeal: not enough total balance\");\n        decreaseFreeBalance(token, user, amount, BalanceChangeReason.WITHDRAW_BY_DEAL, msg.sender);\n        token.safeTransfer(user, amount);\n        emit Withdrawn(token, user, amount, reserved, msg.sender);\n    }\n\n    // METHODS FROM USER\n    function terminationRequest(IERC20 token) external onlyIfNotFrozen(msg.sender) {\n        require(dealBalances[token][msg.sender] == 0, \"BalanceKeeper: vodopadWithdraw: deal balance is not empty\");\n        require(manualWithdrawEnabled, \"BalanceKeeper: withdrawRequest: manual withdraw disabled\");\n        require(freeBalances[token][msg.sender] > 0, \"BalanceKeeper: withdrawRequest: not enough balance\");\n        require(terminationRequests[token][msg.sender] == 0, \"BalanceKeeper: withdrawRequest: already requested\");\n        terminationRequests[token][msg.sender] = block.timestamp;\n        emit TerminationRequestCreated(token, msg.sender, msg.sender);\n    }\n\n    function terminate(IERC20 token) external onlyIfNotFrozen(msg.sender) nonReentrant {\n        require(manualWithdrawEnabled, \"BalanceKeeper: withdraw: manual withdraw disabled\");\n        require(terminationRequests[token][msg.sender] > 0, \"BalanceKeeper: withdraw: no request\");\n        require(block.timestamp - terminationRequests[token][msg.sender] >= WITHDRAW_REQUEST_DELAY, \"BalanceKeeper: withdraw: too early\");\n        require(freeBalances[token][msg.sender] > 0, \"BalanceKeeper: withdraw: not enough balance\");\n        uint256 amount = freeBalances[token][msg.sender];\n        decreaseFreeBalance(token, msg.sender, amount, BalanceChangeReason.TERMINATE, address(0));\n        terminationRequests[token][msg.sender] = 0;\n        token.safeTransfer(msg.sender, amount);\n        emit TerminationExecuted(token, msg.sender, msg.sender);\n    }\n\n    // METHODS FROM DIAMOND OWNER\n    function setCoordinator(address _coordinator) external onlyDiamondOwner {\n        coordinator = _coordinator;\n        emit CoordinatorSet(_coordinator, msg.sender);\n    }\n\n    function withdrawFromLimbo(IERC20 token, address user, address to, uint256 amount) external nonReentrant onlyDiamondOwner {\n        require(limbo[token][user] >= amount, \"BalanceKeeper: withdrawFromLimbo: not enough balance\");\n        limbo[token][user] -= amount;\n        limboTotal[token] -= amount;\n        token.safeTransfer(to, amount);\n        emit WithdrawnFromLimbo(token, user, to, msg.sender, amount);\n    }\n\n    function fundFromLimbo(IERC20 token, address user, uint256 amount) external onlyDiamondOwner {\n        require(limbo[token][user] >= amount, \"BalanceKeeper: fundFromLimbo: not enough balance\");\n        limbo[token][user] -= amount;\n        limboTotal[token] -= amount;\n        increaseFreeBalance(token, user, amount, BalanceChangeReason.FUND_FROM_LIMBO, msg.sender);\n        emit FundedFromLimbo(token, user, msg.sender, amount);\n    }\n\n    function _authorizeUpgrade(address) internal override onlyDiamondOwner {\n    }\n}\n"},"src/balance-keeper/IBalanceKeeper.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBalanceKeeper {\n    enum BalanceChangeReason {\n        USER_TOP_UP,\n        MOVE_FROM_DEAL,\n        MOVE_FREE_BALANCE,\n        MOVE_TO_DEAL,\n        WITHDRAW_BY_DEAL,\n        TERMINATE,\n        SEND_TO_LIMBO,\n        FUND_FROM_LIMBO,\n        REFUND\n    }\n\n    enum DealDepositReason {\n        FUND_DEAL,\n        DEPLOY_DEAL\n    }\n\n    struct DealDepositInfo {\n        IERC20 token;\n        address deal;\n        address user;\n        DealDepositReason reason;\n        uint256 amount;\n        uint256 blockNumber;\n        uint256 reserved1; // to extend the struct as elements are stacked in array\n        uint256 reserved2; // to extend the struct as elements are stacked in array\n        uint256 reserved3; // to extend the struct as elements are stacked in array\n    }\n\n    event FreeBalanceIncrease(IERC20 indexed token, address indexed user, BalanceChangeReason indexed reason, uint256 amount, address info);\n    event FreeBalanceDecrease(IERC20 indexed token, address indexed user, BalanceChangeReason indexed reason, uint256 amount, address info);\n    event BalanceMoved(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint8 reserved);\n    event DealDeposit(\n        IERC20 indexed token,\n        address indexed deal,\n        address indexed user,\n        uint256 amount,\n        DealDepositReason reason,\n        uint256 blockNumber,\n        uint256 depositIndex // index in array\n    );\n    event DealWithdraw(IERC20 indexed token, address indexed deal, address indexed user, uint256 amount, uint8 reserved);\n    event CoordinatorSet(address indexed coordinator, address initiator);\n    event PoolTopUp(IERC20 indexed token, address indexed initiator, uint256 amount);\n    event PoolWithdraw(IERC20 indexed token, address indexed initiator, uint256 amount);\n    event UserBalanceIncrease(IERC20 indexed token, address indexed user, address indexed initiator, uint256 amount, string topUpId);\n    event DealMigrated(address indexed deal, IERC20 indexed token, uint256 amount);\n    event ManualWithdrawEnabled(address initiator);\n    event ManualWithdrawDisabled(address initiator);\n    event Refunded(IERC20 indexed token, address indexed user, uint256 amount, address initiator);\n    event SentToLimbo(IERC20 indexed token, address indexed user, address initiator, uint256 amount);\n    event AccountFreezeStateChanged(address indexed user, bool frozen, address initiator);\n    event Withdrawn(IERC20 indexed token, address indexed user, uint256 amount, uint8 reserved, address initiator);\n    event TerminationVeto(IERC20 indexed token, address indexed user, address initiator);\n    event TerminationRequestCreated(IERC20 indexed token, address indexed user, address initiator);\n    event TerminationExecuted(IERC20 indexed token, address indexed user, address initiator);\n    event WithdrawnFromLimbo(IERC20 indexed token, address indexed user, address indexed to, address initiator, uint256 amount);\n    event FundedFromLimbo(IERC20 indexed token, address indexed user, address initiator, uint256 amount);\n\n    // STATE\n    function diamond() external view returns (address);\n    function coordinator() external view returns (address);\n    function manualWithdrawEnabled() external view returns (bool);\n    function WITHDRAW_REQUEST_DELAY() external view returns (uint256);\n    function freeBalanceTotal(IERC20 token) external view returns (uint256);\n    function dealBalancesTotal(IERC20 token) external view returns (uint256);\n    function poolBalance(IERC20 token) external view returns (uint256);\n    function limbo(IERC20 token, address user) external view returns (uint256);\n    function limboTotal(IERC20 token) external view returns (uint256);\n    function frozen(address user) external view returns (bool);\n    function topUpIds(string calldata) external view returns (bool);\n\n    // INITIALIZATION\n    function initialize(address _diamond) external;\n\n    // VIEW METHODS\n    function getFreeBalance(IERC20 token, address user) external view returns (uint256);\n    function getFullBalance(IERC20 token, address user) external view returns (uint256);\n    function getDepositInfoLength() external view returns (uint256);\n    function getDepositInfo(uint256 from, uint256 to) external view returns (DealDepositInfo[] memory);\n\n    // COORDINATOR\n    function poolTopUp(IERC20 token, uint256 amount) external;\n    function poolWithdraw(IERC20 token, uint256 amount) external;\n    function enableOnchainRefund() external;\n    function disableOnchainRefund() external;\n    function refund(IERC20 token, address user, uint256 amount) external;\n    function freezeAccount(address user) external;\n    function unfreezeAccount(address user) external;\n    function sendToLimbo(IERC20 token, address user) external;\n    function terminationVeto(IERC20 token, address user) external;\n\n    // VODOPAD\n    function userTopUp(IERC20 token, address user, uint256 amount, string memory topUpId) external;\n\n    // DEAL\n    function moveBalanceFromDeal(IERC20 token, address user, uint256 amount, uint8 reserved) external;\n    function moveBalanceToDeal(IERC20 token, address user, uint256 amount, DealDepositReason reason) external;\n    function moveFreeBalance(IERC20 token, address from, address to, uint256 amount, uint8 reserved) external;\n    function withdrawByDeal(IERC20 token, address user, uint256 amount, uint8 reserved) external;\n\n    // USER\n    function terminationRequest(IERC20 token) external;\n    function terminate(IERC20 token) external;\n\n    // ADMIN\n    function setCoordinator(address _coordinator) external;\n    function withdrawFromLimbo(IERC20 token, address user, address to, uint256 amount) external;\n    function fundFromLimbo(IERC20 token, address user, uint256 amount) external;\n}\n"},"src/core/DealStakerRewards.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {PRECISION} from \"src/utils/Common.sol\";\nimport {LibCapacityConst} from \"src/lib/LibCapacityConst.sol\";\n\nlibrary DealStakerRewards {\n    using DealStakerRewards for Info;\n\n    event EntityAdded(bytes32 indexed commitmentId, bytes32 entityId, uint256 rewardPerEpoch, uint256 currentEpoch);\n    event EntityRemoved(bytes32 indexed commitmentId, bytes32 entityId, uint256 currentEpoch);\n    event StateUpdated(bytes32 indexed commitmentId, VestingState state);\n\n    struct Info {\n        bytes32 commitmentId;\n        uint256 totalWithdrawnRewardFlt;\n\n        mapping(bytes32 => EntityInfo) entities;\n        uint256 currentRewardPerEpochUsd;\n\n        VestingParams params;\n        VestingState vestingState;\n\n        uint256 lastUpdateEpoch;\n    }\n\n    struct VestingParams {\n        uint256 reservedSlot; // previous periodDuration\n        uint256 periodCount;\n    }\n\n    struct EntityInfo {\n        uint256 rewardPerEpochUsd;\n    }\n\n    struct VestingState {\n        // params.vestingCount elements since lastUpdateEpoch in FLT\n        uint256[] items;\n        uint256 accumulatedUnlockedFlt;\n    }\n\n    function init(Info storage self, bytes32 commitmentId, uint256 currentEpoch, uint256 vestingPeriodCount, uint256 vestingPeriodDuration) internal {\n        self.lastUpdateEpoch = currentEpoch;\n        self.commitmentId = commitmentId;\n        self.params.periodCount = vestingPeriodCount * vestingPeriodDuration;\n\n        // Vesting params difference (vestingPeriodDuration = 4, vestingPeriodCount = 3)\n        // CC rewards vesting:          *           *           *\n        // DS rewards vesting: *  *  *  *  *  *  *  *  *  *  *  *\n        // epoch               1  2  3  4  5  6  7  8  9 10 11 12\n\n        // 1 epoch shift difference\n        // earned at:          *\n        // CC rewards vesting:    *  *  *  *  *\n        // De rewards vesting: *  *  *  *  *\n        // epoch               1  2  3  4  5  6\n\n        // Unhandled unpaid deals -- payments continue\n        /// provier rew: *        *  *\n        //  worker  in:  *\n        //  worker  out:                *\n        //  staker  rew: *  *  *  *  *  *\n        // epoch         1  2  3  4  5  6\n\n\n        // Using average FLT price explanation/maths\n        // fltPrice       1 5 2 3 6\n        // rewardPerEpoch x x x x x\n        // epoch          1 2 3 4 5\n\n        // 1: 1 * x / 1 = 1x\n        // 2: (1 + 5) * x / 2 * 2 = 6x\n        // 3: (1 + 5 + 2) * x / 3 * 3 = 8x\n        // self.params.periodDuration = 0; // not used\n        self.vestingState.items = new uint256[](self.params.periodCount);\n    }\n\n    function total(Info storage self, uint256 currentEpoch) internal view returns (uint256) {\n        VestingState memory vestingState = self._updateVestingState(currentEpoch);\n\n        uint256 unvested = 0;\n        for (uint256 i = 0; i < self.params.periodCount; i++) {\n            unvested += vestingState.items[i];\n        }\n\n        return vestingState.accumulatedUnlockedFlt + unvested - self.totalWithdrawnRewardFlt;\n    }\n\n    function unlocked(Info storage self, uint256 currentEpoch) internal view returns (uint256) {\n        VestingState memory vestingState = self._updateVestingState(currentEpoch);\n\n        return vestingState.accumulatedUnlockedFlt - self.totalWithdrawnRewardFlt;\n    }\n\n    // long name to not mix up with withdraw method\n    function totalWithdrawn(Info storage self) internal view returns (uint256) {\n        return self.totalWithdrawnRewardFlt;\n    }\n\n    function withdraw(Info storage self, uint256 currentEpoch) internal returns (uint256) {\n        self._update(currentEpoch);\n        uint256 withdrawAmount = self.vestingState.accumulatedUnlockedFlt - self.totalWithdrawnRewardFlt;\n        //no require because CCs has 2 sources of rewards\n        //require(withdrawAmount > 0, \"Nothing to withdraw\");\n\n        self.totalWithdrawnRewardFlt += withdrawAmount;\n        return withdrawAmount;\n    }\n\n    function addEntity(\n        Info storage self,\n        bytes32 id,\n        uint256 rewardPerEpoch,\n        uint256 currentEpoch\n    ) internal {\n        self._update(currentEpoch);\n        self.entities[id].rewardPerEpochUsd = rewardPerEpoch;\n        self.currentRewardPerEpochUsd += rewardPerEpoch;\n        emit EntityAdded(self.commitmentId, id, rewardPerEpoch, currentEpoch);\n    }\n\n    function removeEntity(\n        Info storage self,\n        bytes32 id,\n        uint256 currentEpoch\n    ) internal {\n        self._update(currentEpoch);\n        self.currentRewardPerEpochUsd -= self.entities[id].rewardPerEpochUsd;\n        delete self.entities[id];\n        emit EntityRemoved(self.commitmentId, id, currentEpoch);\n    }\n\n    function _update(Info storage self, uint256 currentEpoch) internal {\n        self.vestingState = self._updateVestingState(currentEpoch);\n        self.lastUpdateEpoch = currentEpoch;\n        emit StateUpdated(self.commitmentId, self.vestingState);\n    }\n\n    function _updateVestingState(Info storage self, uint256 currentEpoch) internal view returns (VestingState memory) {\n        VestingState memory vestingState = self.vestingState;\n        if (currentEpoch == self.lastUpdateEpoch) {\n            return vestingState;\n        }\n\n        uint256 vestedEpochs = currentEpoch - self.lastUpdateEpoch;\n        // important: this code does not use price from ongoing epoch, so it will always return the same value for any call during epoch.\n        // from start of lastUpdateEpoch to 1s before the start of currentEpoch\n        // important: we have to use price in flt/usd units so that we can just multiply\n        // otherwise, meanRewardPerEpochFlt would be incorrect\n        // usdReward is constant during period\n        // (usdReward * fltUsd_1 + .. + usdReward * fltUsd_n) / n = usdReward * meanFltUsd\n        // (usdReward / usdFlt_1 + .. + usdReward / usdFlt_n) / n != usdReward / meanUsdFlt\n        uint256 meanRevFltPrice = LibCapacityConst.meanRevFltPrice(self.lastUpdateEpoch, currentEpoch - 1);\n        // (usd * USD_PRECISION) * (meanRevFltPrice * USD_PRECISION) * FLT_PRECISION / (USD_PRECISION * USD_PRECISION) =\n        // = flt * FLT_PRECISION\n        uint256 meanRewardPerEpochFlt = self.currentRewardPerEpochUsd * meanRevFltPrice * (1 ether) / (PRECISION * PRECISION);\n\n        (uint256 addUnlocked, uint256[] memory deceleration) = _calcAdditionalVesting(vestedEpochs, meanRewardPerEpochFlt, self.params.periodCount);\n\n        vestingState.accumulatedUnlockedFlt += addUnlocked;\n\n        for (uint256 i = 0; i < self.params.periodCount; i++) {\n            if (i < vestedEpochs) {\n                vestingState.accumulatedUnlockedFlt += vestingState.items[i];\n            }\n\n            if (i + vestedEpochs < self.params.periodCount) {\n                vestingState.items[i] = vestingState.items[i + vestedEpochs];\n            } else {\n                vestingState.items[i] = 0;\n            }\n\n            vestingState.items[i] += deceleration[i];\n        }\n\n        return vestingState;\n    }\n\n    function _calcAdditionalVesting(uint256 vestedEpochs, uint256 rewardPerEpoch, uint256 periodCount) internal pure returns (uint256, uint256[] memory) {\n        if (rewardPerEpoch == 0) {\n            return (0, new uint256[](periodCount));\n        }\n\n        uint256 rewardPerPart = rewardPerEpoch / periodCount;\n\n        uint256 maxSpeedEpochs = 0;\n        uint256 accelerationEpochs = min(periodCount, vestedEpochs);\n        if (vestedEpochs > accelerationEpochs) {\n            maxSpeedEpochs = vestedEpochs - accelerationEpochs;\n        }\n\n\n        uint256 accelerationParts = accelerationEpochs * (accelerationEpochs + 1) / 2;\n        uint256 maxSpeedParts = maxSpeedEpochs * periodCount;\n\n        uint256 unlockedRewards = (accelerationParts + maxSpeedParts) * rewardPerPart;\n        uint256[] memory deceleration = new uint256[](periodCount);\n        for (uint256 i = 0; i < periodCount; i++) {\n            if (accelerationEpochs + i >= periodCount) {\n                if (accelerationEpochs > 0) {\n                    accelerationEpochs--;\n                }\n            }\n\n            deceleration[i] = accelerationEpochs * rewardPerPart;\n        }\n\n        return (unlockedRewards, deceleration);\n        // acceleration | maxSpeed | decelerarion\n        // acceleration - time when rewards per epoch is increasing\n        // maxSpeed - time when rewards per epoch are max\n        // deceleration - time when rewards per epoch are decreasing\n        // acceleration + maxSpeed -- unlocked at the end of currentEpoch\n        // deceleration - lingering vesting from accounted epochs, after currentEpoch\n        // vesting period count = 5\n        // period = 7\n        // acceleration 5\n        // maxSpeed     2\n        // deceleration = vesting period count = 5\n        // 1 1 1 1 1 0 0 0 0 0 0 0\n        // 0 1 1 1 1 1 0 0 0 0 0 0\n        // 0 0 1 1 1 1 1 0 0 0 0 0\n        // 0 0 0 1 1 1 1 1 0 0 0 0\n        // 0 0 0 0 1 1 1 1 1 0 0 0\n        // 0 0 0 0 0 1 1 1 1 1 0 0\n        // 0 0 0 0 0 0 1 1 1 1 1 0\n    // tot 1 2 3 4 5 5 5|4 3 2 1 0\n        // tot 1 2 3 4 5|4 3 2 1 0\n          // tot 1 2 3 4|4 3 2 1 0\n            // tot 1 2 3|3 3 2 1 0\n              // tot 1 2|2 2 2 1 0\n                // tot 1|1 1 1 1 0\n\n    }\n\n    function min(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\n        if (lhs < rhs) {\n            return lhs;\n        } else {\n            return rhs;\n        }\n    }\n}\n"},"src/core/Snapshot.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {ICapacity} from \"src/core/interfaces/ICapacity.sol\";\n\nlibrary Snapshot {\n    struct Cache {\n        Params initial;\n        Params current;\n    }\n\n    struct Params {\n        ICapacity.CCStatus status;\n        uint256 failedEpoch;\n        uint256 totalFailCount;\n        uint256 activeUnitCount;\n        uint256 nextAdditionalActiveUnitCount;\n        uint256 snapshotEpoch;\n        uint256 currentSuccessCount;\n    }\n    \n    function init(ICapacity.Commitment storage commitment) internal view returns (Cache memory cache) {\n        cache.initial.status = commitment.info.status;\n        cache.initial.failedEpoch = commitment.finish.failedEpoch;\n        cache.initial.totalFailCount = commitment.progress.totalFailCount;\n        cache.initial.activeUnitCount = commitment.progress.activeUnitCount;\n        cache.initial.nextAdditionalActiveUnitCount = commitment.progress.nextAdditionalActiveUnitCount;\n        cache.initial.snapshotEpoch = commitment.progress.snapshotEpoch;\n        cache.initial.currentSuccessCount = commitment.progress.currentSuccessCount;\n\n        cache.current.status = cache.initial.status;\n        cache.current.failedEpoch = cache.initial.failedEpoch;\n        cache.current.totalFailCount = cache.initial.totalFailCount;\n        cache.current.activeUnitCount = cache.initial.activeUnitCount;\n        cache.current.nextAdditionalActiveUnitCount = cache.initial.nextAdditionalActiveUnitCount;\n        cache.current.snapshotEpoch = cache.initial.snapshotEpoch;\n        cache.current.currentSuccessCount = cache.initial.currentSuccessCount;\n    }\n    \n    function save(Cache memory self, ICapacity.Commitment storage commitment) internal {\n        if (self.initial.status != self.current.status) {\n            commitment.info.status = self.current.status;\n        }\n        if (self.initial.failedEpoch != self.current.failedEpoch) {\n            commitment.finish.failedEpoch = self.current.failedEpoch;\n        }\n        if (self.initial.totalFailCount != self.current.totalFailCount) {\n            commitment.progress.totalFailCount = self.current.totalFailCount;\n        }\n        if (self.initial.activeUnitCount != self.current.activeUnitCount) {\n            commitment.progress.activeUnitCount = self.current.activeUnitCount;\n        }\n        if (self.initial.nextAdditionalActiveUnitCount != self.current.nextAdditionalActiveUnitCount) {\n            commitment.progress.nextAdditionalActiveUnitCount = self.current.nextAdditionalActiveUnitCount;\n        }\n        if (self.initial.snapshotEpoch != self.current.snapshotEpoch) {\n            commitment.progress.snapshotEpoch = self.current.snapshotEpoch;\n        }\n        if (self.initial.currentSuccessCount != self.current.currentSuccessCount) {\n            commitment.progress.currentSuccessCount = self.current.currentSuccessCount;\n        }\n    }\n}\n"},"src/core/Vesting.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nlibrary Vesting {\n    struct Info {\n        uint256 totalWithdrawnReward;\n        Item[] items;\n    }\n\n    struct Item {\n        uint256 epoch;\n        uint256 cumulativeAmount;\n    }\n\n    event VestingScheduleItem(bytes32 indexed commitmentId, uint256 indexed id, uint256 indexed epoch, uint256 cumulativeAmount);\n    event VestingUpdateItem(bytes32 indexed commitmentId, uint256 indexed id, uint256 cumulativeAmount);\n\n    function total(Info storage self) internal view returns (uint256) {\n        uint256 length = self.items.length;\n        if (length == 0) {\n            return 0;\n        }\n\n        return self.items[length - 1].cumulativeAmount - self.totalWithdrawnReward;\n    }\n\n    function unlocked(Info storage self, uint256 withdrawEpoch) internal view returns (uint256) {\n        int256 index = _findClosest(self, withdrawEpoch);\n        if (index < 0) {\n            return 0;\n        }\n\n        return self.items[uint256(index)].cumulativeAmount - self.totalWithdrawnReward;\n    }\n\n    // long name to not mix up with withdraw method\n    function totalWithdrawn(Info storage self) internal view returns (uint256) {\n        return self.totalWithdrawnReward;\n    }\n\n    function withdraw(Info storage self, uint256 withdrawEpoch) internal returns (uint256 withdrawAmount) {\n        // mv find closest min vesting to offchain\n        (int256 index) = _findClosest(self, withdrawEpoch);\n\n        if (index < 0) {\n            // no valid vesting found\n            return 0;\n        }\n\n        Item storage item = self.items[uint256(index)];\n        uint256 totalWithdrawnReward = self.totalWithdrawnReward;\n\n        withdrawAmount = item.cumulativeAmount - totalWithdrawnReward;\n        self.totalWithdrawnReward = totalWithdrawnReward + withdrawAmount;\n    }\n\n    function add(\n        Info storage self,\n        bytes32 commitmentId,\n        uint256 reward,\n        uint256 startEpoch,\n        uint256 vestingPeriodDuration,\n        uint256 vestingPeriodCount\n    ) internal {\n        uint256 length = self.items.length;\n        uint256 rewardPerPeriod = reward / vestingPeriodCount;\n\n        // find next epoch divisible by vestingPeriodDuration\n        uint256 startVestingEpoch = (startEpoch + (vestingPeriodDuration - startEpoch % vestingPeriodDuration));\n        int256 index = _findClosest(self, startVestingEpoch);\n\n        // if startVestingEpoch is lower than all epochs in self.items, then it will be added to the back of the array,\n        // making self.items[i] non-monotonous\n        if (index == -1 && length != 0) {\n            revert(\"Vesting: startEpoch is below than all seen epochs\");\n        }\n\n        uint256 prevCumulativeAmount = 0;\n        // if startVestingEpoch is larger than any epoch in items, we need to skip this item\n        if (index >= 0 && self.items[uint256(index)].epoch < startVestingEpoch) {\n            prevCumulativeAmount = self.items[uint256(index)].cumulativeAmount;\n            index++;\n        }\n\n        for (uint256 i = 0; i < vestingPeriodCount; i++) {\n            uint256 cumulativeAmountIncrease = rewardPerPeriod * (i + 1);\n            if (index >= 0 && index < int256(length)) {\n                // update item\n                Item storage item = self.items[uint256(index)];\n                prevCumulativeAmount = item.cumulativeAmount; // Do NOT add rewardPerPeriod * (i + 1) here, it will break logic\n                item.cumulativeAmount = prevCumulativeAmount + cumulativeAmountIncrease;\n\n                emit VestingUpdateItem(commitmentId, uint256(index), prevCumulativeAmount + cumulativeAmountIncrease);\n\n                index++;\n            } else {\n                // create item\n                uint256 epoch = startVestingEpoch + (vestingPeriodDuration * i);\n                self.items.push(\n                    Item({\n                        epoch: epoch,\n                        cumulativeAmount: prevCumulativeAmount + cumulativeAmountIncrease\n                    })\n                );\n\n                emit VestingScheduleItem(commitmentId, self.items.length - 1, epoch, prevCumulativeAmount + cumulativeAmountIncrease);\n            }\n        }\n    }\n\n    // Returns:\n    // if exists, highest index such that self.items[index].epoch <= withdrawEpoch\n    // -1 otherwise\n    function _findClosest(Info storage self, uint256 withdrawEpoch) private view returns (int256 index) {\n        uint256 length = self.items.length;\n        index = -1;\n\n        if (length == 0) {\n            return index;\n        }\n\n        uint256 low = 0;\n        uint256 high = length - 1;\n\n        while (low <= high) {\n            uint256 mid = (low + high) / 2;\n\n            Item storage item = self.items[mid];\n            uint256 itemEpoch = item.epoch;\n\n            if (withdrawEpoch > itemEpoch) {\n                index = int256(mid);\n                low = mid + 1;\n            } else if (withdrawEpoch < itemEpoch) {\n                if (mid == 0) {\n                    return -1;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                return int256(mid);\n            }\n        }\n    }\n}\n"},"src/core/interfaces/IBaseOffer.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {CIDV1} from \"src/utils/Common.sol\";\n\n/// @title Offer contract interface\n/// @dev Offer contract is responsible for managing the offers in the market\ninterface IBaseOffer {\n    struct BaseOffer {\n        address provider;\n        address paymentToken;\n        uint256 peerCount;\n        uint256 minProtocolVersion;\n        uint256 maxProtocolVersion;\n    }\n\n    struct ProviderInfo {\n        string name;\n        CIDV1 metadata;\n        uint256 unitCount;\n    }\n\n    struct ComputePeer {\n        bytes32 offerId;\n        bytes32 commitmentId;\n        uint256 unitCount;\n        address owner;\n    }\n\n    struct ComputeUnit {\n        address deal;\n        bytes32 peerId;\n        uint256 startEpoch;\n        bytes32 onchainWorkerId;\n    }\n\n    struct ComputeUnitView {\n        bytes32 id;\n        address deal;\n        uint256 startEpoch;\n        bytes32 onchainWorkerId;\n    }\n\n    // ------------------ Events ------------------\n    /// @dev Emitted when a provider info is updated\n    /// @param provider The provider address\n    /// @param name The new name of the provider\n    /// @param metadata The new metadata of the provider\n    event ProviderInfoUpdated(address indexed provider, string name, CIDV1 metadata);\n\n    /// @dev Emitted when a new offer is registered\n    /// @param provider The provider address\n    /// @param offerId The offer id\n    /// @param minPricePerCuPerEpoch The min price per cu per epoch which the provider specify for the matching with the deal\n    /// @param paymentToken The payment token of the offer\n    /// @param effectors The effectors of the offer\n    event MarketOfferRegistered(\n        address indexed provider,\n        bytes32 offerId,\n        uint256 minPricePerCuPerEpoch,\n        address paymentToken,\n        CIDV1[] effectors,\n        uint256 minProtocolVersion,\n        uint256 maxProtocolVersion\n    );\n\n    /// @dev Emitted when an offer removed\n    /// @param offerId The offer i\n    event MarketOfferRemoved(bytes32 indexed offerId);\n\n    /// @dev Emitted when a peer created for an offer\n    event PeerCreated(bytes32 indexed offerId, bytes32 peerId, address owner);\n\n    /// @dev Emitted when a peer removed from an offer\n    /// @param offerId The offer id\n    /// @param peerId The peer id\n    event PeerRemoved(bytes32 indexed offerId, bytes32 indexed peerId);\n\n    /// @dev Emitted when a compute unit created for a peer\n    /// @param peerId The peer id\n    /// @param unitId The compute unit id\n    event ComputeUnitCreated(bytes32 indexed peerId, bytes32 unitId);\n\n    /// @dev Emitted when a compute unit removed from a peer\n    /// @param peerId The peer id\n    /// @param unitId The compute unit id\n    event ComputeUnitRemoved(bytes32 indexed peerId, bytes32 indexed unitId);\n\n    /// @dev Emitted when the payment token of an offer is updated\n    /// @param offerId The offer id\n    /// @param paymentToken The new payment token\n    event PaymentTokenUpdated(bytes32 indexed offerId, address paymentToken);\n\n    /// @dev Emitted when protocol version of an offer is updated\n    /// @param offerId The offer id\n    /// @param minProtocolVersion The new minimum supported protocol version\n    /// @param maxProtocolVersion The new maximum supported protocol version\n    event ProtocolVersionUpgraded(bytes32 indexed offerId, uint256 minProtocolVersion, uint256 maxProtocolVersion);\n\n\n    // ----------------- Public View -----------------\n    /// @dev Returns the provider info\n    /// @param provider The provider address\n    /// @return providerInfo The provider info\n    function getProviderInfo(address provider) external view returns (ProviderInfo memory);\n\n\n    /// @dev Returns the offer info\n    /// @param offerId The offer id\n    /// @return offer The offer info\n    function getBaseOffer(bytes32 offerId) external view returns (BaseOffer memory);\n\n    /// @dev Returns the compute peer info\n    function getComputePeer(bytes32 peerId) external view returns (ComputePeer memory);\n\n    /// @dev Returns the compute unit info\n    function getComputeUnit(bytes32 unitId) external view returns (ComputeUnit memory);\n\n    /// @dev Returns the compute unit ids of a peer\n    function getComputeUnitIds(bytes32 peerId) external view returns (bytes32[] memory);\n\n    /// @dev Returns the compute units info of a peer\n    function getComputeUnits(bytes32 peerId) external view returns (ComputeUnitView[] memory);\n\n    // ----------------- Public Mutable -----------------\n    function changePaymentToken(bytes32 offerId, address newPaymentToken) external;\n\n    /// @dev Set the provider info\n    /// @param name The name of the provider\n    /// @param metadata The metadata of the provider\n    function setProviderInfo(string calldata name, CIDV1 calldata metadata) external;\n}\n"},"src/core/interfaces/ICapacity.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {Vesting} from \"src/core/Vesting.sol\";\nimport {DealStakerRewards} from \"src/core/DealStakerRewards.sol\";\n\n/// @title Capacity contract interface\n/// @dev Capacity contract is responsible for managing the commitments\ninterface ICapacity {\n    // ------------------ Events ------------------\n\n    /// @dev Emitted when a new commitment is created\n    /// @param peerId Peer id which linked to the commitment\n    /// @param commitmentId Commitment id\n    /// @param duration The duration of the commitment in Epochs\n    /// @param delegator The delegator address. If address is zero, the commitment has no delegator\n    /// @param rewardDelegationRate The reward delegation rate in precision\n    /// @param fltCollateralPerUnit The flt collateral per compute unit\n    event CommitmentCreated(\n        bytes32 indexed peerId,\n        bytes32 commitmentId,\n        uint256 duration,\n        address delegator,\n        uint256 rewardDelegationRate,\n        uint256 fltCollateralPerUnit\n    );\n\n    /// @dev Emitted when a commitment is removed. Commitment can be removed only if it is in WaitDelegation status\n    /// @param commitmentId Commitment id\n    event CommitmentRemoved(bytes32 indexed commitmentId);\n\n    /// @dev Emitted when a commitment is activated. Commitment can be activated only if delegator deposited collateral.\n    /// @param peerId Peer id which linked to the commitment\n    /// @param commitmentId Commitment id which activated\n    /// @param startEpoch The start epoch of the commitment\n    /// @param endEpoch The end epoch of the commitment\n    /// @param unitIds Compute unit ids which linked to the commitment\n    event CommitmentActivated(\n        bytes32 indexed peerId, bytes32 indexed commitmentId, uint256 startEpoch, uint256 endEpoch, bytes32[] unitIds\n    );\n\n    /// @dev Emitted when a commitment is finished. Commitment can be finished only if it is in Failed or Ended\n    /// @param commitmentId Commitment id which finished\n    event CommitmentFinished(bytes32 indexed commitmentId);\n\n    /// @dev Emitted when a delegator deposited collateral to commitment\n    /// @param commitmentId Commitment id\n    /// @param totalCollateral The total collateral deposited to commitment\n    event CollateralDeposited(bytes32 indexed commitmentId, address indexed stakerAddress, uint256 totalCollateral);\n\n    /// @dev Emitted when a someone withdraws deposited collateral from commitment\n    /// @param commitmentId Commitment id\n    /// @param amountWithdrawn The returned part of the collateral after slashing\n    /// @param amountSlashed The slashed part of the collateral\n    event CollateralWithdrawn(bytes32 commitmentId, uint256 amountWithdrawn, uint256 amountSlashed);\n\n    event CommitmentFailed(bytes32 indexed commitmentId, uint256 failedEpoch);\n\n    /// @dev Emitted when a proof is submitted\n    /// @param commitmentId Commitment id\n    /// @param unitId Compute unit id which linked to the proof\n    /// @param localUnitNonce The local nonce of the unit for calculating the target hash\n    event ProofSubmitted(bytes32 indexed commitmentId, bytes32 indexed unitId, bytes32 localUnitNonce);\n\n    /// @dev Emitted when a reward is withdrawn\n    /// @param commitmentId Commitment id\n    /// @param providerReward The amount withdrawn for provider\n    /// @param dealStakerRewardsAmount The amount withdrawn for staker (with deal reward)\n    event RewardWithdrawn(bytes32 indexed commitmentId, uint256 providerReward, uint256 dealStakerRewardsAmount);\n\n    /// @dev Emitted when a unit deactivated. Unit is deactivated when it moved to deal\n    /// @param commitmentId Commitment id\n    /// @param unitId Compute unit id which deactivated\n    event UnitDeactivated(bytes32 indexed commitmentId, bytes32 indexed unitId);\n\n    /// @dev Emitted when a unit activated. Unit is activated when it returned from deal\n    /// @param commitmentId Commitment id\n    /// @param unitId Compute unit id which activated\n    event UnitActivated(bytes32 indexed commitmentId, bytes32 indexed unitId, uint256 startEpoch);\n\n    /// @dev Emitted in proof submission\n    /// @param unitIds Compute unit ids\n    /// @param confirmed Confirmation status of the proofs\n    event ProofsConfirmed(bytes32 indexed peerId, bytes32[] unitIds, bool[] confirmed);\n\n    // To fetch updates on changes in CC stats (currently only in stats related to CUs).\n    event CommitmentStatsUpdated(\n        bytes32 commitmentId,\n        uint256 totalFailCount,\n        uint256 exitedUnitCount,\n        uint256 activeUnitCount,\n        uint256 nextAdditionalActiveUnitCount,\n        // Aka Snapshot epoch but in order to not mislead with actual snapshotting, it renamed to changedEpoch.\n        uint256 changedEpoch\n    );\n\n    // ------------------ Errors ------------------\n    /// @dev Capacity commitment is not active\n    error CapacityCommitmentIsNotActive(CCStatus status);\n\n    /// @dev Invalid CC status\n    error InvalidCCStatus(CCStatus status);\n\n    // ------------------ Types ------------------\n    enum CCStatus {\n        Inactive,\n        Active,\n        // WaitDelegation - before collateral is deposited.\n        WaitDelegation,\n        // Status is WaitStart - means collateral deposited, and epoch should be proceed before Active.\n        WaitStart,\n        Failed,\n        Removed\n    }\n\n    struct UnitInfo {\n        bool isInactive;\n        uint256 lastSnapshotEpoch;\n        uint256 slashedCollateral;\n        mapping(uint256 => uint256) proofCountByEpoch;\n    }\n\n    struct Commitment {\n        CommitmentInfo info;\n        CommitmentProgress progress;\n        CommitmentFinish finish;\n        Vesting.Info vesting;\n        mapping(bytes32 => UnitInfo) unitInfoById;\n        mapping(bytes32 => bool) isUnitExited;\n        DealStakerRewards.Info dealRewards;\n    }\n\n    struct CommitmentInfo {\n        CCStatus status;\n        bytes32 peerId;\n        uint256 collateralPerUnit;\n        uint256 duration;\n        uint256 rewardDelegatorRate;\n        address delegator;\n        uint256 startEpoch;\n    }\n\n    struct CommitmentFinish {\n        uint256 failedEpoch;\n        uint256 exitedUnitCount;\n        uint256 totalSlashedCollateral;\n        bool collateralWithdrawn;\n    }\n\n    struct CommitmentProgress {\n        uint256 currentSuccessCount;\n        uint256 totalFailCount;\n        uint256 snapshotEpoch;\n        uint256 activeUnitCount;\n        uint256 nextAdditionalActiveUnitCount;\n    }\n\n    struct CommitmentView {\n        CCStatus status;\n        bytes32 peerId;\n        uint256 collateralPerUnit;\n        uint256 unitCount;\n        uint256 startEpoch;\n        uint256 endEpoch;\n        uint256 rewardDelegatorRate;\n        address delegator;\n        uint256 totalFailCount;\n        uint256 failedEpoch;\n        uint256 exitedUnitCount;\n    }\n\n    struct RewardInfo {\n        uint256 minProofsPerEpoch;\n        uint256 maxProofsPerEpoch;\n        uint256 totalSuccessProofs;\n    }\n\n    struct CCRewardsView {\n        uint256 ccRewards;\n        uint256 dealStakerRewards;\n    }\n\n    // ------------------ Views ------------------\n    /// @dev Returns the commitment status\n    /// @param commitmentId Commitment id\n    /// @return status commitment status\n    function getStatus(bytes32 commitmentId) external view returns (CCStatus);\n\n    /// @dev Returns the commitment info\n    /// @param commitmentId Commitment id\n    /// @return info commitment info\n    function getCommitment(bytes32 commitmentId) external view returns (CommitmentView memory);\n\n    /// @dev Returns the total rewards of the commitment.\n    /// @param commitmentId Commitment id\n    /// @return CCRewardsView Returns the total rewards of the commitment minus withdrawn rewards.\n    function totalRewards(bytes32 commitmentId) external view returns (CCRewardsView memory);\n\n    /// @dev Returns the unlocked rewards of the commitment\n    /// @param commitmentId Commitment id\n    /// @return CCRewardsView the unlocked rewards of the commitment minus withdrawn rewards.\n    function unlockedRewards(bytes32 commitmentId) external view returns (CCRewardsView memory);\n\n    /// @dev Returns rewards withdrawn from the commitment\n    /// @param commitmentId Commitment id\n    /// @return CCRewardsView rewards withdrawn from the commitment\n    function withdrawnRewards(bytes32 commitmentId) external view returns (CCRewardsView memory);\n\n    function getGlobalNonce() external view returns (bytes32);\n\n    /// @dev Returns proof counts for each CU in current epoch\n    /// @param commitmentId Commitment id\n    /// @return unitIds unit ids\n    /// @return counts proof numbers sent in current epoch\n    function getProofCounts(bytes32 commitmentId)\n        external\n        view\n        returns (bytes32[] memory unitIds, uint256[] memory counts);\n\n    /// @dev Returns list of units wth exited units marked\n    /// @param commitmentId Commitment id\n    /// @return unitIds unit ids\n    /// @return isExited if unit has exited the cc via removeCUFromCC function\n    function getUnitExitStatuses(bytes32 commitmentId)\n        external\n        view\n        returns (bytes32[] memory unitIds, bool[] memory isExited);\n\n    /// @dev Returns balance of the reward pool\n    function getRewardBalance() external view returns (uint256);\n\n    // ----------------- Mutable -----------------\n    /// @dev Creates a new commitment\n    /// @param peerId Peer id which linked to the commitment\n    /// @param duration The duration of the commitment in Epochs\n    /// @param delegator The delegator address. If address is zero, the commitment has no delegator\n    /// @param rewardDelegationRate The reward delegation rate in precision\n    function createCommitment(bytes32 peerId, uint256 duration, address delegator, uint256 rewardDelegationRate)\n        external\n        returns (bytes32);\n\n    /// @dev Removes the commitment if it is in WaitDelegation status\n    /// @param commitmentId Commitment id\n    function removeCommitment(bytes32 commitmentId) external;\n\n    /// @dev Finishes the commitment if it is in Failed or Ended status\n    /// @param commitmentId Commitment id\n    function finishCommitment(bytes32 commitmentId) external;\n\n    /// @dev Deposits collateral for commitments. It makes commitments active\n    /// @dev Note: this method consists of indirect potential delegator address update\n    /// @dev  (set delegator to msg.sender if 0x0 before).\n    /// @param commitmentIds Commitment ids\n    function depositCollateral(bytes32[] calldata commitmentIds) external payable;\n\n    /// @dev Submits proofs for the commitment\n    /// @param unitIds Compute unit ids which provide the proof\n    /// @param localUnitNonces Local nonces of the units for calculating the target hashes. It's the proof\n    /// @param resultHashes Target hashes of this proof\n    function submitProofs(bytes32[] memory unitIds, bytes32[] memory localUnitNonces, bytes32[] memory resultHashes)\n        external;\n\n    /// @dev Submits a proof for the commitment\n    /// @param unitId Compute unit id which provide the proof\n    /// @param localUnitNonce Local nonce of the unit for calculating the target hash. It's the proof\n    /// @param resultHash Target hash of this proof\n    function submitProof(bytes32 unitId, bytes32 localUnitNonce, bytes32 resultHash) external;\n\n    // @dev Returns number of submitted proofs along with min and max required number of proofs\n    // @param epoch\n    // @return reward info for given epoch\n    function getRewardInfo(uint256 epoch) external view returns (RewardInfo memory);\n\n    /// @dev Remove CU from Ended or Failed CC. Need to call this function before finish the commitment\n    /// @param commitmentId Commitment id\n    /// @param unitIds Compute unit ids which will be removed from the commitment\n    function removeCUFromCC(bytes32 commitmentId, bytes32[] calldata unitIds) external;\n\n    /// @dev Withdraws the reward from the commitment\n    /// @param commitmentId Commitment id\n    function withdrawReward(bytes32 commitmentId) external;\n\n    /// @dev Withdraws the collateral from the commitment. Commitment must be Failed or Inactive.\n    /// @param commitmentId Commitment id\n    function withdrawCollateral(bytes32 commitmentId) external;\n\n    /// @dev to add reward balance by msg.value\n    function diamondReceive() external payable;\n}\n"},"src/core/interfaces/ICapacityConst.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IEpochController} from \"src/core/interfaces/IEpochController.sol\";\n\n\n/// @title Capacity constants contract interface\n/// @dev The constants contract is responsible for managing the constants for the capacity commitment\ninterface ICapacityConst is IEpochController {\n    // ------------------ Events ------------------\n    /// @dev Emitted when a constant with a uint256 value is updated\n    /// @param constantType The type of the constant\n    /// @param newValue The new value of the constant\n    event CapacityConstantUpdated(CapacityConstantType constantType, uint256 newValue);\n\n    /// @dev Emitted when new oracle address is set\n    /// @param oracle The oracle address\n    event OracleSet(address oracle);\n\n    /// @dev Emitted when the FLT price is updated\n    /// @param newValue The new value of the FLT price\n    event FLTPriceUpdated(uint256 newValue);\n\n    /// @dev Emitted when the difficulty is updated\n    /// @param difficulty The new value of the difficulty\n    event DifficultyUpdated(bytes32 difficulty);\n\n    // ------------------ Types ------------------\n    enum CapacityConstantType {\n        MinDuration,\n        MaxDuration,\n        MinCUPerCommitment,\n        MaxCUPerCommitment,\n        USDCollateralPerUnit,\n        SlashingRate,\n        WithdrawEpochsAfterFailed,\n        MaxFailedRatio,\n        USDTargetRevenuePerEpoch,\n        MinRewardPerEpoch,\n        MaxRewardPerEpoch,\n        MinProofsPerEpoch,\n        MaxProofsPerEpoch\n    }\n\n    struct CapacityConstInitArgs {\n        uint256 fltPrice;\n        uint256 fltPriceUpdatePeriod;\n        uint256 usdCollateralPerUnit;\n        uint256 usdTargetRevenuePerEpoch;\n        uint256 minDuration;\n        uint256 maxDuration;\n        uint256 minCUPerCommitment;\n        uint256 maxCUPerCommitment;\n        uint256 minRewardPerEpoch;\n        uint256 maxRewardPerEpoch;\n        uint256 vestingPeriodDuration;\n        uint256 vestingPeriodCount;\n        uint256 slashingRate;\n        uint256 minProofsPerEpoch;\n        uint256 maxProofsPerEpoch;\n        uint256 withdrawEpochsAfterFailed;\n        uint256 maxFailedRatio;\n        bytes32 difficulty;\n        uint256 initRewardPool;\n        address randomXProxy;\n        address oracle;\n        address payable wfltAddress;\n    }\n\n    // #region ------------------ External View Functions ------------------\n    /// @dev Returns the last set flt price in usd/flt\n    function fltPrice() external view returns (uint256);\n\n    // #region ------------------ External View Functions ------------------\n    /// @dev Returns the flt price at the end of the epoch previous to given one.\n    /// @dev It means that this function will always return the same result for the same arguments.\n    /// @dev Epoch must be less or equal than current epoch.\n    /// @param epoch - epoch where\n    /// @return price in flt/usd\n    function fltPriceAtEpoch(uint256 epoch) external view returns (uint256);\n\n    /// @dev Returns the flt collateral per compute unit for creating CC\n    function fltCollateralPerUnit() external view returns (uint256);\n\n    /// @dev Returns the usd collateral per compute for creating CC\n    function usdCollateralPerUnit() external view returns (uint256);\n\n    /// @dev Returns the target revenue in usd value per epoch\n    function usdTargetRevenuePerEpoch() external view returns (uint256);\n\n    /// @dev Returns the min duration of CC in Epochs\n    function minDuration() external view returns (uint256);\n\n    /// @dev Returns the max duration of CC in Epochs\n    function maxDuration() external view returns (uint256);\n\n    /// @dev Returns the min number of CU in CC\n    function minCUPerCommitment() external view returns (uint256);\n\n    /// @dev Returns the max number of CU in CC\n    function maxCUPerCommitment() external view returns (uint256);\n\n    /// @dev Returns the min reward pool per epoch\n    function minRewardPerEpoch() external view returns (uint256);\n\n    /// @dev Returns the max reward pool per epoch\n    function maxRewardPerEpoch() external view returns (uint256);\n\n    /// @dev Returns the vesting duration for one period in Epochs\n    function vestingPeriodDuration() external view returns (uint256);\n\n    /// @dev Returns the total vesting periods\n    function vestingPeriodCount() external view returns (uint256);\n\n    /// @dev Returns the slashing rate for failed CU\n    function slashingRate() external view returns (uint256);\n\n    /// @dev Returns the min required randomX proofs per epoch for the 1 CU.\n    /// @dev  If lower than this - CU is failed and CC slashed.\n    function minProofsPerEpoch() external view returns (uint256);\n\n    /// @dev Returns the max randomX proofs per epoch\n    function maxProofsPerEpoch() external view returns (uint256);\n\n    /// @dev Returns the delay for withdraw collateral in Epochs after failed CC\n    function withdrawEpochsAfterFailed() external view returns (uint256);\n\n    /// @dev Returns the max failed ratio for CC\n    function maxFailedRatio() external view returns (uint256);\n\n    /// @dev Returns the active compute unit count\n    function activeUnitCount() external view returns (uint256);\n\n    /// @dev Returns the difficulty for randomX\n    function difficulty() external view returns (bytes32);\n\n    /// @dev Returns the randomX proxy address for verification of randomX proofs\n    function randomXProxy() external view returns (address);\n\n    /// @dev Returns the oracle address\n    function oracle() external view returns (address);\n\n    /// @dev Returns the reward pool per epoch\n    function getRewardPool(uint256 epoch) external view returns (uint256);\n    // #endregion ------------------ External View Functions ------------------\n\n    // #region ------------------ External Mutable Functions ------------------\n    /// @dev Sets the flt price\n    function setFLTPrice(uint256 fltPrice_) external;\n\n    /// @dev Sets the randomX difficulty\n    function setDifficulty(bytes32 difficulty_) external;\n\n    /// @dev Sets a constant with a uint256 value\n    function setCapacityConstant(CapacityConstantType constantType, uint256 v) external;\n\n    /// @dev Sets a new oracle\n    function setOracle(address oracle_) external;\n\n    /// @dev Gets last set flt price in usd/flt and timestamp of the last stored price\n    // Needed for oracle to understand if it should update the price\n    function lastPriceSetting() external view returns (uint256 timestamp, uint256 price);\n}\n"},"src/core/interfaces/ICore.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {IDealV2} from \"src/deal/interfaces/IDeal.sol\";\nimport {IGlobalConst} from \"src/core/interfaces/IGlobalConst.sol\";\nimport {IWhitelist} from \"src/interfaces/IWhitelist.sol\";\n\n/// @title Core contract interface\n/// @dev Core contract is the main contract of the system and it is responsible for navigation between modules\ninterface ICore is IWhitelist, IGlobalConst {\n    event DealImplSet(IDeal dealImpl);\n    event DealV2ImplSet(IDealV2 dealImpl);\n\n    function dealImpl() external view returns (IDeal);\n    function dealV2Impl() external view returns (IDealV2);\n    function setDealImpl(IDeal dealImpl_) external;\n    function setDealV2Impl(IDealV2 dealImpl_) external;\n}\n"},"src/core/interfaces/IDealFactory.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {IDealV2} from \"src/deal/interfaces/IDeal.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\nimport {IConfig} from \"src/deal/v1/interfaces/IConfig.sol\";\nimport {IConfigV2} from \"src/deal/interfaces/IConfig.sol\";\nimport {IOfferV2} from \"src/core/interfaces/IOfferV2.sol\";\nimport {IBalanceKeeper} from \"src/balance-keeper/IBalanceKeeper.sol\";\n\n/// @title Deal factory contract interface\n/// @dev Deal factory contract is responsible for creating deals\ninterface IDealFactory {\n    // ----------------- Events -----------------\n    /// @dev Emitted when a new deal is created\n    /// @param owner The owner of the deal\n    /// @param deal The deal address\n    /// @param createdAtEpoch The creation time of the deal in Epochs\n    /// @param paymentToken The payment token of the deal. User can choose any ERC20 token for payment\n    /// @param minWorkers The min workers of the deal. Deel will be activated only if the number of workers is greater\n    /// @param targetWorkers The target workers of the deal. It's the max number of workers for the deal\n    /// @param cuCountPerWorker CU count per worker\n    /// @param maxWorkersPerProvider The max workers per provider of the deal\n    /// @param pricePerCuPerEpoch The price per CU per epoch of the deal\n    /// @param effectors The effectors of the deal\n    /// @param appCID The app cid of the deal\n    /// @param providersAccessType_ The providers access type of the deal (None, Whitelist, Blacklist)\n    /// @param providersAccessList_ The providers access list of the deal\n    /// @param protocolVersion_ Protocol version\n    event DealCreated(\n        address indexed owner,\n        IDeal deal,\n        uint256 createdAtEpoch,\n        IERC20 paymentToken,\n        uint256 minWorkers,\n        uint256 targetWorkers,\n        uint256 cuCountPerWorker,\n        uint256 maxWorkersPerProvider,\n        uint256 pricePerCuPerEpoch,\n        CIDV1[] effectors,\n        CIDV1 appCID,\n        IConfig.AccessType providersAccessType_,\n        address[] providersAccessList_,\n        uint256 protocolVersion_\n    );\n\n    event DealCreatedV2(\n        address indexed owner,\n        IDealV2 deal,\n        uint256 createdAtEpoch,\n        IERC20 paymentToken,\n        uint256 targetWorkers,\n        IOfferV2.ResourceRequirement[] resources,\n        uint256 pricePerEpoch,\n        uint256 maxWorkersPerProvider,\n        CIDV1 appCID,\n        IConfigV2.AccessTypeV2 providersAccessType_,\n        address[] providersAccessList_,\n        uint256 protocolVersion_\n    );\n\n    event DealStopped(address indexed owner, address indexed deal, uint256 endedEpoch);\n    event DealStoppedV2(address indexed owner, address indexed deal, uint256 endedEpoch);\n\n    event DealFunded(address indexed owner, address indexed deal, uint256 amount, uint256 newMaxPaidEpoch);\n    event DealFundedV2(address indexed owner, address indexed deal, uint256 amount, uint256 newMaxPaidEpoch);\n\n    event VodopadSet(address indexed vodopad, address initiator);\n\n    // ----------------- View -----------------\n    /// @dev Returns true if the deal exists\n    /// @param deal The deal address\n    function hasDeal(address deal) external view returns (bool);\n\n    // ----------------- Mutable -----------------\n    /// @dev Creates a new deal\n    /// @param appCID_ The app cid of the deal\n    /// @param paymentToken_ The payment token of the deal. User can choose any ERC20 token for payment\n    /// @param depositAmount_ The deposit amount of the deal\n    /// @param minWorkers_ The min workers of the deal. Deel will be activated only if the number of workers is greater\n    /// @param targetWorkers_ The target workers of the deal. It's the max number of workers for the deal\n    /// @param maxWorkersPerProvider_ The max workers per provider of the deal\n    /// @param pricePerCuPerEpoch_ The price per CU per epoch of the deal\n    /// @param effectors_ The effectors of the deal\n    /// @param providersAccessType_ The providers access type of the deal (None, Whitelist, Blacklist)\n    /// @param providersAccessList_ The providers access list of the deal\n    /// @param protocolVersion_ Protocol version\n    /// @return The deal address\n    function deployDeal(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 depositAmount_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 cuCountPerWorker_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerCuPerEpoch_,\n        CIDV1[] calldata effectors_,\n        IConfig.AccessType providersAccessType_,\n        address[] calldata providersAccessList_,\n        uint256 protocolVersion_,\n        address owner_\n    ) external returns (IDeal);\n\n    /// @dev Creates a new deal v2\n    function deployDealV2(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 depositAmount_,\n        uint256 targetWorkers_,\n        IOfferV2.ResourceRequirement[] calldata resources_,\n        uint256 pricePerEpoch_,\n        uint256 maxWorkersPerProvider_,\n        IConfigV2.AccessTypeV2 providersAccessType_,\n        address[] calldata providersAccessList_,\n        uint256 protocolVersion_,\n        address owner_\n    ) external returns (IDealV2);\n\n    // ----------------- Mutable -----------------\n    // TODO move to market contract\n    function fundDeal(IDeal deal, uint256 targetMaxPaidEpoch) external;\n    function fundDealV2(IDealV2 deal, uint256 targetMaxPaidEpoch) external;\n    function setBalanceKeeper(IBalanceKeeper balanceKeeper) external;\n    function balanceKeeper() external view returns (IBalanceKeeper);\n    function setVodopad(address vodopad) external;\n    function vodopad() external view returns (address);\n    function stopDealHandler() external;\n    function stopDealHandlerV2() external;\n    function storedDealCount() external returns (uint256);\n    function storedDeals(uint256 from, uint256 to) external returns (address[] memory);\n}\n"},"src/core/interfaces/IEpochController.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\n/// @title Epoch controller contract interface\n/// @dev Epoch controller contract is responsible for changing epochs\ninterface IEpochController {\n    /// @dev Returns current epoch\n    /// @return current epoch number\n    function currentEpoch() external view returns (uint256);\n\n    /// @dev Returns epoch duration\n    /// @return epochDuration in seconds\n    function epochDuration() external view returns (uint256);\n\n    /// @dev Returns epoch init timestamp\n    /// @return initTimestamp in seconds\n    function initTimestamp() external view returns (uint256);\n\n    /// @dev Returns timestamp of the given epoch\n    /// @return start epoch timestamp in seconds\n    function epochTimestamp(uint256 epoch) external view returns (uint256);\n}\n"},"src/core/interfaces/IGlobalConst.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\n\nimport {ICapacityConst} from \"src/core/interfaces/ICapacityConst.sol\";\n\n/// @title Global Constants contract interface\n/// @dev Global Constants contract stores global constants of the system and it is responsible for changing them\ninterface IGlobalConst is ICapacityConst {\n    // ------------------ Events ------------------\n    /// @dev Emitted when a constant with uint256 value is updated\n    /// @param constantType Constant type\n    /// @param newValue New uint256 value\n    event ConstantUpdated(ConstantType constantType, uint256 newValue);\n\n    event PaymentTokenAddedToWhitelist(address indexed paymentToken);\n\n    event PaymentTokenRemovedFromWhitelist(address indexed paymentToken);\n\n    // ------------------ Types ------------------\n    enum ConstantType {\n        MinDealDepositedEpochs,\n        MinDealRematchingEpochs,\n        MinProtocolVersion,\n        MaxProtocolVersion,\n        MaxUnitCountPerProvider\n    }\n\n    struct Constants1 {\n        uint256 fltPrice;\n        uint256 fltCollateralPerUnit;\n        uint256 usdCollateralPerUnit;\n        uint256 usdTargetRevenuePerEpoch;\n        uint256 minDuration;\n        uint256 maxDuration;\n        uint256 minRewardPerEpoch;\n        uint256 maxRewardPerEpoch;\n        uint256 vestingPeriodDuration;\n        uint256 vestingPeriodCount;\n        uint256 slashingRate;\n        uint256 minProofsPerEpoch;\n        uint256 maxProofsPerEpoch;\n        uint256 withdrawEpochsAfterFailed;\n        uint256 maxFailedRatio;\n    }\n\n    struct Constants2 {\n        uint256 epochDuration;\n        uint256 minDealRematchingEpoch;\n        uint256 minDealDepositedEpoch;\n        uint256 minCUPerCommitment;\n        uint256 maxCUPerCommitment;\n        uint256 precision;\n        uint256 initTimestamp;\n        bytes32 difficulty;\n    }\n\n    struct GlobalConstants {\n        Constants1 constants1;\n        Constants2 constants2;\n    }\n\n    // ------------------ External Constants ------------------\n    /// @dev Returns precision for decimal values (USD, percentage)\n    function precision() external view returns (uint256);\n\n    // ------------------ External View Functions ------------------\n\n    /// @dev Returns min deposited Epochs constant for new deals\n    /// @return min deposited Epochs for new deals\n    function minDealDepositedEpochs() external view returns (uint256);\n\n    /// @dev Returns min rematching Epochs constant for all deals\n    /// @return min rematching Epochs for all deals\n    function minDealRematchingEpochs() external view returns (uint256);\n\n    /// @dev Returns min protocol version which can be specified in offers and deals\n    /// @return min protocol version\n    function minProtocolVersion() external view returns (uint256);\n\n    /// @dev Returns max protocol version which can be specified in offers and deals\n    /// @return max protocol version\n    function maxProtocolVersion() external view returns (uint256);\n\n    /// @dev Returns max unit count allowed for single provider to have in all offers combined\n    /// @return max unit count per provider\n    function maxUnitCountPerProvider() external view returns (uint256);\n\n    /// @dev Adds payment token address to whitelist\n    function addPaymentTokenToWhitelist(address paymentToken) external;\n\n    /// @dev Removes payment token address from whitelist\n    function removePaymentTokenFromWhitelist(address paymentToken) external;\n\n    /// @dev Checks if address is allowed to use as payment token in deals/offers\n    /// @return true if address is allowed\n    function isPaymentTokenAllowed(address paymentToken) external view returns (bool);\n\n    // ------------------ External Mutable Functions ------------------\n    /// @dev Sets constant with uint256 value\n    /// @param constantType Constant type\n    /// @param v New uint256 value\n    function setConstant(ConstantType constantType, uint256 v) external;\n\n    /// @dev Returns all chain constants\n    /// @return all chain constants\n    function getAllConstants() external view returns (GlobalConstants memory);\n}\n"},"src/core/interfaces/IOffer.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\n\n/// @title Offer contract interface\n/// @dev Offer contract is responsible for managing the offers in the market\ninterface IOffer is IBaseOffer {\n    struct RegisterComputePeer {\n        bytes32 peerId;\n        address owner;\n        bytes32[] unitIds;\n    }\n\n    struct Offer {\n        address provider;\n        uint256 minPricePerCuPerEpoch;\n        address paymentToken;\n        uint256 peerCount;\n        uint256 minProtocolVersion;\n        uint256 maxProtocolVersion;\n    }\n\n    struct EffectorInfo {\n        string description;\n        CIDV1 metadata;\n    }\n\n    /// @dev Emitted when the min price per worker per epoch of an offer is updated\n    /// @param offerId The offer id\n    /// @param minPricePerCuPerEpoch The new min price per worker per epoch\n    event MinPricePerCuPerEpochUpdated(bytes32 indexed offerId, uint256 minPricePerCuPerEpoch);\n\n    /// @dev Emitted when an effector added to an offer\n    /// @param offerId The offer id\n    /// @param effector The effector cid\n    event EffectorAdded(bytes32 indexed offerId, CIDV1 effector);\n\n    /// @dev Emitted when an effector removed from an offer\n    /// @param offerId The offer id\n    /// @param effector The effector cid\n    event EffectorRemoved(bytes32 indexed offerId, CIDV1 effector);\n\n    /// @dev Emitted when the effector info is set. Effector info can be added by the contract owner\n    /// @param id The effector cid\n    /// @param description The description of the effector\n    /// @param metadata The metadata of the effector\n    event EffectorInfoSet(CIDV1 id, string description, CIDV1 metadata);\n\n    /// @dev Emitted when the effector info is removed\n    /// @param id The effector cid\n    event EffectorInfoRemoved(CIDV1 id);\n\n    /// @dev Returns the offer info\n    /// @param offerId The offer id\n    /// @return offer The offer info\n    function getOffer(bytes32 offerId) external view returns (Offer memory);\n\n    /// @dev Returns the effector info\n    /// @param id The effector cid\n    function getEffectorInfo(CIDV1 calldata id) external view returns (EffectorInfo memory);\n\n    // ----------------- Public Mutable -----------------\n\n    /// @dev Register a new offer\n    /// @param minPricePerCuPerEpoch The min price per CU per epoch which the provider specify for the matching with the deal\n    /// @param paymentToken The payment token of the offer\n    /// @param effectors The effectors of the offer\n    /// @param peers The compute peers of the offer\n    function registerMarketOffer(\n        uint256 minPricePerCuPerEpoch,\n        address paymentToken,\n        CIDV1[] calldata effectors,\n        RegisterComputePeer[] calldata peers,\n        uint256 minProtocolVersion,\n        uint256 maxProtocolVersion\n    ) external returns (bytes32);\n\n    /// @dev Add compute peers to an offer\n    function addComputePeers(bytes32 offerId, RegisterComputePeer[] calldata peers) external;\n\n    /// @dev Add compute units to a peer\n    function addComputeUnits(bytes32 peerId, bytes32[] calldata unitIds) external;\n\n    function removeOffer(bytes32 offerId) external;\n\n    function removeComputePeer(bytes32 peerId) external;\n\n    function removeComputeUnit(bytes32 unitId) external;\n\n    // Change offer\n    /// @dev Change the min price per CU per epoch of an offer\n    function changeMinPricePerCuPerEpoch(bytes32 offerId, uint256 newMinPricePerCuPerEpoch) external;\n\n    /// @dev Add effectors to an offer\n    function addEffector(bytes32 offerId, CIDV1[] calldata newEffectors) external;\n\n    /// @dev Remove effectors from an offer\n    function removeEffector(bytes32 offerId, CIDV1[] calldata effectors) external;\n\n    // Effector info\n    /// @dev Set the effector info. Effector info can be added by the contract owner\n    function setEffectorInfo(CIDV1 calldata id, string calldata description, CIDV1 calldata metadata) external;\n\n    /// @dev Remove the effector info. Effector info can be removed by the contract owner\n    function removeEffectorInfo(CIDV1 calldata id) external;\n}\n"},"src/core/interfaces/IOfferV2.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IDealV2} from \"src/deal/interfaces/IDeal.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {LibOfferV2} from \"src/lib/LibOfferV2.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts//utils/structs/EnumerableSet.sol\";\n\n/// @title Offer contract interface\n/// @dev Offer contract is responsible for managing the offers in the market\ninterface IOfferV2 {\n    enum ResourceType {\n        VCPU,\n        RAM,\n        STORAGE,\n        PUBLIC_IP,\n        NETWORK_BANDWIDTH,\n        GPU\n    }\n\n    struct Datacenter {\n        bytes32 id;\n        string countryCode;\n        string cityCode;\n        uint256 index;\n        uint256 tier;\n        string[] certifications;\n    }\n\n    // Unique across chain, not just per resource type\n    struct ResourceDescription {\n        ResourceType ty;\n        string metadata;\n    }\n\n    // Unique across chain, not just per resource type\n    struct ResourceDescriptionView {\n        bytes32 id;\n        ResourceType ty;\n        string metadata;\n    }\n\n    struct OfferResourcesParams {\n        mapping(bytes32 resourceId => uint256 price) resourcePrices;\n        EnumerableSet.Bytes32Set resourceIds;\n    }\n\n    struct PeerResourceParams {\n        mapping(bytes32 resourceId => PeerResource) resources;\n        EnumerableSet.Bytes32Set resourceIds;\n    }\n\n    struct PeerResource {\n        uint256 availableSupply;\n        uint256 maxSupply;\n        string details;\n    }\n\n    struct ResourceRequirement {\n        bytes32 resourceId;\n        IOfferV2.ResourceType ty;\n        uint256 quantity;\n    }\n\n    struct RegisterResourcePrice {\n        ResourceType ty;\n        bytes32 resourceId;\n        uint256 price;\n    }\n\n    struct RegisterPeerResource {\n        bytes32 resourceId;\n        uint256 supply;\n        string details;\n    }\n\n    struct RegisterComputePeerV2 {\n        bytes32 peerId;\n        address owner;\n        RegisterPeerResource[] resources;\n        bytes32[] unitIds;\n    }\n\n    struct UpgradeComputePeerV2 {\n        bytes32 peerId;\n        RegisterPeerResource[] resources;\n    }\n\n    struct RegisterDatacenter {\n        string countryCode;\n        string cityCode;\n        uint256 index;\n        uint256 tier;\n        string[] certifications;\n    }\n\n    struct OfferV2PriceView {\n        bytes32 resourceId;\n        ResourceType ty;\n        string metadata;\n        uint256 price;\n    }\n\n    struct PeerV2ResourceView {\n        bytes32 resourceId;\n        ResourceType ty;\n        string metadata;\n        string details;\n        uint256 availableSupply;\n        uint256 maxSupply;\n    }\n\n    struct OfferV2View {\n        bytes32 offerId;\n        address provider;\n        address paymentToken;\n        //bytes32 datacenterId; //todo unlock when breaking api\n        OfferV2PriceView[] prices;\n    }\n\n    struct PeerV2View {\n        bytes32 offerId;\n        bytes32 peerId;\n        bytes32 commitmentId;\n        IBaseOffer.ComputeUnitView[] unitIds;\n        PeerV2ResourceView[] resources;\n    }\n\n    event OfferV2Created(\n        bytes32 indexed offerId,\n        address paymentToken,\n        address provider,\n        bytes32 datacenterId\n    );\n\n    event PeerResourceRegistered(bytes32 indexed peerId, bytes32 resourceId, uint256 maxSupply, string details);\n\n    event PeerResourceRemoved(bytes32 indexed peerId, bytes32 resourceId);\n\n    event PeerResourceSupplyUpdated(bytes32 indexed peerId, bytes32 resourceId, uint256 newAvailableSupply, uint256 newMaxSupply);\n\n    event PeerResourceDetailsUpdated(bytes32 indexed peerId, bytes32 resourceId, string details);\n\n    event ResourceCreated(bytes32 indexed resourceId, ResourceType ty, string metadata);\n\n    event ResourceMetadataUpdated(bytes32 indexed resourceId, string metadata);\n\n    event ResourcePriceUpdated(bytes32 indexed offerId, bytes32 resourceId, uint256 price);\n\n    event OfferDatacenterUpdated(bytes32 indexed offerId, bytes32 datacenterId);\n\n    event DatacenterCreated(bytes32 indexed id, string countryCode, string cityCode, uint256 index, uint256 tier, string[] certifications);\n\n    event DatacenterUpdated(bytes32 indexed id, uint256 tier, string[] certifications);\n\n    function registerMarketOfferV2(\n        address paymentToken,\n        RegisterResourcePrice[] calldata resourcePrices,\n        RegisterComputePeerV2[] calldata peers,\n        bytes32 datacenterId\n    ) external returns (bytes32);\n\n    function upgradeMarketOfferV2(\n        bytes32 offerId,\n        RegisterResourcePrice[] calldata resourcePrices,\n        UpgradeComputePeerV2[] calldata peers,\n        bytes32 datacenterId\n    ) external;\n\n    function addComputePeersV2(bytes32 offerId, RegisterComputePeerV2[] calldata peers) external;\n\n    function addComputeUnitsV2(bytes32 peerId, bytes32[] calldata unitIds, IOfferV2.RegisterPeerResource calldata resource) external;\n\n    function removeOfferV2(bytes32 offerId) external;\n\n    function removeComputePeerV2(bytes32 peerId) external;\n\n    function removeComputeUnitV2(bytes32 unitId, bytes32 associatedResourceId) external;\n\n    function changeResourcePriceV2(bytes32 offerId, bytes32 resourceId, uint256 newPrice) external;\n\n    function changeResourceMaxSupplyV2(bytes32 peerId, bytes32 resourceId, uint256 newMaxSupply) external;\n\n    function changeResourceDetails(bytes32 peerId, bytes32 resourceId, string calldata details) external;\n\n    function removePeerResource(bytes32 peerId, bytes32 resourceId) external;\n\n    function registerPeerResource(bytes32 peerId, RegisterPeerResource calldata resource) external;\n\n    function registerResources(ResourceDescription[] calldata resources) external returns(bytes32[] memory);\n\n    function updateResourceMetadata(bytes32 resourceId, string calldata metadata) external;\n\n    function ramPerVcpu() external pure returns(uint256);\n\n    function vcpuPerCu() external pure returns(uint256);\n\n    function bytesPerRam() external pure returns(uint256);\n\n    function bytesPerStorage() external pure returns(uint256);\n\n    function createDatacenter(RegisterDatacenter calldata datacenter) external returns(bytes32);\n\n    function createDatacenters(RegisterDatacenter[] calldata datacenters) external returns(bytes32[] memory);\n\n    function updateDatacenter(bytes32 id, uint256 tier, string[] calldata certifications) external;\n\n    function setOfferDatacenter(bytes32 offerId, bytes32 datacenterId) external;\n\n    function getOfferDatacenter(bytes32 offerId) external view returns(bytes32);\n}\n"},"src/deal/interfaces/IConfig.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\nimport {IOfferV2} from \"src/core/interfaces/IOfferV2.sol\";\n\n/// @title Config contract interface\n/// @dev Config contract is responsible for managing the configuration of the deal\ninterface IConfigV2 {\n    // ------------------ Types ------------------\n    enum AccessTypeV2 {\n        NONE,\n        WHITELIST,\n        BLACKLIST\n    }\n\n    // ------------------ Events ------------------\n    /// @dev Emitted when the app CID is changed\n    /// @param newAppCID The new app CID\n    event AppCIDChanged(CIDV1 newAppCID);\n\n    /// @dev Emitted when the providers access type is changed\n    /// @param newAccessType The new access type\n    event ProvidersAccessTypeChanged(AccessTypeV2 newAccessType);\n\n    /// @dev Emitted when a provider is added to the access list\n    /// @param provider The provider address\n    event ProviderAddedToAccessList(address provider);\n\n    /// @dev Emitted when a provider is removed from the access list\n    /// @param provider The provider address\n    event ProviderRemovedFromAccessList(address provider);\n\n    // ------------------ View Functions ---------------------\n    /// @dev Returns the payment token address\n    function paymentToken() external view returns (IERC20);\n\n    /// @dev Returns the creation block of the deal\n    function creationBlock() external view returns (uint256);\n\n    /// @dev Returns the price per epoch\n    function pricePerEpoch() external view returns (uint256);\n\n    /// @dev Returns the price per epoch\n    function requiredResources() external view returns (IOfferV2.ResourceRequirement[] memory);\n\n    /// @dev Returns the max number of workers\n    function targetWorkers() external view returns (uint256);\n\n    /// @dev Returns the app CID\n    function appCID() external view returns (CIDV1 memory);\n\n    /// @dev Returns the max number of workers per provider\n    function maxWorkersPerProvider() external view returns (uint256);\n\n    /// @dev Returns the providers access type\n    function providersAccessType() external view returns (AccessTypeV2);\n\n    /// @dev Returns the boolean indicating whether the provider is allowed or not\n    function isProviderAllowed(address account) external view returns (bool);\n\n    // ------------------ Mutable Functions ------------------\n    /// @dev Sets the app CID\n    function setAppCID(CIDV1 calldata appCID_) external;\n\n    /// @dev Change the providers access type\n    function changeProvidersAccessType(AccessTypeV2 accessType) external;\n\n    /// @dev Adds a provider to the access list\n    function addProviderToAccessList(address provider) external;\n\n    /// @dev Removes a provider from the access list\n    function removeProviderFromAccessList(address provider) external;\n}\n"},"src/deal/interfaces/IDeal.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IWorkerManagerV2} from \"src/deal/interfaces/IWorkerManager.sol\";\nimport {ICore} from \"src/core/interfaces/ICore.sol\";\nimport {IDiamond} from \"src/interfaces/IDiamond.sol\";\nimport {IBalanceKeeper} from \"src/balance-keeper/IBalanceKeeper.sol\";\nimport {IOfferV2} from \"src/core/interfaces/IOfferV2.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\n\ninterface IDealV2 is IWorkerManagerV2 {\n    // ------------------ Types ------------------\n    enum Status {\n        // the deal does have enough funds to pay for the workers\n        INSUFFICIENT_FUNDS,\n        ACTIVE,\n        // the deal is stopped\n        ENDED,\n        // the deal has a balance and waiting for workers\n        NOT_ENOUGH_WORKERS,\n        // the deal has balance less than the minimal balance. Min balance: 2 * targetWorkers * pricePerCuPerEpoch * cuCountPerWorker\n        SMALL_BALANCE\n    }\n\n    struct WorkerPaymentInfo {\n        uint256 snapshotEpoch;\n        uint256 gapsDelta;\n    }\n\n    struct DealStorage {\n        uint256 totalBalance;\n        uint256 lockedBalance;\n        uint256 gapsEpochCount;\n        uint256 maxPaidEpoch;\n        uint256 lastCommitedEpoch;\n        mapping(bytes32 => WorkerPaymentInfo) workerPaymentInfo;\n        uint256 endedEpoch;\n        uint256 protocolVersion;\n        uint256 migratedToBalanceKeeper; // default 0, will be set to 1 after migration\n    }\n\n    struct DealRewards {\n        uint256 providerReward;\n        uint256 stakerReward;\n    }\n\n    // ----------------- Events -----------------\n    /// @dev Emitted when a owner deposits payment token to the deal\n    event Deposited(uint256 amount);\n\n    /// @dev Emitted when a owner withdraws payment token from the deal\n    event Withdrawn(uint256 amount);\n\n    /// @dev Emitted when a compute unit withdraws rewards from the deal\n    event RewardWithdrawn(bytes32 onchainWorkerId, uint256 providerReward, uint256 stakerReward);\n\n    /// @dev Emitted when a max paid epoch is updated\n    event MaxPaidEpochUpdated(uint256 maxPaidEpoch);\n\n    /// @dev Emitted when a deal is ended. This event can be emitted in the not-ended epoch. It can be emitted after the ended epoch in any epoch\n    event DealEnded(uint256 endedEpoch);\n\n    // ------------------ Init ------------------\n    function initialize(\n        IDiamond diamond_,\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 targetWorkers_,\n        IOfferV2.ResourceRequirement[] calldata resources_,\n        uint256 pricePerEpoch_,\n        uint256 maxWorkersPerProvider_,\n        AccessTypeV2 providersAccessType_,\n        address[] calldata providersAccessList_,\n        uint256 protocolVersion_,\n        address owner_\n    ) external;\n\n    /// @dev Returns the status of the deal\n    function getStatus() external view returns (Status);\n\n    /// @dev Returns the free balance of the deal\n    function getFreeBalance() external view returns (uint256);\n\n    /// @dev Returns the reward amount by compute unit ID\n    function getRewardAmount(bytes32 onchainWorkerId) external view returns (DealRewards memory);\n\n    /// @dev Returns the max paid epoch\n    function getMaxPaidEpoch() external view returns (uint256);\n\n    /// @dev Returns the protocol version\n    function getProtocolVersion() external view returns (uint256);\n\n    /// @dev Deposits payment token to the deal\n    function depositFromOwner(uint256 amount, IBalanceKeeper.DealDepositReason reason) external;\n\n    /// @dev Withdraws payment token from the deal\n    function withdraw(uint256 amount) external;\n\n    // ------------------ Public Mutable Functions ------------------\n    /// @dev Adds a compute unit to the deal\n    /// @param computeProvider The compute provider address\n    /// @param workerData The worker with data\n    /// @param peerId The peer ID\n    function addWorker(address computeProvider, WorkerDataV2 memory workerData, bytes32 peerId) external;\n\n    /// @dev Removes a worker from the deal\n    function removeWorker(bytes32 onchainWorkerId) external;\n\n    /// @dev Allows oracle to remove worker from a deal that is not paying workers.\n    function removeStaleWorkers(bytes32[] calldata onchainWorkerIds) external;\n\n    /// @dev Withdraws rewards from the deal by compute unit ID\n    function withdrawRewards(bytes32 onchainWorkerId) external;\n\n    /// @dev Set offchain worker ID for a corresponding onchain worker for a deal\n    function activateWorker(bytes32 onchainWorkerId, bytes32 offchainWorkerId) external;\n\n    /// @dev Stop the deal\n    function stop() external;\n}\n"},"src/deal/interfaces/IWorkerManager.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IConfigV2} from \"src/deal/interfaces/IConfig.sol\";\n\n/// @title Worker manager contract interface\n/// @dev Worker manager contract is responsible for managing the workers in the deal\ninterface IWorkerManagerV2 is IConfigV2 {\n    // ------------------ Types ------------------\n    struct WorkerDataV2 {\n        bytes32 onchainId;\n    }\n\n    struct Worker {\n        bytes32 offchainId;\n        bytes32 onchainId;\n        bytes32 peerId;\n        address provider;\n        uint256 joinedEpoch;\n    }\n\n    // ------------------ Events ------------------\n\n    /// @dev Emitted when a new worker is added\n    /// @param peerId The id of compute peer\n    /// @param onchainId The worker ID\n    event WorkerJoined(bytes32 indexed peerId, bytes32 onchainId);\n\n    /// @dev Emitted when a worker is removed\n    /// @param peerId The id of compute peer\n    /// @param onchainId The worker onchain ID\n    event WorkerRemoved(bytes32 indexed peerId, bytes32 onchainId);\n\n    /// @dev Emitted when a worker ID is updated\n    /// @param onchainWorkerId The worker\n    /// @param offchainWorkerId The new worker ID\n    event WorkerIdUpdated(bytes32 onchainWorkerId, bytes32 offchainWorkerId);\n\n    /// @dev Returns total number of workers\n    function getWorkerCount() external view returns (uint256);\n\n    /// @dev Returns number of workers in provider\n    function getWorkerCount(address provider) external view returns (uint256);\n\n    /// @dev Returns workers registered in this deal\n    function getWorkerIds() external view returns (bytes32[] memory);\n\n    /// @dev Returns the worker count. Worker is a compute unit that has a worker ID\n    function getActivatedWorkerCount() external view returns (uint256);\n\n    /// @dev Returns the boolean flag indicating whether the peer exists in the deal\n    function computePeerUsed(bytes32 peerId) external view returns (bool);\n}\n"},"src/deal/v1/interfaces/IConfig.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\n\n/// @title Config contract interface\n/// @dev Config contract is responsible for managing the configuration of the deal\ninterface IConfig {\n    // ------------------ Types ------------------\n    enum AccessType {\n        NONE,\n        WHITELIST,\n        BLACKLIST\n    }\n\n    // ------------------ Events ------------------\n    /// @dev Emitted when the app CID is changed\n    /// @param newAppCID The new app CID\n    event AppCIDChanged(CIDV1 newAppCID);\n\n    /// @dev Emitted when the providers access type is changed\n    /// @param newAccessType The new access type\n    event ProvidersAccessTypeChanged(AccessType newAccessType);\n\n    /// @dev Emitted when a provider is added to the access list\n    /// @param provider The provider address\n    event ProviderAddedToAccessList(address provider);\n\n    /// @dev Emitted when a provider is removed from the access list\n    /// @param provider The provider address\n    event ProviderRemovedFromAccessList(address provider);\n\n    // ------------------ View Functions ---------------------\n    /// @dev Returns the payment token address\n    function paymentToken() external view returns (IERC20);\n\n    /// @dev Returns the creation block of the deal\n    function creationBlock() external view returns (uint256);\n\n    /// @dev Returns the price per CU per epoch\n    function pricePerCuPerEpoch() external view returns (uint256);\n\n    /// @dev Returns the max number of workers\n    function targetWorkers() external view returns (uint256);\n\n    /// @dev Returns number of CUs in a worker\n    function cuCountPerWorker() external view returns (uint256);\n\n    /// @dev Returns the min number of workers\n    function minWorkers() external view returns (uint256);\n\n    /// @dev Returns the effector CIDs\n    function effectors() external view returns (CIDV1[] memory);\n\n    /// @dev Returns the app CID\n    function appCID() external view returns (CIDV1 memory);\n\n    /// @dev Returns the max number of workers per provider\n    function maxWorkersPerProvider() external view returns (uint256);\n\n    /// @dev Returns the providers access type\n    function providersAccessType() external view returns (AccessType);\n\n    /// @dev Returns the boolean indicating whether the provider is allowed or not\n    function isProviderAllowed(address account) external view returns (bool);\n\n    // ------------------ Mutable Functions ------------------\n    /// @dev Sets the app CID\n    function setAppCID(CIDV1 calldata appCID_) external;\n\n    /// @dev Change the providers access type\n    function changeProvidersAccessType(AccessType accessType) external;\n\n    /// @dev Adds a provider to the access list\n    function addProviderToAccessList(address provider) external;\n\n    /// @dev Removes a provider from the access list\n    function removeProviderFromAccessList(address provider) external;\n}\n"},"src/deal/v1/interfaces/IDeal.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IWorkerManager} from \"src/deal/v1/interfaces/IWorkerManager.sol\";\nimport {ICore} from \"src/core/interfaces/ICore.sol\";\nimport {IBalanceKeeper} from \"src/balance-keeper/IBalanceKeeper.sol\";\nimport {IDiamond} from \"src/interfaces/IDiamond.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\n\ninterface IDeal is IWorkerManager {\n    // ------------------ Types ------------------\n    enum Status {\n        // the deal does have enough funds to pay for the workers\n        INSUFFICIENT_FUNDS,\n        ACTIVE,\n        // the deal is stopped\n        ENDED,\n        // the deal has a balance and waiting for workers\n        NOT_ENOUGH_WORKERS,\n        // the deal has balance less than the minimal balance. Min balance: 2 * targetWorkers * pricePerCuPerEpoch * cuCountPerWorker\n        SMALL_BALANCE\n    }\n\n    struct WorkerPaymentInfo {\n        uint256 snapshotEpoch;\n        uint256 gapsDelta;\n    }\n\n    struct DealStorage {\n        uint256 totalBalance;\n        uint256 lockedBalance;\n        uint256 gapsEpochCount;\n        uint256 maxPaidEpoch;\n        uint256 lastCommitedEpoch;\n        mapping(bytes32 => WorkerPaymentInfo) workerPaymentInfo;\n        uint256 endedEpoch;\n        uint256 protocolVersion;\n        uint256 migratedToBalanceKeeper; // default 0, will be set to 1 after migration\n    }\n\n    struct DealRewards {\n        uint256 providerReward;\n        uint256 stakerReward;\n    }\n\n    // ----------------- Events -----------------\n    /// @dev Emitted when a owner deposits payment token to the deal\n    event Deposited(uint256 amount);\n\n    /// @dev Emitted when a owner withdraws payment token from the deal\n    event Withdrawn(uint256 amount);\n\n    /// @dev Emitted when a compute unit withdraws rewards from the deal\n    event RewardWithdrawn(bytes32 onchainWorkerId, uint256 providerReward, uint256 stakerReward);\n\n    /// @dev Emitted when a max paid epoch is updated\n    event MaxPaidEpochUpdated(uint256 maxPaidEpoch);\n\n    /// @dev Emitted when a deal is ended. This event can be emitted in the not-ended epoch. It can be emitted after the ended epoch in any epoch\n    event DealEnded(uint256 endedEpoch);\n\n    // ------------------ Init ------------------\n    function initialize(\n        IDiamond diamond_,\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 cuCountPerWorker_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerCuPerEpoch_,\n        CIDV1[] calldata effectors_,\n        AccessType providersAccessType_,\n        address[] calldata providersAccessList_,\n        uint256 protocolVersion_,\n        address owner_\n    ) external;\n\n    /// @dev Returns the status of the deal\n    function getStatus() external view returns (Status);\n\n    /// @dev Returns the free balance of the deal\n    function getFreeBalance() external view returns (uint256);\n\n    /// @dev Returns the reward amount by compute unit ID\n    function getRewardAmount(bytes32 onchainWorkerId) external view returns (DealRewards memory);\n\n    /// @dev Returns the max paid epoch\n    function getMaxPaidEpoch() external view returns (uint256);\n\n    /// @dev Returns the protocol version\n    function getProtocolVersion() external view returns (uint256);\n\n    /// @dev Deposits payment token to the deal\n    function depositFromOwner(uint256 amount, IBalanceKeeper.DealDepositReason reason) external;\n\n    /// @dev Withdraws payment token from the deal\n    function withdraw(uint256 amount) external;\n\n    // ------------------ Public Mutable Functions ------------------\n    /// @dev Adds a compute unit to the deal\n    /// @param computeProvider The compute provider address\n    /// @param workerData The worker with data\n    /// @param peerId The peer ID\n    function addWorker(address computeProvider, WorkerData memory workerData, bytes32 peerId) external;\n\n    /// @dev Removes a worker from the deal\n    function removeWorker(bytes32 onchainWorkerId) external;\n\n    /// @dev Allows oracle to remove worker from a deal that is not paying workers.\n    function removeStaleWorkers(bytes32[] calldata onchainWorkerIds) external;\n\n    /// @dev Withdraws rewards from the deal by compute unit ID\n    function withdrawRewards(bytes32 onchainWorkerId) external;\n\n    /// @dev Set offchain worker ID for a corresponding onchain worker for a deal\n    function activateWorker(bytes32 onchainWorkerId, bytes32 offchainWorkerId) external;\n\n    /// @dev Stop the deal\n    function stop() external;\n}\n"},"src/deal/v1/interfaces/IWorkerManager.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {IConfig} from \"src/deal/v1/interfaces/IConfig.sol\";\n\n/// @title Worker manager contract interface\n/// @dev Worker manager contract is responsible for managing the workers in the deal\ninterface IWorkerManager is IConfig {\n    // ------------------ Types ------------------\n    struct WorkerData {\n        bytes32 onchainId;\n        bytes32[] computeUnitIds;\n    }\n\n    struct Worker {\n        bytes32 offchainId;\n        bytes32 onchainId;\n        bytes32 peerId;\n        address provider;\n        uint256 joinedEpoch;\n        bytes32[] computeUnitIds;\n    }\n\n    // ------------------ Events ------------------\n\n    /// @dev Emitted when a new worker is added\n    /// @param peerId The id of compute peer\n    /// @param onchainId The worker ID\n    event WorkerJoined(bytes32 indexed peerId, bytes32 onchainId);\n\n    /// @dev Emitted when a worker is removed\n    /// @param peerId The id of compute peer\n    /// @param onchainId The worker onchain ID\n    event WorkerRemoved(bytes32 indexed peerId, bytes32 onchainId);\n\n    /// @dev Emitted when a worker ID is updated\n    /// @param onchainWorkerId The worker\n    /// @param offchainWorkerId The new worker ID\n    event WorkerIdUpdated(bytes32 onchainWorkerId, bytes32 offchainWorkerId);\n\n    // ------------------ Public View Functions ---------------------\n    /// @dev Returns worker by ID\n    function getWorker(bytes32 onchainWorkerId) external view returns (Worker memory);\n\n    /// @dev Returns total number of workers\n    function getWorkerCount() external view returns (uint256);\n\n    /// @dev Returns number of workers in provider\n    function getWorkerCount(address provider) external view returns (uint256);\n\n    /// @dev Returns workers registered in this deal\n    function getWorkers() external view returns (Worker[] memory);\n\n    /// @dev Returns the worker count. Worker is a compute unit that has a worker ID\n    function getActivatedWorkerCount() external view returns (uint256);\n\n    /// @dev Returns the boolean flag indicating whether the peer exists in the deal\n    function computePeerUsed(bytes32 peerId) external view returns (bool);\n}\n"},"src/interfaces/ArbSysInterface.sol":{"content":"// Copyright 2021-2022, Offchain Labs, Inc.\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title System level functionality\n * @notice For use by contracts to interact with core L2-specific functionality.\n * Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\n */\ninterface ArbSys {\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n\n    error InvalidBlockNumber(uint256 requested, uint256 current);\n}\n"},"src/interfaces/IDiamond.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {IDealV2} from \"src/deal/interfaces/IDeal.sol\";\nimport {ICapacityConst} from \"src/core/interfaces/ICapacityConst.sol\";\n\ninterface IDiamond {\n    event Initialized();\n\n    struct CoreParams {\n        uint256 epochDuration;\n        IDeal dealImpl;\n        IDealV2 dealV2Impl;\n        bool isWhitelistEnabled;\n        ICapacityConst.CapacityConstInitArgs capacityConstInitArgs;\n    }\n\n    struct CapacityParams {\n        bytes32 initGlobalNonce;\n    }\n\n    struct GlobalConstParams {\n        uint256 minDealDepositedEpochs;\n        uint256 minDealRematchingEpochs;\n        uint256 minProtocolVersion;\n        uint256 maxProtocolVersion;\n        uint256 maxUnitCountPerProvider;\n    }\n\n    fallback() external payable;\n}\n"},"src/interfaces/IDiamondCut.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"},"src/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Get the address of the owner\n    /// @return owner_ The address of the owner.\n    function owner() external view returns (address owner_);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}\n"},"src/interfaces/IWhitelist.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\n\ninterface IWhitelist {\n    event WhitelistAccessGranted(address account);\n    event WhitelistAccessRevoked(address account);\n\n\n    function isApproved(address account) external view returns (bool);\n    function grantAccess(address account) external;\n    function revokeAccess(address account) external;\n}\n"},"src/lib/LibBaseOffer.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {IOffer} from \"src/core/interfaces/IOffer.sol\";\nimport {LibCapacity} from \"src/lib/LibCapacity.sol\";\nimport {LibGlobalConst} from \"src/lib/LibGlobalConst.sol\";\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {IWorkerManager} from \"src/deal/v1/interfaces/IWorkerManager.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {OwnableUpgradableDiamond} from \"src/utils/OwnableUpgradableDiamond.sol\";\n\nstruct Effectors {\n    mapping(bytes32 => bool) hasEffector;\n}\n\nstruct OfferStorage {\n    mapping(address => IBaseOffer.ProviderInfo) providers;               // BaseOffer\n    mapping(bytes32 => IOffer.Offer) offers;                             // OfferV1 + BaseOffer (see struct)\n    mapping(bytes32 => IBaseOffer.ComputePeer) peers;                    // LibBaseOffer\n    mapping(bytes32 => IBaseOffer.ComputeUnit) computeUnits;             // LibBaseOffer\n    mapping(bytes32 => Effectors) effectorsByOfferId;                    // OfferV1\n    mapping(bytes32 => EnumerableSet.Bytes32Set) computeUnitIdsByPeerId; // LibBaseOffer\n    mapping(bytes32 => IOffer.EffectorInfo) effectorInfoById;            // OfferV1\n}\n\nlibrary LibBaseOffer {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    bytes32 internal constant _OFFER_ID_PREFIX = bytes32(uint256(keccak256(\"fluence.market.offer\")) - 1);\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.market.storage.v1\")) - 1);\n    uint256 public constant PROTOCOL_V1 = 1;\n    uint256 public constant PROTOCOL_V2 = 2;\n\n    function store() internal pure returns (OfferStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function getProviderInfo(address provider) internal view returns (IBaseOffer.ProviderInfo memory) {\n        return store().providers[provider];\n    }\n\n    function getBaseOffer(bytes32 offerId) internal view returns (IBaseOffer.BaseOffer memory) {\n        IOffer.Offer storage offer = store().offers[offerId];\n        require(offer.provider != address(0x00), \"Offer: offer doesn't exist\");\n\n        return IBaseOffer.BaseOffer({\n            provider: offer.provider,\n            paymentToken: offer.paymentToken,\n            peerCount: offer.peerCount,\n            minProtocolVersion: offer.minProtocolVersion,\n            maxProtocolVersion: offer.maxProtocolVersion\n        });\n    }\n\n    function getComputePeer(bytes32 peerId) internal view returns (IBaseOffer.ComputePeer memory) {\n        IBaseOffer.ComputePeer storage computePeer = store().peers[peerId];\n        require(computePeer.offerId != bytes32(0x00), \"Peer doesn't exist\");\n\n        return store().peers[peerId];\n    }\n\n    function getComputeUnit(bytes32 unitId) internal view returns (IBaseOffer.ComputeUnit memory) {\n        IBaseOffer.ComputeUnit storage computeUnit = store().computeUnits[unitId];\n        require(computeUnit.peerId != bytes32(0x00), \"getComputeUnit: Compute unit doesn't exist\");\n\n        return store().computeUnits[unitId];\n    }\n\n    function getComputeUnits(bytes32 peerId) internal view returns (IBaseOffer.ComputeUnitView[] memory) {\n        OfferStorage storage offerStorage = store();\n\n        bytes32[] memory unitIds = offerStorage.computeUnitIdsByPeerId[peerId].values();\n        IBaseOffer.ComputeUnitView[] memory units = new IBaseOffer.ComputeUnitView[](unitIds.length);\n\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n        bytes32 commitmentId = computePeer.commitmentId;\n\n        uint256 capacityStartEpoch;\n        if (commitmentId != bytes32(0x00)) {\n            capacityStartEpoch = LibCapacity.getCommitment(commitmentId).startEpoch;\n        }\n\n        for (uint256 i = 0; i < unitIds.length; i++) {\n            bytes32 unitId = unitIds[i];\n            IBaseOffer.ComputeUnit storage computeUnit = offerStorage.computeUnits[unitId];\n            uint256 startEpoch = computeUnit.startEpoch;\n\n            if (startEpoch == 0) {\n                startEpoch = capacityStartEpoch;\n            }\n\n            units[i] = IBaseOffer.ComputeUnitView({id: unitId, deal: computeUnit.deal, startEpoch: startEpoch, onchainWorkerId: computeUnit.onchainWorkerId});\n        }\n\n        return units;\n    }\n\n    function getComputeUnitIds(bytes32 peerId) internal view returns (bytes32[] memory) {\n        return store().computeUnitIdsByPeerId[peerId].values();\n    }\n\n    function setCommitmentId(bytes32 peerId, bytes32 commitmentId) internal {\n        OfferStorage storage offerStorage = store();\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n\n        computePeer.commitmentId = commitmentId;\n    }\n\n    function setStartEpoch(bytes32 unitId, uint256 startEpoch) internal {\n        OfferStorage storage offerStorage = store();\n        IBaseOffer.ComputeUnit storage computeUnit = offerStorage.computeUnits[unitId];\n\n        computeUnit.startEpoch = startEpoch;\n    }\n\n    function setProviderInfo(string calldata name, CIDV1 calldata metadata) internal {\n        require(bytes(name).length > 0, \"Name should be not empty\");\n        IBaseOffer.ProviderInfo storage provider = store().providers[msg.sender];\n        provider.name = name;\n        provider.metadata = metadata;\n\n        emit IBaseOffer.ProviderInfoUpdated(msg.sender, name, metadata);\n    }\n\n    function registerBaseOffer(\n        address paymentToken,\n        uint256 minProtocolVersion,\n        uint256 maxProtocolVersion\n    ) internal returns (bytes32) {\n        OfferStorage storage offerStorage = LibBaseOffer.store();\n\n        address provider = msg.sender;\n        bytes32 offerId = keccak256(abi.encodePacked(_OFFER_ID_PREFIX, provider, block.number, msg.data));\n\n        require(bytes(offerStorage.providers[provider].name).length > 0, \"Provider doesn't exist\");\n        require(offerStorage.offers[offerId].paymentToken == address(0x00), \"Offer already exists\");\n        require(address(paymentToken) != address(0x00), \"Payment token should be not zero address\");\n        require(minProtocolVersion >= LibGlobalConst.minProtocolVersion(), \"Min protocol version too small\");\n        require(maxProtocolVersion <= LibGlobalConst.maxProtocolVersion(), \"Max protocol version too big\");\n        require(minProtocolVersion <= maxProtocolVersion, \"Wrong protocol versions\");\n        require(LibGlobalConst.isPaymentTokenAllowed(paymentToken), \"Payment token is not allowed\");\n\n        // create market offer\n        offerStorage.offers[offerId] = IOffer.Offer({\n            provider: provider,\n            minPricePerCuPerEpoch: 0,\n            paymentToken: paymentToken,\n            peerCount: 0,\n            minProtocolVersion: minProtocolVersion,\n            maxProtocolVersion: maxProtocolVersion\n        });\n\n        emit IBaseOffer.MarketOfferRegistered(\n            provider, offerId, 0, paymentToken, new CIDV1[](0), minProtocolVersion, maxProtocolVersion\n        );\n\n        return offerId;\n    }\n\n    function removeBaseOffer(bytes32 offerId) internal {\n        OfferStorage storage offerStorage = store();\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offer.provider != address(0), \"Offer: offer doesn't exist\");\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n        require(offer.peerCount == 0, \"Offer has compute peers\");\n\n        delete offerStorage.offers[offerId];\n\n        emit IBaseOffer.MarketOfferRemoved(offerId);\n    }\n\n    function registerBaseComputePeer(\n        bytes32 offerId,\n        bytes32 peerId,\n        address owner,\n        bytes32[] calldata unitIds\n    ) internal {\n        OfferStorage storage offerStorage = store();\n\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(computePeer.offerId == bytes32(0x00), \"LibBaseOffer: Peer already exists in another offer\");\n        require(peerId != bytes32(0x00), \"LibBaseOffer: Peer id should be not empty\");\n        require(owner != address(0x00), \"LibBaseOffer: Owner address should be not empty\");\n\n        computePeer.offerId = offerId;\n        computePeer.owner = owner;\n\n        offer.peerCount++;\n\n        emit IBaseOffer.PeerCreated(offerId, peerId, computePeer.owner);\n        registerBaseComputeUnits(peerId, unitIds);\n    }\n\n    function removeBaseComputePeer(bytes32 peerId) internal {\n        OfferStorage storage offerStorage = LibBaseOffer.store();\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n        bytes32 offerId = computePeer.offerId;\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offerId != bytes32(0x00), \"Peer doesn't exist\");\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n\n        require(computePeer.unitCount == 0, \"Peer has compute units\");\n\n        require(offer.peerCount > 0, \"LibBaseOffer: attempt to remove a peer from an offer without peers\");\n        offer.peerCount--;\n        delete offerStorage.peers[peerId];\n\n        emit IBaseOffer.PeerRemoved(offerId, peerId);\n    }\n\n    function registerBaseComputeUnits(\n        bytes32 peerId,\n        bytes32[] calldata unitIds\n    ) internal {\n        OfferStorage storage offerStorage = store();\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n        IOffer.Offer storage offer = offerStorage.offers[computePeer.offerId];\n        IBaseOffer.ProviderInfo storage provider = offerStorage.providers[offer.provider];\n\n        uint256 unitCount = unitIds.length;\n\n        require(unitCount > 0, \"LibBaseOffer: units length should be greater than 0\");\n        require(provider.unitCount + unitCount <= LibGlobalConst.maxUnitCountPerProvider(), \"LibBaseOffer: Exceeded max CU number per Provider\");\n\n        for (uint256 i = 0; i < unitCount; i++) {\n            bytes32 unitId = unitIds[i];\n\n            require(unitId != bytes32(0x00), \"LibBaseOffer: Unit id should be not empty\");\n            require(offerStorage.computeUnits[unitId].peerId == bytes32(0x00), \"LibBaseOffer: Compute unit already exists\");\n\n            // create compute unit\n            offerStorage.computeUnits[unitId] = IBaseOffer.ComputeUnit({deal: address(0x00), peerId: peerId, startEpoch: 0, onchainWorkerId: 0});\n            require(offerStorage.computeUnitIdsByPeerId[peerId].add(unitId), \"LibBaseOffer: Invalid add to enumerable set\");\n\n            emit IBaseOffer.ComputeUnitCreated(peerId, unitId);\n        }\n\n        provider.unitCount += unitCount;\n        computePeer.unitCount += unitCount;\n    }\n\n    function removeBaseComputeUnit(bytes32 unitId) internal {\n        OfferStorage storage offerStorage = store();\n        IBaseOffer.ComputeUnit storage computeUnit = offerStorage.computeUnits[unitId];\n\n        bytes32 peerId = computeUnit.peerId;\n        require(peerId != bytes32(0x00), \"removeBaseComputeUnit: Compute unit doesn't exist\");\n\n        IBaseOffer.ComputePeer storage computePeer = offerStorage.peers[peerId];\n        IOffer.Offer storage offer = offerStorage.offers[computePeer.offerId];\n        IBaseOffer.ProviderInfo storage provider = offerStorage.providers[offer.provider];\n\n        require(offer.provider == msg.sender, \"Offer: protocol version mismatch, required v1\");\n        require(computePeer.commitmentId == bytes32(0x00), \"Peer has commitment\");\n        require(computeUnit.deal == address(0x00), \"Compute unit is in deal\");\n\n        require(computePeer.unitCount > 0, \"LibBaseOffer: cannot remove compute unit because peer has zero units\");\n        require(provider.unitCount > 0, \"LibBaseOffer: cannot remove compute unit because provider has zero units\");\n        computePeer.unitCount--;\n        provider.unitCount--;\n\n        require(offerStorage.computeUnitIdsByPeerId[peerId].remove(unitId), \"Invalid remove from enumerable set\");\n\n        delete offerStorage.computeUnits[unitId];\n\n        emit IBaseOffer.ComputeUnitRemoved(peerId, unitId);\n    }\n\n    function changePaymentToken(bytes32 offerId, address newPaymentToken) internal {\n        OfferStorage storage offerStorage = store();\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n        require(newPaymentToken != address(0x00), \"Payment token should be not zero address\");\n        require(LibGlobalConst.isPaymentTokenAllowed(newPaymentToken), \"Payment token is not allowed\");\n\n        offer.paymentToken = newPaymentToken;\n\n        emit IBaseOffer.PaymentTokenUpdated(offerId, newPaymentToken);\n    }\n\n    function upgradeProtocolVersion(bytes32 offerId, uint256 minProtocolVersion, uint256 maxProtocolVersion) internal {\n        IOffer.Offer storage offer = store().offers[offerId];\n        require(offer.provider != address (0), \"LibBaseOffer: offer does not exist\");\n        require(minProtocolVersion <= maxProtocolVersion, \"LibBaseOffer: min protocol version is larger than max protocol version\");\n        require(offer.minProtocolVersion <= minProtocolVersion, \"LibBaseOffer: attempt to downgrade minProtocolVersion during version upgrade\");\n        require(offer.maxProtocolVersion <= maxProtocolVersion, \"LibBaseOffer: attempt to downgrade manProtocolVersion during version upgrade\");\n\n        offer.minProtocolVersion = minProtocolVersion;\n        offer.maxProtocolVersion = maxProtocolVersion;\n\n        emit IBaseOffer.ProtocolVersionUpgraded(offerId, minProtocolVersion, maxProtocolVersion);\n    }\n}\n"},"src/lib/LibCapacity.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {ICapacity} from \"src/core/interfaces/ICapacity.sol\";\nimport {Snapshot} from \"src/core/Snapshot.sol\";\nimport {LibDiamond} from \"src/lib/LibDiamond.sol\";\nimport {LibBaseOffer} from \"src/lib/LibBaseOffer.sol\";\nimport {LibEpochController} from \"src/lib/LibEpochController.sol\";\nimport {LibCapacityConst} from \"src/lib/LibCapacityConst.sol\";\nimport {LibSendValue} from \"src/lib/LibSendValue.sol\";\nimport {PRECISION} from \"src/utils/Common.sol\";\nimport {Vesting} from \"src/core/Vesting.sol\";\nimport {DealStakerRewards} from \"src/core/DealStakerRewards.sol\";\n\nstruct CommitmentStorage {\n    mapping(bytes32 => ICapacity.Commitment) commitments;\n    mapping(uint256 => ICapacity.RewardInfo) rewardInfoByEpoch;\n    mapping(bytes32 => mapping(bytes32 => bool)) isProofSubmittedByUnit;\n    bytes32 globalNonce;\n    bytes32 nextGlobalNonce;\n    uint256 changedNonceEpoch;\n    uint256 rewardBalance;\n}\n\nlibrary LibCapacity {\n    using Snapshot for Snapshot.Cache;\n    using Vesting for Vesting.Info;\n    using DealStakerRewards for DealStakerRewards.Info;\n    using LibSendValue for address payable;\n\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.capacity.storage.v1\")) - 1);\n\n    function store() internal pure returns (CommitmentStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function _expiredEpoch(ICapacity.Commitment storage cc) internal view returns (uint256) {\n        return cc.info.startEpoch + cc.info.duration;\n    }\n\n    function getStatus(bytes32 commitmentId) internal view returns (ICapacity.CCStatus) {\n        CommitmentStorage storage s = store();\n        ICapacity.Commitment storage cc = s.commitments[commitmentId];\n\n        bytes32 peerId = cc.info.peerId;\n        require(peerId != bytes32(0x00), \"Capacity commitment doesn't exist\");\n\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerId);\n\n        Snapshot.Cache memory snapshotCache = Snapshot.init(cc);\n        ICapacity.CCStatus status = _preCommitCommitmentSnapshot(cc, snapshotCache, peer, LibEpochController.currentEpoch(), _expiredEpoch(cc));\n\n        return status;\n    }\n\n    // IMPORTANT: This function affects the off-chain indexer. If you change it, make sure to update the indexer accordingly.\n    function _preCommitCommitmentSnapshot(\n        ICapacity.Commitment storage cc,\n        Snapshot.Cache memory snapshotCache,\n        IBaseOffer.ComputePeer memory peer,\n        uint256 currentEpoch_,\n        uint256 expiredEpoch\n    ) internal view returns (ICapacity.CCStatus) {\n        ICapacity.CCStatus storageStatus = snapshotCache.current.status;\n        uint256 lastSnapshotEpoch = snapshotCache.current.snapshotEpoch;\n        uint256 snapshotEpoch = currentEpoch_ - 1;\n\n        if (cc.info.startEpoch == 0) {\n            return ICapacity.CCStatus.WaitDelegation;\n        } else if (cc.info.startEpoch > currentEpoch_) {\n            return ICapacity.CCStatus.WaitStart;\n        }\n\n        // only active status can have a snapshot and be changed because with other statuses CC can't work\n        // also if snapshotEpoch is less or equal to lastSnapshotEpoch, then we have snapshot for this epoch\n        if (storageStatus != ICapacity.CCStatus.Active || snapshotEpoch <= lastSnapshotEpoch) {\n            return storageStatus;\n        }\n\n        ICapacity.CCStatus newStatus = ICapacity.CCStatus.Active;\n        // if the snapshotEpoch is greater than expiredEpoch, then you need to take a snapshot only up to expiredEpoch\n        uint256 lastWorkingEpoch = expiredEpoch - 1;\n        if (snapshotEpoch >= lastWorkingEpoch) {\n            snapshotEpoch = lastWorkingEpoch;\n            newStatus = ICapacity.CCStatus.Inactive;\n        }\n\n        // #region init variables\n        uint256 maxFailedRatio_ = LibCapacityConst.maxFailedRatio();\n        uint256 activeUnitCount_ = snapshotCache.current.activeUnitCount;\n        uint256 nextAdditionalActiveUnitCount_ = snapshotCache.current.nextAdditionalActiveUnitCount;\n        uint256 totalFailCount = snapshotCache.current.totalFailCount;\n        uint256 prevFailCount = totalFailCount;\n        // All successes (CU/epoch) happened during snapshot period.\n        // In fact, all of them happened on the first epoch of the period\n        uint256 successesInTargetPeriod = snapshotCache.current.currentSuccessCount;\n\n        uint256 failsInFirstTargetedEpoch = 0;\n        if (activeUnitCount_ > successesInTargetPeriod) {\n            failsInFirstTargetedEpoch = activeUnitCount_ - successesInTargetPeriod;\n        }\n        // maxFailCount is a number of Epochs when units not send proofs\n        // if on unit not send proof per one epoch, it's mean that it's one fail\n        // maxFailedRatio is the ratio of failed attempts for all units\n        uint256 maxFailCount = maxFailedRatio_ * peer.unitCount;\n        uint256 snapshotEpochCount = snapshotEpoch - lastSnapshotEpoch;\n        // nextAdditionalActiveUnitCount_ excludes CUs from proof sending only for one epoch, so for all subsequent epochs we require them to succeed\n        uint256 requiredSuccessCount = (activeUnitCount_ + nextAdditionalActiveUnitCount_) * snapshotEpochCount - nextAdditionalActiveUnitCount_;\n        // #endregion\n\n        // #region calculate fail count\n\n        // When unit send min proof per one epoch, it's a one success. successCount is a number of success for all units in the snapshot period\n        // if successCount is less than requiredSuccessCount, then some units didn't send min proof per few Epochs\n        uint256 snapshotTotalFailCount = 0;\n        if (successesInTargetPeriod < requiredSuccessCount) {\n            // snapshotTotalFailCount is a number of fails for all units in the snapshot period\n            snapshotTotalFailCount = requiredSuccessCount - successesInTargetPeriod;\n            totalFailCount += snapshotTotalFailCount;\n        }\n\n        // if totalFailCount_ is more than maxFailCount, then CC is failed\n        if (totalFailCount >= maxFailCount) {\n            totalFailCount = maxFailCount;\n            uint256 restFailCount = maxFailCount - prevFailCount;\n            newStatus = ICapacity.CCStatus.Failed;\n\n            if (failsInFirstTargetedEpoch >= restFailCount) {\n                snapshotCache.current.failedEpoch = lastSnapshotEpoch + 1;\n            } else {\n                uint256 newActiveUnitCount = activeUnitCount_ + nextAdditionalActiveUnitCount_;\n\n                // numberOfFillFailedEpoch is a number of epochs when units not send proofs\n                uint256 numberOfFillFailedEpoch = 1;\n                restFailCount -= failsInFirstTargetedEpoch;\n\n                // TOOD: add currentSuccessCount to calculation\n                numberOfFillFailedEpoch += restFailCount / newActiveUnitCount;\n                uint256 remainingFailedUnitsInLastEpoch = restFailCount % newActiveUnitCount;\n\n                // Math.ceil(numberOfFillFailedEpoch)\n                // if remainingFailedUnitsInLastEpoch is not zero, then we should add one to numberOfFillFailedEpoch becouse the last epoch is not full\n                if (remainingFailedUnitsInLastEpoch != 0) {\n                    numberOfFillFailedEpoch += 1;\n                }\n\n                snapshotCache.current.failedEpoch = lastSnapshotEpoch + numberOfFillFailedEpoch;\n            }\n        }\n\n        snapshotCache.current.totalFailCount = totalFailCount;\n        // #endregion\n\n        // #region update activeUnitCount\n        // when unit return from deal, unit need to wait one epoch before it will be active\n        // nextAdditionalActiveUnitCount is a number of units that will be active in the next epoch\n        uint256 nextAdditionalActiveUnitCount = snapshotCache.current.nextAdditionalActiveUnitCount;\n\n        // update activeUnitCount if it's needed\n        if (nextAdditionalActiveUnitCount > 0) {\n            snapshotCache.current.activeUnitCount += nextAdditionalActiveUnitCount;\n            snapshotCache.current.nextAdditionalActiveUnitCount = 0;\n        }\n\n        // #endregion\n\n        // #region update status\n        if (newStatus != ICapacity.CCStatus.Active) {\n            snapshotCache.current.activeUnitCount = 0;\n            snapshotCache.current.status = newStatus;\n        }\n        // #endregion\n\n        // #region update progress\n        snapshotCache.current.snapshotEpoch = snapshotEpoch;\n        snapshotCache.current.currentSuccessCount = 0;\n        // #endregion\n\n        return newStatus;\n    }\n\n    function _postCommitCommitmentSnapshot(\n        bytes32 commitmentId,\n        ICapacity.Commitment storage cc,\n        Snapshot.Cache memory snapshotCache\n    ) internal {\n        if (snapshotCache.initial.status != snapshotCache.current.status) {\n            uint256 initialActiveUnitCount_ =\n                snapshotCache.initial.activeUnitCount + snapshotCache.initial.nextAdditionalActiveUnitCount;\n\n            if (snapshotCache.current.status == ICapacity.CCStatus.Failed) {\n                emit ICapacity.CommitmentFailed(commitmentId, snapshotCache.current.failedEpoch);\n\n                LibCapacityConst.setActiveUnitCount(LibCapacityConst.activeUnitCount() - initialActiveUnitCount_);\n            } else if (snapshotCache.current.status == ICapacity.CCStatus.Inactive) {\n                LibCapacityConst.setActiveUnitCount(LibCapacityConst.activeUnitCount() - initialActiveUnitCount_);\n            }\n        }\n\n        snapshotCache.save(cc);\n    }\n\n    function _commitUnitSnapshot(\n        ICapacity.UnitInfo storage unitInfo,\n        bytes32 commitmentId,\n        uint256 currentEpoch,\n        uint256 expiredEpoch,\n        uint256 failedEpoch\n    ) internal {\n        CommitmentStorage storage s = store();\n        ICapacity.Commitment storage cc = s.commitments[commitmentId];\n        uint256 snapshotEpoch = currentEpoch - 1;\n\n        // #region verify args\n        // if unit is inactive, then no need to do anything because it's means that unit is in deal\n        if (unitInfo.isInactive) {\n            return;\n        }\n\n        // if snapshotEpoch is more than expiredEpoch, then we should use expiredEpoch because it means that the commitment is expired before we start making a snapshot\n        uint256 lastWorkingEpoch = expiredEpoch - 1;\n        if (snapshotEpoch > lastWorkingEpoch) {\n            snapshotEpoch = lastWorkingEpoch;\n        }\n\n        // if failedEpoch is more than 0 and snapshotEpoch is more than failedEpoch, then we should use failedEpoch because it means that the commitment is failed before we start making a snapshot\n        if (failedEpoch != 0 && snapshotEpoch > failedEpoch) {\n            snapshotEpoch = failedEpoch;\n        }\n\n        // if lastMinProofsEpoch is zero then we should use startEpoch - 1 because (startEpoch - 1) is the first epoch snapshot\n        uint256 lastSnapshotEpoch = unitInfo.lastSnapshotEpoch;\n        if (lastSnapshotEpoch == 0) {\n            lastSnapshotEpoch = cc.info.startEpoch - 1;\n        }\n\n        // if snapshotEpoch is less or equal to lastSnapshotEpoch, then we should return false because it means that we already made a snapshot for this epoch\n        if (snapshotEpoch <= lastSnapshotEpoch) {\n            return;\n        }\n        // #endregion\n\n        unitInfo.lastSnapshotEpoch = snapshotEpoch;\n\n        ICapacity.RewardInfo storage rewardInfo = s.rewardInfoByEpoch[snapshotEpoch];\n\n        // #region calculate reward for the last epoch snapshot\n        uint256 nextEpochAfterLastSnapshot = lastSnapshotEpoch + 1;\n        uint256 lastProofCount = unitInfo.proofCountByEpoch[nextEpochAfterLastSnapshot];\n        rewardInfo = s.rewardInfoByEpoch[nextEpochAfterLastSnapshot];\n        if (lastProofCount < rewardInfo.minProofsPerEpoch) {\n            return;\n        }\n\n        uint256 totalSuccessProofs = rewardInfo.totalSuccessProofs;\n        if (totalSuccessProofs == 0) {\n            return;\n        }\n\n        uint256 reward =\n            (LibCapacityConst.getRewardPool(nextEpochAfterLastSnapshot) * lastProofCount) / rewardInfo.totalSuccessProofs;\n\n        if (reward > 0) {\n            cc.vesting.add(commitmentId, reward, snapshotEpoch, LibCapacityConst.vestingPeriodDuration(), LibCapacityConst.vestingPeriodCount());\n        }\n\n        delete unitInfo.proofCountByEpoch[nextEpochAfterLastSnapshot];\n        // #endregion\n    }\n\n    function _getOrSaveRewardPool(uint256 epoch) internal returns (ICapacity.RewardInfo storage rewardInfo) {\n        CommitmentStorage storage s = store();\n        rewardInfo = s.rewardInfoByEpoch[epoch];\n\n        if (rewardInfo.minProofsPerEpoch != 0) {\n            return rewardInfo;\n        }\n\n        rewardInfo.minProofsPerEpoch = LibCapacityConst.minProofsPerEpoch();\n        rewardInfo.maxProofsPerEpoch = LibCapacityConst.maxProofsPerEpoch();\n        rewardInfo.totalSuccessProofs = 0;\n    }\n\n    function onUnitMovedToDeal(bytes32 commitmentId, bytes32 unitId, uint256 pricePerCuPerEpoch) internal {\n        CommitmentStorage storage s = store();\n\n        uint256 currentEpoch_ = LibEpochController.currentEpoch();\n\n        ICapacity.Commitment storage cc = s.commitments[commitmentId];\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(cc.info.peerId);\n        ICapacity.UnitInfo storage unitInfo = cc.unitInfoById[unitId];\n\n        uint256 expiredEpoch = _expiredEpoch(cc);\n\n        // #region commit snapshot for unit and commitment\n        Snapshot.Cache memory snapshotCache = Snapshot.init(cc);\n        ICapacity.CCStatus status = _preCommitCommitmentSnapshot(cc, snapshotCache, peer, currentEpoch_, expiredEpoch);\n        _postCommitCommitmentSnapshot(commitmentId, cc, snapshotCache);\n        if (status != ICapacity.CCStatus.Active) {\n            revert ICapacity.CapacityCommitmentIsNotActive(status);\n        }\n\n        _commitUnitSnapshot(unitInfo, commitmentId, currentEpoch_, expiredEpoch, snapshotCache.current.failedEpoch);\n        // #endregion\n\n\n        unitInfo.isInactive = true;\n\n        // lastSnapshotEpoch can be equal to currentEpoch only if the unit exited a deal during this epoch\n        if (unitInfo.lastSnapshotEpoch == currentEpoch_) {\n            // compute unit just exited a deal in this epoch, it is not counted as active until next epoch\n            cc.progress.nextAdditionalActiveUnitCount--;\n        } else {\n            // compute unit is fully active\n            cc.progress.activeUnitCount--;\n            LibCapacityConst.setActiveUnitCount(LibCapacityConst.activeUnitCount() - 1);\n        }\n\n        uint256 defaultBaseReward = LibCapacityConst.usdTargetRevenuePerEpoch();\n        uint256 actualBaseReward = pricePerCuPerEpoch;\n        uint256 dealStakerReward = Math.min(defaultBaseReward, actualBaseReward) * cc.info.rewardDelegatorRate / PRECISION;\n\n        cc.dealRewards.addEntity(unitId, dealStakerReward, currentEpoch_);\n        emit ICapacity.CommitmentStatsUpdated(\n            commitmentId,\n            cc.progress.totalFailCount,\n            cc.finish.exitedUnitCount,\n            cc.progress.activeUnitCount,\n            cc.progress.nextAdditionalActiveUnitCount,\n            currentEpoch_ - 1\n        );\n        emit ICapacity.UnitDeactivated(commitmentId, unitId);\n    }\n\n    function onUnitReturnedFromDeal(bytes32 commitmentId, bytes32 unitId) internal {\n        CommitmentStorage storage s = store();\n\n        // #region init and verify variables\n        uint256 currentEpoch = LibEpochController.currentEpoch();\n        uint256 startEpoch = currentEpoch + 1;\n        uint256 prevEpoch = currentEpoch - 1;\n\n        ICapacity.Commitment storage cc = s.commitments[commitmentId];\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(cc.info.peerId);\n        ICapacity.UnitInfo storage unitInfo = cc.unitInfoById[unitId];\n\n        uint256 expiredEpoch = _expiredEpoch(cc);\n        // #endregion\n\n        // #region commit snapshot for commitment\n        Snapshot.Cache memory snapshotCache = Snapshot.init(cc);\n        ICapacity.CCStatus status = _preCommitCommitmentSnapshot(cc, snapshotCache, peer, currentEpoch, expiredEpoch);\n        _postCommitCommitmentSnapshot(commitmentId, cc, snapshotCache);\n        // #endregion\n\n        // #region activate unit\n        unitInfo.isInactive = false;\n        unitInfo.lastSnapshotEpoch = currentEpoch;\n\n        emit ICapacity.UnitActivated(commitmentId, unitId, startEpoch);\n        // #endregion\n\n        // if status is not active, then we don't need to update activeUnitCount\n        if (status == ICapacity.CCStatus.Inactive || status == ICapacity.CCStatus.Failed) {\n            return;\n        }\n\n        // add one active unit to global activeUnitCount and commitment activeUnitCount\n        cc.progress.nextAdditionalActiveUnitCount += 1;\n        LibCapacityConst.setActiveUnitCount(LibCapacityConst.activeUnitCount() + 1);\n        cc.dealRewards.removeEntity(unitId, currentEpoch);\n\n        LibBaseOffer.setStartEpoch(unitId, startEpoch);\n\n        // we put here prevEpoch because commit snapshot was made for the previous epoch\n        emit ICapacity.CommitmentStatsUpdated(\n            commitmentId,\n            cc.progress.totalFailCount,\n            cc.finish.exitedUnitCount,\n            cc.progress.activeUnitCount,\n            cc.progress.nextAdditionalActiveUnitCount,\n            prevEpoch\n        );\n    }\n\n    function getCommitment(bytes32 commitmentId) internal view returns (ICapacity.CommitmentView memory) {\n        CommitmentStorage storage s = store();\n        ICapacity.Commitment storage cc = s.commitments[commitmentId];\n\n        require(cc.info.peerId != bytes32(0x00), \"Capacity commitment doesn't exist\");\n\n        uint256 currentEpoch_ = LibEpochController.currentEpoch();\n        uint256 expiredEpoch = _expiredEpoch(cc);\n        bytes32 peerId = cc.info.peerId;\n\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerId);\n\n        Snapshot.Cache memory snapshotCache = Snapshot.init(cc);\n        ICapacity.CCStatus status = _preCommitCommitmentSnapshot(cc, snapshotCache, peer, currentEpoch_, expiredEpoch);\n\n        return ICapacity.CommitmentView({\n            status: status,\n            peerId: cc.info.peerId,\n            collateralPerUnit: cc.info.collateralPerUnit,\n            unitCount: peer.unitCount,\n            startEpoch: cc.info.startEpoch,\n            endEpoch: cc.info.startEpoch + cc.info.duration,\n            rewardDelegatorRate: cc.info.rewardDelegatorRate,\n            delegator: cc.info.delegator,\n            totalFailCount: snapshotCache.current.totalFailCount,\n            failedEpoch: snapshotCache.current.failedEpoch,\n            exitedUnitCount: cc.finish.exitedUnitCount\n        });\n    }\n\n    function _withdrawCollateral(ICapacity.Commitment storage cc, uint256 unitCount, bytes32 commitmentId) internal {\n        if (cc.finish.collateralWithdrawn) {\n            return;\n        }\n\n        cc.finish.collateralWithdrawn = true;\n\n        address payable delegator = payable(cc.info.delegator);\n        uint256 collateralPerUnit_ = cc.info.collateralPerUnit;\n        uint256 totalCollateral = collateralPerUnit_ * unitCount;\n\n        uint256 totalSlashedCollateral = cc.progress.totalFailCount * collateralPerUnit_ * LibCapacityConst.slashingRate() / PRECISION;\n\n        uint256 collateralToReturn = 0;\n        uint256 collateralToSlash = 0;\n\n        if (totalCollateral < totalSlashedCollateral) {\n            collateralToReturn = 0;\n            collateralToSlash = totalCollateral;\n        } else {\n            collateralToReturn = totalCollateral - totalSlashedCollateral;\n            collateralToSlash = totalSlashedCollateral;\n        }\n\n        delegator.sendNativeOrWrapped(collateralToReturn);\n        payable(LibDiamond.contractOwner()).sendNativeOrWrapped(collateralToSlash);\n\n        emit ICapacity.CollateralWithdrawn(\n            commitmentId,\n            collateralToReturn,\n            collateralToSlash\n        );\n    }\n}\n"},"src/lib/LibCapacityConst.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {PRECISION} from \"src/utils/Common.sol\";\nimport {LibEpochController} from \"src/lib/LibEpochController.sol\";\nimport {LibOraclePrice} from \"src/lib/LibOraclePrice.sol\";\n\nstruct CommitmentConst {\n    uint256 minDuration;\n    uint256 maxDuration;\n    uint256 minCUPerCommitment;\n    uint256 maxCUPerCommitment;\n    uint256 usdCollateralPerUnit;\n    uint256 fltCollateralPerUnit;\n    uint256 slashingRate;\n    uint256 withdrawEpochsAfterFailed;\n    uint256 maxFailedRatio;\n}\n\nstruct ProofConst {\n    uint256 minProofsPerEpoch;\n    uint256 maxProofsPerEpoch;\n    bytes32 difficulty;\n    bytes32 nextDifficulty;\n    uint256 difficultyChangeEpoch;\n}\n\nstruct RewardConst {\n    uint256 usdTargetRevenuePerEpoch;\n    uint256 minRewardPerEpoch;\n    uint256 maxRewardPerEpoch;\n    uint256 vestingPeriodDuration;\n    uint256 vestingPeriodCount;\n    RewardPoolPerEpoch[] rewardPoolPerEpochs;\n}\n\nstruct CapacityConstStorage {\n    address randomXProxy;\n    uint256 activeUnitCount;\n    CommitmentConst commitment;\n    ProofConst proof;\n    RewardConst reward;\n    address oracle;\n}\n\nstruct RewardPoolPerEpoch {\n    uint256 epoch;\n    uint256 value;\n}\n\n\nlibrary LibCapacityConst {\n    uint256 internal constant _REWARD_POOL_SHRINK_RATE = PRECISION / 10 * 9; // 0.9 = 90%\n    uint256 internal constant _REWARD_POOL_GROWTH_RATE = PRECISION + PRECISION / 10; // 1.1 = 110%\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.capacity.storage.v1.const\")) - 1);\n\n    function store() internal pure returns (CapacityConstStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // fltPrice in usd/flt units\n    function _convertUsdToFlt(uint256 usdAmount, uint256 _fltPrice) internal pure returns (uint256) {\n        return usdAmount * PRECISION / _fltPrice * 1e18 / PRECISION;\n    }\n\n    // usd/flt units\n    function fltPrice() internal view returns (uint256) {\n        return LibOraclePrice.lastSetPrice();\n    }\n\n    // usd/flt units\n    function fltPriceAtEpoch(uint256 epoch) internal view returns (uint256) {\n        // get last timestamp still IN epoch\n        uint256 epochTimestamp = LibEpochController.epochTimestamp(epoch + 1) - 1;\n        return LibOraclePrice.getPriceAtTimestamp(epochTimestamp);\n    }\n\n    // flt/usd units\n    function meanRevFltPrice(uint256 fromEpoch, uint256 toEpoch) internal view returns (uint256) {\n        // start of the fromEpoch\n        uint256 fromTimestamp = 0;\n        uint256 fromEpochTimestamp = LibEpochController.epochTimestamp(fromEpoch);\n        uint256 priceInterval = LibOraclePrice.priceInterval();\n\n        if (fromEpochTimestamp > priceInterval) {\n            fromTimestamp = fromEpochTimestamp - priceInterval;\n        }\n        if (fromTimestamp < LibOraclePrice.store().firstTimestamp) {\n            fromTimestamp = LibOraclePrice.store().firstTimestamp;\n        }\n        // end of the toEpoch\n        uint256 toTimestamp = LibEpochController.epochTimestamp(toEpoch + 1) - priceInterval;\n        return LibOraclePrice.getMeanRevPriceBetweenTimestamps(fromTimestamp, toTimestamp);\n    }\n\n    function fltCollateralPerUnit() internal view returns (uint256) {\n        return store().commitment.fltCollateralPerUnit;\n    }\n\n    function usdCollateralPerUnit() internal view returns (uint256) {\n        return store().commitment.usdCollateralPerUnit;\n    }\n\n    function usdTargetRevenuePerEpoch() internal view returns (uint256) {\n        return store().reward.usdTargetRevenuePerEpoch;\n    }\n\n    function minDuration() internal view returns (uint256) {\n        return store().commitment.minDuration;\n    }\n\n    function maxDuration() internal view returns (uint256) {\n        return store().commitment.maxDuration;\n    }\n\n    function minCUPerCommitment() internal view returns (uint256) {\n        return store().commitment.minCUPerCommitment;\n    }\n\n    function maxCUPerCommitment() internal view returns (uint256) {\n        return store().commitment.maxCUPerCommitment;\n    }\n\n    function minRewardPerEpoch() internal view returns (uint256) {\n        return store().reward.minRewardPerEpoch;\n    }\n\n    function maxRewardPerEpoch() internal view returns (uint256) {\n        return store().reward.maxRewardPerEpoch;\n    }\n\n    function vestingPeriodDuration() internal view returns (uint256) {\n        return store().reward.vestingPeriodDuration;\n    }\n\n    function vestingPeriodCount() internal view returns (uint256) {\n        return store().reward.vestingPeriodCount;\n    }\n\n    function slashingRate() internal view returns (uint256) {\n        return store().commitment.slashingRate;\n    }\n\n    function minProofsPerEpoch() internal view returns (uint256) {\n        return store().proof.minProofsPerEpoch;\n    }\n\n    function maxProofsPerEpoch() internal view returns (uint256) {\n        return store().proof.maxProofsPerEpoch;\n    }\n\n    function withdrawEpochsAfterFailed() internal view returns (uint256) {\n        return store().commitment.withdrawEpochsAfterFailed;\n    }\n\n    function maxFailedRatio() internal view returns (uint256) {\n        return store().commitment.maxFailedRatio;\n    }\n\n    function activeUnitCount() internal view returns (uint256) {\n        return store().activeUnitCount;\n    }\n\n    function difficulty() internal view returns (bytes32) {\n        CapacityConstStorage storage constantsStorage = store();\n        if (LibEpochController.currentEpoch() >= constantsStorage.proof.difficultyChangeEpoch) {\n            return constantsStorage.proof.nextDifficulty;\n        }\n\n        return store().proof.difficulty;\n    }\n\n    function randomXProxy() internal view returns (address) {\n        return store().randomXProxy;\n    }\n\n    function oracle() internal view returns (address) {\n        return store().oracle;\n    }\n\n    function getRewardPool(uint256 epoch) internal view returns (uint256) {\n        CapacityConstStorage storage constantsStorage = store();\n\n        uint256 length = constantsStorage.reward.rewardPoolPerEpochs.length;\n        uint256 low = 0;\n        uint256 high = length - 1;\n\n        uint256 value = 0;\n        while (low <= high) {\n            uint256 mid = (low + high) / 2;\n            RewardPoolPerEpoch storage rewardPool = constantsStorage.reward.rewardPoolPerEpochs[mid];\n            uint256 rewardPoolEpoch = rewardPool.epoch;\n            if (epoch > rewardPoolEpoch) {\n                value = rewardPool.value;\n                low = mid + 1;\n            } else if (epoch < rewardPoolEpoch) {\n                high = mid - 1;\n            } else {\n                return rewardPool.value;\n            }\n        }\n\n        return value;\n    }\n\n    function setActiveUnitCount(uint256 activeUnitCount_) internal {\n        CapacityConstStorage storage constantsStorage = store();\n\n        constantsStorage.activeUnitCount = activeUnitCount_;\n        _setRewardPool(LibCapacityConst.fltPrice(), activeUnitCount_);\n    }\n\n    function _setRewardPool(uint256 fltPrice_, uint256 activeUnitCount_) internal {\n        CapacityConstStorage storage constantsStorage = store();\n        uint256 currentEpoch_ = LibEpochController.currentEpoch();\n\n        // load last reward pool\n        uint256 length = constantsStorage.reward.rewardPoolPerEpochs.length;\n\n        if (activeUnitCount_ <= 0) {\n            return;\n        }\n\n        uint256 lastRewardPoolValue;\n        uint256 lastRewardPoolEpoch;\n\n        RewardPoolPerEpoch storage lastRewardPool = constantsStorage.reward.rewardPoolPerEpochs[length - 1];\n        lastRewardPoolEpoch = lastRewardPool.epoch;\n\n        if (currentEpoch_ == lastRewardPool.epoch) {\n            if (length < 2) {\n                return;\n            }\n\n            lastRewardPoolValue = constantsStorage.reward.rewardPoolPerEpochs[length - 2].value;\n        } else {\n            lastRewardPoolValue = lastRewardPool.value;\n        }\n\n        /* [ usd * 1e7 / cu ] = [ flt * 1e18 ] * [ usd * 1e7 / flt ] / [ cu ] / [ 1e18 ] */\n        uint256 currentTarget = lastRewardPoolValue * fltPrice_ / activeUnitCount_ / 1 ether;\n\n        // calculate new reward pool\n        uint256 newRewardPool;\n        if (currentTarget > constantsStorage.reward.usdTargetRevenuePerEpoch) {\n            newRewardPool = lastRewardPoolValue * _REWARD_POOL_SHRINK_RATE / PRECISION;\n        } else {\n            newRewardPool = lastRewardPoolValue * _REWARD_POOL_GROWTH_RATE / PRECISION;\n        }\n\n        uint256 minRewardPerEpoch_ = constantsStorage.reward.minRewardPerEpoch;\n        uint256 maxRewardPerEpoch_ = constantsStorage.reward.maxRewardPerEpoch;\n        if (newRewardPool < minRewardPerEpoch_) {\n            newRewardPool = minRewardPerEpoch_;\n        }\n        if (newRewardPool > maxRewardPerEpoch_) {\n            newRewardPool = maxRewardPerEpoch_;\n        }\n\n        // save new reward pool\n        if (currentEpoch_ == lastRewardPoolEpoch) {\n            constantsStorage.reward.rewardPoolPerEpochs[length - 1].value = newRewardPool;\n        } else {\n            constantsStorage.reward.rewardPoolPerEpochs.push(\n                RewardPoolPerEpoch({epoch: currentEpoch_, value: newRewardPool})\n            );\n        }\n    }\n}\n"},"src/lib/LibDiamond.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from \"src/interfaces/IDiamondCut.sol\";\nimport {IERC173} from \"src/interfaces/IERC173.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\n\nlibrary LibDiamond {\n    // 32 bytes keccak hash of a string to use as a diamond storage location.\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        // assigns struct storage slot to the storage position\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit IERC173.OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit IDiamondCut.DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            return;\n        }\n        enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");        \n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\n        if (!success) {\n            if (error.length > 0) {\n                // bubble up error\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(error)\n                    revert(add(32, error), returndata_size)\n                }\n            } else {\n                revert InitializationFunctionReverted(_init, _calldata);\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"},"src/lib/LibEpochController.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nstruct EpochControllerStorage {\n    uint256 initTimestamp;\n    uint256 epochDuration;\n}\n\nlibrary LibEpochController {\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.core.storage.v1.epochController\")) - 1);\n\n    function store() internal pure returns (EpochControllerStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function currentEpoch() internal view returns (uint256) {\n        EpochControllerStorage storage epochControllerStorage = store();\n        return 1 + (block.timestamp - epochControllerStorage.initTimestamp) / epochControllerStorage.epochDuration;\n    }\n\n    function epochTimestamp(uint256 epoch) internal view returns (uint256) {\n        EpochControllerStorage storage s = LibEpochController.store();\n        return s.initTimestamp + s.epochDuration * (epoch - 1);\n    }\n}\n"},"src/lib/LibGlobalConst.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nstruct GlobalConstStorage {\n    uint256 minDealDepositedEpochs;\n    uint256 minDealRematchingEpochs;\n    uint256 minProtocolVersion;\n    uint256 maxProtocolVersion;\n    uint256 maxUnitCountPerProvider;\n\n    mapping(address => bool) paymentTokenWhitelist;\n}\n\nlibrary LibGlobalConst {\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.core.storage.v1.globalConst\")) - 1);\n\n    function store() internal pure returns (GlobalConstStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function minDealDepositedEpochs() internal view returns (uint256) {\n        return store().minDealDepositedEpochs;\n    }\n\n    function minDealRematchingEpochs() internal view returns (uint256) {\n        return store().minDealRematchingEpochs;\n    }\n\n    function minProtocolVersion() internal view returns (uint256) {\n        return store().minProtocolVersion;\n    }\n\n    function maxProtocolVersion() internal view returns (uint256) {\n        return store().maxProtocolVersion;\n    }\n\n    function maxUnitCountPerProvider() internal view returns (uint256) {\n        return store().maxUnitCountPerProvider;\n    }\n\n    function addPaymentTokenToWhitelist(address paymentToken) internal {\n        require(paymentToken != address(0), \"Zero token address is not allowed\");\n        store().paymentTokenWhitelist[paymentToken] = true;\n    }\n\n    function removePaymentTokenFromWhitelist(address paymentToken) internal {\n        delete store().paymentTokenWhitelist[paymentToken];\n    }\n\n    function isPaymentTokenAllowed(address paymentToken) internal view returns (bool) {\n        return store().paymentTokenWhitelist[paymentToken];\n    }\n}\n"},"src/lib/LibOffer.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {IOffer} from \"src/core/interfaces/IOffer.sol\";\nimport {LibBaseOffer, OfferStorage} from \"src/lib/LibBaseOffer.sol\";\nimport {LibCapacity} from \"src/lib/LibCapacity.sol\";\nimport {LibDiamond} from \"src/lib/LibDiamond.sol\";\nimport {LibGlobalConst} from \"src/lib/LibGlobalConst.sol\";\nimport {IDeal} from \"src/deal/v1/interfaces/IDeal.sol\";\nimport {IWorkerManager} from \"src/deal/v1/interfaces/IWorkerManager.sol\";\nimport {CIDV1} from \"src/utils/Common.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {OwnableUpgradableDiamond} from \"src/utils/OwnableUpgradableDiamond.sol\";\n\nlibrary LibOffer {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    function store() internal pure returns (OfferStorage storage s) {\n        return LibBaseOffer.store();\n    }\n\n    // mainly for IOffer impl\n    function registerMarketOffer(\n        uint256 minPricePerCuPerEpoch,\n        address paymentToken,\n        CIDV1[] calldata effectors,\n        IOffer.RegisterComputePeer[] calldata peers,\n        uint256 minProtocolVersion,\n        uint256 maxProtocolVersion\n    ) internal returns (bytes32) {\n        require(minProtocolVersion == LibBaseOffer.PROTOCOL_V1 && maxProtocolVersion == LibBaseOffer.PROTOCOL_V1, \"Offer: protocol version mismatch, required v1\");\n\n        bytes32 offerId = LibBaseOffer.registerBaseOffer(paymentToken, LibBaseOffer.PROTOCOL_V1, LibBaseOffer.PROTOCOL_V1);\n\n        // set V1 - only data\n        addEffector(offerId, effectors);\n        changeMinPricePerCuPerEpoch(offerId, minPricePerCuPerEpoch);\n\n        addComputePeers(offerId, peers);\n\n        return offerId;\n    }\n\n    // can be common\n    function removeOffer(bytes32 offerId) internal {\n        // effectors data is automatically cleaned\n        LibBaseOffer.removeBaseOffer(offerId);\n    }\n\n    // v1 only\n    function addComputePeers(bytes32 offerId, IOffer.RegisterComputePeer[] calldata peers) internal {\n        for (uint256 peerIndex = 0; peerIndex < peers.length; ++peerIndex) {\n            IOffer.RegisterComputePeer calldata peer = peers[peerIndex];\n            LibBaseOffer.registerBaseComputePeer(offerId, peer.peerId, peer.owner, peer.unitIds);\n        }\n    }\n\n    // can be common\n    function removeComputePeer(bytes32 peerId) internal {\n        LibBaseOffer.removeBaseComputePeer(peerId);\n    }\n\n    // can be common\n    function addComputeUnits(bytes32 peerId, bytes32[] calldata unitIds) internal {\n        LibBaseOffer.registerBaseComputeUnits(peerId, unitIds);\n    }\n\n    // can be common\n    function removeComputeUnit(bytes32 unitId) internal {\n        LibBaseOffer.removeBaseComputeUnit(unitId);\n    }\n\n    // Change offer\n    // v1 only\n    function changeMinPricePerCuPerEpoch(bytes32 offerId, uint256 newMinPricePerCuPerEpoch) internal {\n        OfferStorage storage offerStorage = store();\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n        require(newMinPricePerCuPerEpoch > 0, \"Min price per CU per epoch should be greater than 0\");\n\n        offer.minPricePerCuPerEpoch = newMinPricePerCuPerEpoch;\n\n        emit IOffer.MinPricePerCuPerEpochUpdated(offerId, newMinPricePerCuPerEpoch);\n    }\n\n    // v1 only\n    function addEffector(bytes32 offerId, CIDV1[] calldata newEffectors) internal {\n        OfferStorage storage offerStorage = store();\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n\n        for (uint256 i = 0; i < newEffectors.length; i++) {\n            CIDV1 calldata effectorCID = newEffectors[i];\n            bytes32 effectorHash = _hashEffectorCID(effectorCID);\n\n            require(!offerStorage.effectorsByOfferId[offerId].hasEffector[effectorHash], \"Effector already exists\");\n\n            offerStorage.effectorsByOfferId[offerId].hasEffector[effectorHash] = true;\n\n            emit IOffer.EffectorAdded(offerId, effectorCID);\n        }\n    }\n\n    // v1 only\n    function removeEffector(bytes32 offerId, CIDV1[] calldata effectors) internal {\n        OfferStorage storage offerStorage = store();\n        IOffer.Offer storage offer = offerStorage.offers[offerId];\n\n        require(offer.provider == msg.sender, \"Offer: only provider can call this method\");\n\n        for (uint256 i = 0; i < effectors.length; i++) {\n            CIDV1 calldata effectorCID = effectors[i];\n            bytes32 effectorHash = _hashEffectorCID(effectorCID);\n\n            require(offerStorage.effectorsByOfferId[offerId].hasEffector[effectorHash], \"Effector doesn't exist\");\n\n            offerStorage.effectorsByOfferId[offerId].hasEffector[effectorHash] = false;\n\n            emit IOffer.EffectorRemoved(offerId, effectorCID);\n        }\n    }\n\n    // Effector info\n    // v1 only\n    function setEffectorInfo(CIDV1 calldata id, string calldata description, CIDV1 calldata metadata)\n    internal\n    {\n        LibDiamond.enforceIsContractOwner();\n        OfferStorage storage offerStorage = store();\n        require(bytes(description).length > 0, \"Description should be not empty\");\n\n        bytes32 effectorHash = _hashEffectorCID(id);\n        IOffer.EffectorInfo storage effectorInfo = offerStorage.effectorInfoById[effectorHash];\n\n        effectorInfo.description = description;\n        effectorInfo.metadata = metadata;\n\n        emit IOffer.EffectorInfoSet(id, description, metadata);\n    }\n\n    function getEffectorInfo(CIDV1 calldata id) internal view returns (IOffer.EffectorInfo memory) {\n        return store().effectorInfoById[_hashEffectorCID(id)];\n    }\n\n    // v1 only\n    function removeEffectorInfo(CIDV1 calldata id) internal {\n        LibDiamond.enforceIsContractOwner();\n        OfferStorage storage offerStorage = store();\n\n        bytes32 effectorHash = _hashEffectorCID(id);\n        IOffer.EffectorInfo storage effectorInfo = offerStorage.effectorInfoById[effectorHash];\n\n        require(bytes(effectorInfo.description).length > 0, \"Effector info doesn't exist\");\n\n        delete offerStorage.effectorInfoById[effectorHash];\n\n        emit IOffer.EffectorInfoRemoved(id);\n    }\n\n    function getOffer(bytes32 offerId) internal view returns (IOffer.Offer memory) {\n        IOffer.Offer storage offer = store().offers[offerId];\n        require(offer.provider != address(0x00), \"Offer: offer doesn't exist\");\n\n        return offer;\n    }\n\n    function _getOffer(bytes32 offerId) internal view returns (IOffer.Offer storage) {\n        return store().offers[offerId];\n    }\n\n    function _hasOfferEffectors(bytes32 offerId, CIDV1[] memory effectors) internal view returns (bool) {\n        OfferStorage storage offerStorage = store();\n\n        for (uint256 i = 0; i < effectors.length; i++) {\n            bytes32 effectorHash = _hashEffectorCID(effectors[i]);\n\n            if (!offerStorage.effectorsByOfferId[offerId].hasEffector[effectorHash]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function _hashEffectorCID(CIDV1 memory effectorCID) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(effectorCID.prefixes, effectorCID.hash));\n    }\n\n    function cleanupV1Storage(bytes32 offerId) internal {\n        store().offers[offerId].minPricePerCuPerEpoch = 0;\n        delete store().effectorsByOfferId[offerId];\n    }\n}\n"},"src/lib/LibOfferV2.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IBaseOffer} from \"src/core/interfaces/IBaseOffer.sol\";\nimport {IOfferV2} from \"src/core/interfaces/IOfferV2.sol\";\nimport {LibBaseOffer} from \"src/lib/LibBaseOffer.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts//utils/structs/EnumerableSet.sol\";\nimport {LibOffer} from \"src/lib/LibOffer.sol\";\n\nstruct OfferStorageV2 {\n    mapping(bytes32 offerId => IOfferV2.OfferResourcesParams) offerParamsById;\n    mapping(bytes32 peerId => IOfferV2.PeerResourceParams) peerResourcesById;\n    mapping(bytes32 resourceId => IOfferV2.ResourceDescription) resources;\n    EnumerableSet.Bytes32Set resourceIds;\n\n    EnumerableSet.Bytes32Set offers;\n    mapping(bytes32 offerId => EnumerableSet.Bytes32Set) peers;\n\n    // for future methods to register datacenters and attach them to offers\n    mapping(bytes32 => IOfferV2.Datacenter) datacenters;\n    mapping(bytes32 offerId => bytes32 datacenterId) offerDatacenterByID;\n    EnumerableSet.Bytes32Set datacenterIds;\n}\n\nlibrary LibOfferV2 {\n    uint256 constant RAM_PER_VCPU = 2 * GiB / BYTES_PER_RAM;\n    uint256 constant VCPU_PER_CU = 2;\n    uint256 constant BYTES_PER_RAM = 1 * MiB;\n    uint256 constant BYTES_PER_STORAGE = 1 * MiB;\n    uint256 constant MiB = 1024 * 1024;\n    uint256 constant GiB = 1024 * MiB;\n\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.market.storage.v2\")) - 1);\n\n    function storeV2() internal pure returns (OfferStorageV2 storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function getResourcePrice(bytes32 offerId, bytes32 resourceId) internal view returns(uint256) {\n        IOfferV2.OfferResourcesParams storage offerResourceParams = storeV2().offerParamsById[offerId];\n\n        require(offerResourceParams.resourceIds.contains(resourceId), \"LibOfferV2: offer does not have this resource\");\n        return offerResourceParams.resourcePrices[resourceId];\n    }\n\n    function _getPeerResource(bytes32 peerId, bytes32 resourceId) internal view returns(IOfferV2.PeerResource storage) {\n        IOfferV2.PeerResourceParams storage peerResourceParams = storeV2().peerResourcesById[peerId];\n        require(peerResourceParams.resourceIds.contains(resourceId), \"LibOfferV2: peer does not have this resource\");\n\n        return peerResourceParams.resources[resourceId];\n    }\n\n    function upgradeMarketOfferToV2(\n        bytes32 offerId,\n        IOfferV2.RegisterResourcePrice[] calldata resourcePrices,\n        IOfferV2.UpgradeComputePeerV2[] calldata peers,\n        bytes32 datacenterId\n    ) internal {\n        LibOffer.cleanupV1Storage(offerId);\n        LibBaseOffer.upgradeProtocolVersion(offerId, LibBaseOffer.PROTOCOL_V2, LibBaseOffer.PROTOCOL_V2);\n        IBaseOffer.BaseOffer memory offer = LibBaseOffer.getBaseOffer(offerId);\n        require(offer.peerCount == peers.length, \"LibOfferV2: cannot upgrade offer without traversing through all peers\");\n        _registerOfferPrices(offerId, resourcePrices);\n        storeV2().offers.add(offerId);\n\n        for (uint256 peerIndex = 0; peerIndex < peers.length; peerIndex++) {\n            IOfferV2.UpgradeComputePeerV2 calldata peerToRegister = peers[peerIndex];\n            IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerToRegister.peerId);\n            require(peer.offerId == offerId, \"LibOfferV2: peer does not belong to the given offer\");\n            storeV2().peers[offerId].add(peerToRegister.peerId);\n\n            _registerPeerResources(peerToRegister.peerId, peerToRegister.resources);\n        }\n\n        setOfferDatacenter(offerId, datacenterId);\n    }\n\n    function registerMarketOfferV2(\n        address paymentToken,\n        IOfferV2.RegisterResourcePrice[] calldata resourcePrices,\n        IOfferV2.RegisterComputePeerV2[] calldata peers,\n        bytes32 datacenterId\n    ) internal returns (bytes32) {\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        bytes32 offerId = LibBaseOffer.registerBaseOffer(paymentToken, LibBaseOffer.PROTOCOL_V2, LibBaseOffer.PROTOCOL_V2);\n\n        offerStorageV2.offers.add(offerId);\n        emit IOfferV2.OfferV2Created(offerId, paymentToken, msg.sender, datacenterId);\n\n        _registerOfferPrices(offerId, resourcePrices);\n        registerComputePeersV2(offerId, peers);\n        setOfferDatacenter(offerId, datacenterId);\n\n        return offerId;\n    }\n\n    function registerComputePeersV2(bytes32 offerId, IOfferV2.RegisterComputePeerV2[] calldata peers) internal {\n        for (uint256 peerIndex = 0; peerIndex < peers.length; ++peerIndex) {\n            registerComputePeerV2(offerId, peers[peerIndex]);\n        }\n    }\n\n    function registerComputePeerV2(bytes32 offerId, IOfferV2.RegisterComputePeerV2 calldata peerData) internal {\n        // Peer and computeUnits are registered here\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        LibBaseOffer.registerBaseComputePeer(offerId, peerData.peerId, peerData.owner, peerData.unitIds);\n\n        offerStorageV2.peers[offerId].add(peerData.peerId);\n\n        _registerPeerResources(peerData.peerId, peerData.resources);\n    }\n\n    function _registerOfferPrices(bytes32 offerId, IOfferV2.RegisterResourcePrice[] calldata resourcePrices) internal {\n        OfferStorageV2 storage offerStorageV2 = LibOfferV2.storeV2();\n        IOfferV2.OfferResourcesParams storage offerResources = offerStorageV2.offerParamsById[offerId];\n\n        for (uint256 priceIndex = 0; priceIndex < resourcePrices.length; ++priceIndex) {\n            IOfferV2.RegisterResourcePrice calldata priceData = resourcePrices[priceIndex];\n            require(priceData.price > 0, \"LibOfferV2: cannot register 0 as price for a resource\"); // TODO we can remove this check if it is not needed\n            require(offerStorageV2.resourceIds.contains(priceData.resourceId), \"LibOfferV2: Attempt to register a resource not known to the network\");\n            offerResources.resourcePrices[priceData.resourceId] = priceData.price;\n            bool addedNewEntry = offerResources.resourceIds.add(priceData.resourceId);\n            require(addedNewEntry, \"LibOfferV2: resource was already registered in offer\");\n\n            emit IOfferV2.ResourcePriceUpdated(offerId, priceData.resourceId, priceData.price);\n        }\n    }\n\n    function _registerPeerResources(bytes32 peerId, IOfferV2.RegisterPeerResource[] calldata resources) internal {\n        OfferStorageV2 storage offerStorageV2 = LibOfferV2.storeV2();\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerId);\n\n        IOfferV2.OfferResourcesParams storage offerResources = offerStorageV2.offerParamsById[peer.offerId];\n        IOfferV2.PeerResourceParams storage peerResources = offerStorageV2.peerResourcesById[peerId];\n\n        for (uint256 resourceIndex = 0; resourceIndex < resources.length; ++resourceIndex) {\n            IOfferV2.RegisterPeerResource calldata resource = resources[resourceIndex];\n\n            // todo check existence differently\n            require(offerResources.resourcePrices[resource.resourceId] > 0, \"LibOfferV2: attempt to register a resource to peer without a price\");\n\n            _registerPeerResource(peerId, peerResources, resource);\n        }\n\n        enforceResourceInvariants(peerId);\n    }\n\n    function changeResourcePrice(bytes32 offerId, bytes32 resourceId, uint256 newPrice) internal {\n        IOfferV2.OfferResourcesParams storage offerParams = storeV2().offerParamsById[offerId];\n\n        require(newPrice != 0, \"LibOfferV2: cannot change resource price to zero\");\n\n        // this function automatically adds new resource to offer, if it wasn't there\n        offerParams.resourceIds.add(resourceId);\n        offerParams.resourcePrices[resourceId] = newPrice;\n\n        emit IOfferV2.ResourcePriceUpdated(offerId, resourceId, newPrice);\n    }\n\n    function changeResourceMaxSupply(bytes32 peerId, bytes32 resourceId, uint256 newMaxSupply) internal {\n        IOfferV2.PeerResourceParams storage peerResourceParams = storeV2().peerResourcesById[peerId];\n        IOfferV2.PeerResource storage peerResource = peerResourceParams.resources[resourceId];\n\n        // todo check existence differently\n        require(peerResourceParams.resourceIds.contains(resourceId), \"LibOfferV2: peer resource is not registered\");\n\n        if (peerResource.maxSupply > newMaxSupply) {\n            uint256 maxSupplyDecrease = peerResource.maxSupply - newMaxSupply;\n            require(peerResource.availableSupply >= maxSupplyDecrease, \"LibOfferV2: cannot decrease peer resource supply because it is used in Deals\");\n\n            peerResource.availableSupply -= maxSupplyDecrease;\n            peerResource.maxSupply -= maxSupplyDecrease;\n        } else {\n            uint256 maxSupplyIncrease = newMaxSupply - peerResource.maxSupply;\n            peerResource.availableSupply += maxSupplyIncrease;\n            peerResource.maxSupply += maxSupplyIncrease;\n        }\n\n        enforceResourceInvariants(peerId);\n        emit IOfferV2.PeerResourceSupplyUpdated(peerId, resourceId, peerResource.availableSupply, peerResource.maxSupply);\n    }\n\n    function enforceResourceInvariants(bytes32 peerId) internal view {\n        uint256 vcpuAvailableSupply = 0;\n        uint256 vcpuMaxSupply = 0;\n        uint256 ramAvailableSupply = 0;\n        uint256 ramMaxSupply = 0;\n\n        IBaseOffer.ComputePeer storage peer = LibBaseOffer.store().peers[peerId];\n        IOfferV2.PeerResourceParams storage peerResources = storeV2().peerResourcesById[peerId];\n        uint256 peerResourcesLength = peerResources.resourceIds.length();\n        for (uint256 resourceIndex = 0; resourceIndex < peerResourcesLength; ++resourceIndex) {\n            bytes32 resourceId = peerResources.resourceIds.at(resourceIndex);\n            IOfferV2.ResourceDescription storage resourceData = storeV2().resources[resourceId];\n            IOfferV2.PeerResource storage peerResource = peerResources.resources[resourceId];\n            if (resourceData.ty == IOfferV2.ResourceType.VCPU) {\n                vcpuAvailableSupply += peerResource.availableSupply;\n                vcpuMaxSupply += peerResource.maxSupply;\n            } else if (resourceData.ty == IOfferV2.ResourceType.RAM) {\n                ramAvailableSupply += peerResource.availableSupply;\n                ramMaxSupply += peerResource.maxSupply;\n            } else {\n                continue;\n            }\n        }\n\n\n        require(vcpuAvailableSupply * RAM_PER_VCPU <= ramAvailableSupply, \"LibOfferV2: broken invariant, not enough RAM to support VCPU (available)\");\n        require(vcpuMaxSupply * RAM_PER_VCPU <= ramMaxSupply, \"LibOfferV2: broken invariant, not enough RAM to support VCPU (max)\");\n        require(vcpuMaxSupply == peer.unitCount * VCPU_PER_CU, \"LibOfferV2: broken invariant, VCPU number does not match CU count\");\n    }\n\n    function addComputeUnitsV2(bytes32 peerId, bytes32[] calldata unitIds, IOfferV2.RegisterPeerResource calldata resource) internal {\n        LibBaseOffer.registerBaseComputeUnits(peerId, unitIds);\n\n        IOfferV2.ResourceDescription storage resourceData = storeV2().resources[resource.resourceId];\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerId);\n        IOfferV2.OfferResourcesParams storage offerResources = storeV2().offerParamsById[peer.offerId];\n\n        require(resourceData.ty == IOfferV2.ResourceType.VCPU, \"LibOfferV2: registering compute units requires adding new VCPU resources\");\n        require(resource.supply == unitIds.length * VCPU_PER_CU, \"LibOfferV2: compute units count and resource supply mismatch\");\n\n        require(offerResources.resourceIds.contains(resource.resourceId), \"LibOfferV2: attempt to register a resource to peer without a price\");\n\n        IOfferV2.PeerResourceParams storage peerResources = storeV2().peerResourcesById[peerId];\n\n        if (peerResources.resourceIds.contains(resource.resourceId)) {\n            changeResourceMaxSupply(peerId, resource.resourceId, resource.supply);\n        } else {\n            _registerPeerResource(peerId, peerResources, resource);\n        }\n\n        enforceResourceInvariants(peerId);\n    }\n\n    function removeOfferV2(bytes32 offerId) internal {\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        LibBaseOffer.removeBaseOffer(offerId);\n\n        // no need to throw event because indexers can cleanup themselves\n        offerStorageV2.offers.remove(offerId);\n        delete offerStorageV2.peers[offerId];\n        delete offerStorageV2.offerParamsById[offerId];\n        delete offerStorageV2.offerDatacenterByID[offerId];\n    }\n\n    function removeComputePeer(bytes32 peerId) internal {\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        bytes32 offerId = LibBaseOffer.getComputePeer(peerId).offerId;\n\n        LibBaseOffer.removeBaseComputePeer(peerId);\n\n        offerStorageV2.peers[offerId].remove(peerId);\n\n        // no need to throw event because indexers can cleanup themselves\n        delete offerStorageV2.peerResourcesById[peerId];\n    }\n\n    function removeComputeUnit(bytes32 unitId, bytes32 resourceId) internal {\n        IBaseOffer.ComputeUnit memory unit = LibBaseOffer.getComputeUnit(unitId);\n        LibBaseOffer.removeBaseComputeUnit(unitId);\n        uint256 peerResourceSupply = storeV2().peerResourcesById[unit.peerId].resources[resourceId].maxSupply;\n        IOfferV2.ResourceDescription storage resourceDescription = storeV2().resources[resourceId];\n        require(peerResourceSupply >= VCPU_PER_CU, \"LibOfferV2: not enough resource in peer\");\n        require(resourceDescription.ty == IOfferV2.ResourceType.VCPU, \"LibOfferV2: required to remove a VCPU resource along with compute unit\");\n\n        changeResourceMaxSupply(unit.peerId, resourceId, peerResourceSupply - VCPU_PER_CU);\n    }\n\n    function registerResource(IOfferV2.ResourceType ty, string calldata metadata) internal returns(bytes32) {\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        bytes32 resourceId = bytes32(offerStorageV2.resourceIds.length() + 1);\n        offerStorageV2.resourceIds.add(resourceId);\n        offerStorageV2.resources[resourceId] = IOfferV2.ResourceDescription(\n            ty,\n            metadata\n        );\n\n        emit IOfferV2.ResourceCreated(resourceId, ty, metadata);\n\n        return resourceId;\n    }\n\n    function updateResourceMetadata(bytes32 resourceId, string calldata metadata) internal {\n        require(storeV2().resourceIds.contains(resourceId), \"LibOfferV2: resource does not exist in the network\");\n        storeV2().resources[resourceId].metadata = metadata;\n        emit IOfferV2.ResourceMetadataUpdated(resourceId, metadata);\n    }\n\n    // Does not check invariant VCPU/RAM\n    function _registerPeerResource(bytes32 peerId, IOfferV2.PeerResourceParams storage peerResources, IOfferV2.RegisterPeerResource calldata resource) internal {\n        peerResources.resources[resource.resourceId] = IOfferV2.PeerResource({\n            availableSupply: resource.supply,\n            maxSupply: resource.supply,\n            details: resource.details\n        });\n\n        bool addedNewEntry = peerResources.resourceIds.add(resource.resourceId);\n        require(addedNewEntry, \"LibOfferV2: peer resource was already registered\");\n        emit IOfferV2.PeerResourceRegistered(peerId, resource.resourceId, resource.supply, resource.details);\n    }\n\n    function removePeerResource(bytes32 peerId, bytes32 resourceId) internal {\n        IOfferV2.PeerResourceParams storage peerResourceParams = storeV2().peerResourcesById[peerId];\n\n        require(storeV2().resourceIds.contains(resourceId), \"LibOfferV2: resource does not exist in the network\");\n        require(peerResourceParams.resourceIds.contains(resourceId), \"LibOfferV2: peer does not have this resource\");\n\n        delete peerResourceParams.resources[resourceId];\n        peerResourceParams.resourceIds.remove(resourceId);\n\n        LibOfferV2.enforceResourceInvariants(peerId);\n        emit IOfferV2.PeerResourceRemoved(peerId, resourceId);\n    }\n\n    function registerPeerResource(bytes32 peerId, IOfferV2.RegisterPeerResource calldata resource) internal {\n        bytes32 offerId = LibBaseOffer.getComputePeer(peerId).offerId;\n        require(storeV2().offerParamsById[offerId].resourceIds.contains(resource.resourceId), \"LibOfferV2: resource is not registered in offer\");\n\n        IOfferV2.PeerResourceParams storage peerResourceParams = storeV2().peerResourcesById[peerId];\n        _registerPeerResource(peerId, peerResourceParams, resource);\n        LibOfferV2.enforceResourceInvariants(peerId);\n    }\n\n    function changeResourceDetails(bytes32 peerId, bytes32 resourceId, string calldata details) internal {\n        IOfferV2.PeerResourceParams storage peerResourceParams = storeV2().peerResourcesById[peerId];\n\n        require(storeV2().resourceIds.contains(resourceId), \"LibOfferV2: resource does not exist in the network\");\n        require(peerResourceParams.resourceIds.contains(resourceId), \"LibOfferV2: peer does not have this resource\");\n        peerResourceParams.resources[resourceId].details = details;\n        emit IOfferV2.PeerResourceDetailsUpdated(peerId, resourceId, details);\n    }\n\n    function enforceDealResourceInvariants(IOfferV2.ResourceRequirement[] calldata resources) internal view {\n        uint256 vcpuRequired = 0;\n        uint256 ramRequired = 0;\n\n        for (uint256 resourceIndex = 0; resourceIndex < resources.length; ++resourceIndex) {\n            IOfferV2.ResourceRequirement calldata resource = resources[resourceIndex];\n            IOfferV2.ResourceDescription storage resourceData = storeV2().resources[resource.resourceId];\n            if (resourceData.ty == IOfferV2.ResourceType.VCPU) {\n                vcpuRequired += resource.quantity;\n            } else if (resourceData.ty == IOfferV2.ResourceType.RAM) {\n                ramRequired += resource.quantity;\n            } else {\n                continue;\n            }\n        }\n\n        require(vcpuRequired > 0, \"LibOfferV2: deal with broken invariant: zero VCPUs requested\");\n        require(vcpuRequired % VCPU_PER_CU == 0, \"LibOfferV2: deal with broken invariant: number of VCPUs requested corresponds to a fractional number of CUs\");\n        require(vcpuRequired * RAM_PER_VCPU <= ramRequired, \"LibOfferV2: deal withbroken invariant: not enough RAM requested to support requested number of VCPUs\");\n    }\n\n    function createDatacenter(IOfferV2.RegisterDatacenter calldata datacenter) internal returns(bytes32) {\n        bytes32 id = bytes32(storeV2().datacenterIds.length() + 1);\n        storeV2().datacenters[id] = IOfferV2.Datacenter(\n            id,\n            datacenter.countryCode,\n            datacenter.cityCode,\n            datacenter.index,\n            datacenter.tier,\n            datacenter.certifications\n        );\n        storeV2().datacenterIds.add(id);\n\n        emit IOfferV2.DatacenterCreated(id, datacenter.countryCode,datacenter.cityCode, datacenter.index,datacenter.tier, datacenter.certifications);\n        return id;\n    }\n\n    function updateDatacenter(bytes32 id, uint256 tier, string[] calldata certifications) internal {\n        require(storeV2().datacenterIds.contains(id), \"LibOfferV2: datacenter does not exist in the network\");\n        IOfferV2.Datacenter storage datacenter = storeV2().datacenters[id];\n        datacenter.tier = tier;\n        datacenter.certifications = certifications;\n        emit IOfferV2.DatacenterUpdated(id, tier, certifications);\n    }\n\n    function setOfferDatacenter(bytes32 offerId, bytes32 datacenterId) internal {\n        require(storeV2().datacenterIds.contains(datacenterId), \"LibOfferV2: datacenter does not exist\");\n        storeV2().offerDatacenterByID[offerId] = datacenterId;\n        // TODO: maybe do not send event if DC ID is zero?\n        emit IOfferV2.OfferDatacenterUpdated(offerId, datacenterId);\n    }\n\n    function getOfferDatacenter(bytes32 offerId) internal view returns(bytes32) {\n        return storeV2().offerDatacenterByID[offerId];\n    }\n}\n\nlibrary LibOfferV2View {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    function storeV2() internal pure returns (OfferStorageV2 storage s) {\n        s = LibOfferV2.storeV2();\n    }\n\n    function getResources() internal view returns(IOfferV2.ResourceDescriptionView[] memory) {\n        uint256 resourcesLength = storeV2().resourceIds.length();\n        IOfferV2.ResourceDescriptionView[] memory resources = new IOfferV2.ResourceDescriptionView[](resourcesLength);\n        for (uint256 resourceIndex = 0; resourceIndex < resourcesLength; resourceIndex++) {\n            bytes32 resourceId = storeV2().resourceIds.at(resourceIndex);\n            IOfferV2.ResourceDescription storage desc = storeV2().resources[resourceId];\n            resources[resourceIndex] = IOfferV2.ResourceDescriptionView({\n                id: resourceId,\n                ty: desc.ty,\n                metadata: desc.metadata\n            });\n        }\n\n        return resources;\n    }\n\n    function getResourceDescription(bytes32 resourceId) internal view returns (IOfferV2.ResourceDescription storage) {\n        OfferStorageV2 storage offerStorageV2 = storeV2();\n        require(offerStorageV2.resourceIds.contains(resourceId), \"LibOfferV2: resourceId does not exist\");\n\n        return offerStorageV2.resources[resourceId];\n    }\n\n\n    function getOffers() internal view returns(IOfferV2.OfferV2View[] memory) {\n        OfferStorageV2 storage offerV2Storage = storeV2();\n        bytes32[] memory offerIds = offerV2Storage.offers.values();\n        IOfferV2.OfferV2View[] memory offerViews = new IOfferV2.OfferV2View[](offerIds.length);\n\n        for (uint256 offerIndex; offerIndex < offerIds.length; offerIndex++) {\n            bytes32 offerId = offerIds[offerIndex];\n            offerViews[offerIndex] = getOffer(offerId);\n        }\n\n        return offerViews;\n    }\n\n    function getOffer(bytes32 offerId) internal view returns(IOfferV2.OfferV2View memory) {\n        IBaseOffer.BaseOffer memory baseOffer = LibBaseOffer.getBaseOffer(offerId);\n        return IOfferV2.OfferV2View({\n            offerId: offerId,\n            provider: baseOffer.provider,\n            paymentToken: baseOffer.paymentToken,\n        //datacenterId: storeV2().offerDatacenterByID[offerId], //todo unlock when breaking api\n            prices: getOfferPrices(offerId)\n        });\n    }\n\n    function getOfferPrices(bytes32 offerId) internal view returns(IOfferV2.OfferV2PriceView[] memory) {\n        OfferStorageV2 storage offerV2Storage = storeV2();\n        IOfferV2.OfferResourcesParams storage offerResourceParams = offerV2Storage.offerParamsById[offerId];\n        bytes32[] memory resourceIds = offerResourceParams.resourceIds.values();\n        IOfferV2.OfferV2PriceView[] memory offerPriceViews = new IOfferV2.OfferV2PriceView[](resourceIds.length);\n\n        for (uint256 resourceIndex; resourceIndex < resourceIds.length; resourceIndex++) {\n            bytes32 resourceId = resourceIds[resourceIndex];\n            uint256 price = offerResourceParams.resourcePrices[resourceId];\n            IOfferV2.ResourceDescription storage resourceData = offerV2Storage.resources[resourceId];\n\n            offerPriceViews[resourceIndex] = IOfferV2.OfferV2PriceView({\n                resourceId: resourceId,\n                ty: resourceData.ty,\n                metadata: resourceData.metadata,\n                price: price\n            });\n        }\n\n        return offerPriceViews;\n    }\n\n    function getPeers(bytes32 offerId) internal view returns(IOfferV2.PeerV2View[] memory) {\n        OfferStorageV2 storage offerV2Storage = storeV2();\n        bytes32[] memory peerIds = offerV2Storage.peers[offerId].values();\n        IOfferV2.PeerV2View[] memory peerViews = new IOfferV2.PeerV2View[](peerIds.length);\n\n        for (uint256 peerIndex = 0; peerIndex < peerIds.length; peerIndex++) {\n            bytes32 peerId = peerIds[peerIndex];\n            peerViews[peerIndex] = getPeer(peerId);\n        }\n\n        return peerViews;\n    }\n\n    function getPeer(bytes32 peerId) internal view returns(IOfferV2.PeerV2View memory) {\n        IBaseOffer.ComputePeer memory peer = LibBaseOffer.getComputePeer(peerId);\n\n        return IOfferV2.PeerV2View({\n            offerId: peer.offerId,\n            commitmentId: peer.commitmentId,\n            peerId: peerId,\n            unitIds: LibBaseOffer.getComputeUnits(peerId),\n            resources: getPeerResourcesFull(peerId)\n        });\n    }\n\n    function getPeerResourcesFull(bytes32 peerId) internal view returns(IOfferV2.PeerV2ResourceView[] memory) {\n        OfferStorageV2 storage offerV2Storage = storeV2();\n        IOfferV2.PeerResourceParams storage peerResources = offerV2Storage.peerResourcesById[peerId];\n        bytes32[] memory resourceIds = peerResources.resourceIds.values();\n        IOfferV2.PeerV2ResourceView[] memory resourceViews = new IOfferV2.PeerV2ResourceView[](resourceIds.length);\n\n        for (uint256 resourceIndex; resourceIndex < resourceIds.length; resourceIndex++) {\n            bytes32 resourceId = resourceIds[resourceIndex];\n            IOfferV2.PeerResource storage peerResource = peerResources.resources[resourceId];\n            IOfferV2.ResourceDescription storage resourceData = offerV2Storage.resources[resourceId];\n\n            resourceViews[resourceIndex] = IOfferV2.PeerV2ResourceView({\n                resourceId: resourceId,\n                ty: resourceData.ty,\n                metadata: resourceData.metadata,\n                details: peerResource.details,\n                availableSupply: peerResource.availableSupply,\n                maxSupply: peerResource.maxSupply\n            });\n        }\n\n        return resourceViews;\n    }\n\n    function getDatacenter(bytes32 id) internal view returns(IOfferV2.Datacenter memory) {\n        require(storeV2().datacenterIds.contains(id), \"LibOfferV2: datacenter does not exist\");\n        return storeV2().datacenters[id];\n    }\n\n    function getDatacenters() internal view returns(IOfferV2.Datacenter[] memory) {\n        uint256 datacentersLength = storeV2().datacenterIds.length();\n        IOfferV2.Datacenter[] memory datacenters = new IOfferV2.Datacenter[](datacentersLength);\n\n        for (uint256 datacenterIndex = 0; datacenterIndex < datacentersLength; datacenterIndex++) {\n            bytes32 id = storeV2().datacenterIds.at(datacenterIndex);\n            datacenters[datacenterIndex] = storeV2().datacenters[id];\n        }\n\n        return datacenters;\n    }\n}\n"},"src/lib/LibOraclePrice.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {PRECISION} from \"src/utils/Common.sol\";\n\nstruct OraclePriceStorage {\n    uint256 firstTimestamp;\n    uint256 priceInterval;\n    uint256[] pricesCumulative; // A/B units\n    uint256[] revPricesCumulative; // B/A units\n    uint256 lastStoredPrice; // A/B units\n}\n\nlibrary LibOraclePrice {\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.oracle.price.storage.v1\")) - 1);\n\n    function store() internal pure returns (OraclePriceStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function normalizeTimestamp(uint256 timestamp) internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        return timestamp / s.priceInterval * s.priceInterval;\n    }\n\n    // price in A/B units\n    function init(uint256 initialPrice, uint256 _priceInterval) internal { // shall be executed at diamond constructor\n        OraclePriceStorage storage s = store();\n        s.priceInterval = _priceInterval;\n        s.firstTimestamp = normalizeTimestamp(block.timestamp);\n        s.lastStoredPrice = initialPrice;\n        s.pricesCumulative.push(initialPrice);\n        s.revPricesCumulative.push(revPrice(initialPrice));\n    }\n\n    function update(uint256 newPrice) internal {\n        OraclePriceStorage storage s = store();\n        uint256 pricesLength = s.pricesCumulative.length;\n        uint256 lastStoredPrice = s.lastStoredPrice;\n        uint256 lastStoredRevPrice = revPrice(s.lastStoredPrice);\n        uint256 newRevPrice = revPrice(newPrice);\n        assert(pricesLength > 0); // should have been set in init()\n        uint256 lastStoredTimestamp = s.firstTimestamp + s.priceInterval * (pricesLength - 1);\n        uint256 currentTimestamp = normalizeTimestamp(block.timestamp);\n        uint256 addedIntervals = (currentTimestamp - lastStoredTimestamp) / s.priceInterval;\n        if (addedIntervals == 0) {\n            s.pricesCumulative[pricesLength - 1] = s.pricesCumulative[pricesLength - 1] + newPrice - lastStoredPrice;\n            s.revPricesCumulative[pricesLength - 1] = s.revPricesCumulative[pricesLength - 1] + newRevPrice - lastStoredRevPrice;\n            s.lastStoredPrice = newPrice;\n            return;\n        }\n        if (addedIntervals > 1) {\n            uint256 lastCumulativePrice = s.pricesCumulative[pricesLength - 1];\n            uint256 lastCumulativeRevPrice = s.revPricesCumulative[pricesLength - 1];\n            for (uint256 i = 0; i < addedIntervals - 1; i++) {\n                s.pricesCumulative.push(lastCumulativePrice + lastStoredPrice * (i + 1));\n                s.revPricesCumulative.push(lastCumulativeRevPrice + lastStoredRevPrice * (i + 1));\n            }\n        }\n        s.lastStoredPrice = newPrice;\n        s.pricesCumulative.push(s.pricesCumulative[s.pricesCumulative.length - 1] + newPrice);\n        s.revPricesCumulative.push(s.revPricesCumulative[s.revPricesCumulative.length - 1] + newRevPrice);\n\n    }\n\n    /**\n     * @dev Private function to get index and price at timestamp\n     * @param timestamp Timestamp to get index and price for\n     */\n    function getIndexAndRevPriceAtTimestamp(uint256 timestamp) private view returns (uint256 index, uint256 price) {\n        OraclePriceStorage storage s = store();\n\n        index = (timestamp - s.firstTimestamp) / s.priceInterval;\n\n        if (index < s.pricesCumulative.length) { // same length for revPricesCumulative and pricesCumulative\n            price = s.revPricesCumulative[index];\n        } else {\n            // does this trigger at all?\n            uint256 intervalsMissed = (timestamp - s.firstTimestamp) / s.priceInterval - s.pricesCumulative.length + 1;\n            uint256 lastStoredPrice = revPrice(s.lastStoredPrice);\n            price = s.revPricesCumulative[s.revPricesCumulative.length - 1];\n            price += lastStoredPrice * intervalsMissed;\n        }\n    }\n\n    // mean for B/A units\n    // (1/x_1 + ... + 1/x_n) / n\n    function getMeanRevPriceBetweenTimestamps(uint256 fromTimestamp, uint256 toTimestamp) internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        require(toTimestamp < normalizeTimestamp(block.timestamp), \"Mean price can change in suggested interval\");\n        require(s.firstTimestamp <= fromTimestamp, \"LibOraclePrice.getMeanRevPriceBetweenTimestamps: fromTimestamp is lower than first recorded timestamp\");\n        require(fromTimestamp <= toTimestamp, \"LibOraclePrice.getMeanRevPriceBetweenTimestamps: fromTimestamp is greater than toTimestamp\");\n\n        (uint256 fromIndex, uint256 leftCumulativePrice) = getIndexAndRevPriceAtTimestamp(fromTimestamp);\n        (uint256 toIndex, uint256 rightCumulativePrice) = getIndexAndRevPriceAtTimestamp(toTimestamp);\n\n        if (fromIndex == toIndex) {\n            return getRevPriceAtTimestamp(fromTimestamp);\n        } else {\n            return (rightCumulativePrice - leftCumulativePrice) / (toIndex - fromIndex);\n        }\n    }\n\n    function getPriceAtTimestamp(uint256 timestamp) internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        require(s.firstTimestamp <= timestamp, \"LibOraclePrice.getPriceAtTimestamp: timestamp is lower than first recorded timestamp\");\n\n        uint256 index = (timestamp - s.firstTimestamp) / s.priceInterval;\n\n        if (index >= s.pricesCumulative.length) {\n           return s.lastStoredPrice;\n        }\n\n        if (index == 0) {\n            return s.pricesCumulative[0];\n        }\n\n        return s.pricesCumulative[index] - s.pricesCumulative[index - 1];\n    }\n\n    function getRevPriceAtTimestamp(uint256 timestamp) internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        require(s.firstTimestamp <= timestamp, \"LibOraclePrice.getRevPriceAtTimestamp: timestamp is lower than first recorded timestamp\");\n\n        uint256 index = (timestamp - s.firstTimestamp) / s.priceInterval;\n\n        if (index >= s.revPricesCumulative.length) {\n            return revPrice(s.lastStoredPrice);\n        }\n\n        if (index == 0) {\n            return s.revPricesCumulative[0];\n        }\n\n        return s.revPricesCumulative[index] - s.revPricesCumulative[index - 1];\n    }\n\n    function lastSetPrice() internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        return s.lastStoredPrice;\n    }\n\n    function lastSetRevPrice() internal view returns (uint256) {\n        OraclePriceStorage storage s = store();\n        return revPrice(s.lastStoredPrice);\n    }\n\n    function revPrice(uint256 price) internal pure returns (uint256) {\n        return PRECISION * PRECISION / price;\n    }\n\n    function priceInterval() internal view returns (uint256) {\n        return store().priceInterval;\n    }\n\n    function lastPriceSetting() internal view returns (uint256 timestamp, uint256 price) {\n        OraclePriceStorage storage s = store();\n        timestamp = s.firstTimestamp + s.priceInterval * (s.pricesCumulative.length - 1);\n        price = s.lastStoredPrice;\n    }\n}\n"},"src/lib/LibSendValue.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nstruct SendValueStorage {\n    address payable WFLT; // WETH9 FLT <-> WFLT wrapper contract\n}\n\nuint256 constant MAX_GAS_FOR_CALL = 34_300; // send value to a cold empty address\n\nlibrary LibSendValue {\n    using SafeERC20 for IERC20;\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.send_value.storage.v1\")) - 1);\n\n    function store() internal pure returns (SendValueStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    function sendNativeOrWrapped(address payable recipient, uint256 amount) internal {\n        SendValueStorage storage s = store();\n        (bool success, ) = recipient.call{value: amount, gas: MAX_GAS_FOR_CALL}(\"\");\n        if (!success) {\n            (bool successWFLT, ) = s.WFLT.call{value: amount}(\"\");\n            require(successWFLT, \"LibSendValue: failed wrap FLT to WFLT\");\n            IERC20(s.WFLT).safeTransfer(recipient, amount);\n        }\n    }\n}\n"},"src/utils/Common.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nuint256 constant PRECISION = 1e7; // min: 0.0000001\n\nstruct CIDV1 {\n    bytes4 prefixes;\n    bytes32 hash;\n}\n"},"src/utils/OwnableUpgradableDiamond.sol":{"content":"/*\n * Fluence Compute Marketplace\n *\n * Copyright (C) 2024 Fluence DAO\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation version 3 of the\n * License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.19;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/*\n * @dev Similar (not fully) to the OZ OwnableUpgradable(Initializable, ContextUpgradeable).\n * @dev The main difference is in Diamond part,\n * @dev  e.g. from: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2964.\n */\ncontract OwnableUpgradableDiamond is Initializable {\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.ownable.storage.v1\")) - 1);\n\n    struct OwnableStorage {\n        address owner;\n    }\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Other ------------------\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _getOwnableStorage().owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != msg.sender) {\n            revert OwnableUnauthorizedAccount(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage ownableStorage = _getOwnableStorage();\n\n        address oldOwner = ownableStorage.owner;\n        ownableStorage.owner = newOwner;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}},"settings":{"remappings":["@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","filecoin-solidity/=lib/filecoin-solidity/contracts/","forge-std/=lib/forge-std/src/","solidity-cborutils/=lib/solidity-cborutils/contracts/","buffer/=lib/filecoin-solidity/lib/buffer/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/","solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/"],"optimizer":{"enabled":true,"runs":0},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"*":[]},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"*":[]},"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol":{"*":[]},"src/ArbHelper.sol":{"*":[]},"src/balance-keeper/BalanceKeeper.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc"]},"src/balance-keeper/IBalanceKeeper.sol":{"*":[]},"src/core/DealStakerRewards.sol":{"*":[]},"src/core/Snapshot.sol":{"*":[]},"src/core/Vesting.sol":{"*":[]},"src/core/interfaces/IBaseOffer.sol":{"*":[]},"src/core/interfaces/ICapacity.sol":{"*":[]},"src/core/interfaces/ICapacityConst.sol":{"*":[]},"src/core/interfaces/ICore.sol":{"*":[]},"src/core/interfaces/IDealFactory.sol":{"*":[]},"src/core/interfaces/IEpochController.sol":{"*":[]},"src/core/interfaces/IGlobalConst.sol":{"*":[]},"src/core/interfaces/IOffer.sol":{"*":[]},"src/core/interfaces/IOfferV2.sol":{"*":[]},"src/deal/interfaces/IConfig.sol":{"*":[]},"src/deal/interfaces/IDeal.sol":{"*":[]},"src/deal/interfaces/IWorkerManager.sol":{"*":[]},"src/deal/v1/interfaces/IConfig.sol":{"*":[]},"src/deal/v1/interfaces/IDeal.sol":{"*":[]},"src/deal/v1/interfaces/IWorkerManager.sol":{"*":[]},"src/interfaces/ArbSysInterface.sol":{"*":[]},"src/interfaces/IDiamond.sol":{"*":[]},"src/interfaces/IDiamondCut.sol":{"*":[]},"src/interfaces/IERC173.sol":{"*":[]},"src/interfaces/IWhitelist.sol":{"*":[]},"src/lib/LibBaseOffer.sol":{"*":[]},"src/lib/LibCapacity.sol":{"*":[]},"src/lib/LibCapacityConst.sol":{"*":[]},"src/lib/LibDiamond.sol":{"*":[]},"src/lib/LibEpochController.sol":{"*":[]},"src/lib/LibGlobalConst.sol":{"*":[]},"src/lib/LibOffer.sol":{"*":[]},"src/lib/LibOfferV2.sol":{"*":[]},"src/lib/LibOraclePrice.sol":{"*":[]},"src/lib/LibSendValue.sol":{"*":[]},"src/utils/Common.sol":{"*":[]},"src/utils/OwnableUpgradableDiamond.sol":{"*":[]}},"evmVersion":"cancun","viaIR":true,"libraries":{}},"allowPaths":["/Users/dmitrii/FLUENCE/compute-marketplace","/Users/dmitrii/FLUENCE/compute-marketplace/lib"],"basePath":"/Users/dmitrii/FLUENCE/compute-marketplace","includePaths":["/Users/dmitrii/FLUENCE/compute-marketplace"]},"output":{"errors":[{"sourceLocation":{"file":"src/ArbHelper.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/ArbHelper.sol\n\n"},{"sourceLocation":{"file":"src/balance-keeper/BalanceKeeper.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/balance-keeper/BalanceKeeper.sol\n\n"},{"sourceLocation":{"file":"src/balance-keeper/IBalanceKeeper.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/balance-keeper/IBalanceKeeper.sol\n\n"},{"sourceLocation":{"file":"src/core/DealStakerRewards.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/DealStakerRewards.sol\n\n"},{"sourceLocation":{"file":"src/core/Snapshot.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/Snapshot.sol\n\n"},{"sourceLocation":{"file":"src/core/Vesting.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/Vesting.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IBaseOffer.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IBaseOffer.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/ICapacity.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/ICapacity.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/ICapacityConst.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/ICapacityConst.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/ICore.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/ICore.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IDealFactory.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IDealFactory.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IEpochController.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IEpochController.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IGlobalConst.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IGlobalConst.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IOffer.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IOffer.sol\n\n"},{"sourceLocation":{"file":"src/core/interfaces/IOfferV2.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/core/interfaces/IOfferV2.sol\n\n"},{"sourceLocation":{"file":"src/deal/interfaces/IConfig.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/interfaces/IConfig.sol\n\n"},{"sourceLocation":{"file":"src/deal/interfaces/IDeal.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/interfaces/IDeal.sol\n\n"},{"sourceLocation":{"file":"src/deal/interfaces/IWorkerManager.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/interfaces/IWorkerManager.sol\n\n"},{"sourceLocation":{"file":"src/deal/v1/interfaces/IConfig.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/v1/interfaces/IConfig.sol\n\n"},{"sourceLocation":{"file":"src/deal/v1/interfaces/IDeal.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/v1/interfaces/IDeal.sol\n\n"},{"sourceLocation":{"file":"src/deal/v1/interfaces/IWorkerManager.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/deal/v1/interfaces/IWorkerManager.sol\n\n"},{"sourceLocation":{"file":"src/interfaces/IDiamond.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/interfaces/IDiamond.sol\n\n"},{"sourceLocation":{"file":"src/interfaces/IWhitelist.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/interfaces/IWhitelist.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibBaseOffer.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibBaseOffer.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibCapacity.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibCapacity.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibCapacityConst.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibCapacityConst.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibEpochController.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibEpochController.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibGlobalConst.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibGlobalConst.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibOffer.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibOffer.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibOfferV2.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibOfferV2.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibOraclePrice.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibOraclePrice.sol\n\n"},{"sourceLocation":{"file":"src/lib/LibSendValue.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/lib/LibSendValue.sol\n\n"},{"sourceLocation":{"file":"src/utils/Common.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/utils/Common.sol\n\n"},{"sourceLocation":{"file":"src/utils/OwnableUpgradableDiamond.sol","start":-1,"end":-1},"type":"Warning","component":"general","severity":"warning","errorCode":"1878","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/utils/OwnableUpgradableDiamond.sol\n\n"},{"sourceLocation":{"file":"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","start":7113,"end":7119},"type":"Warning","component":"general","severity":"warning","errorCode":"2394","message":"Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.","formattedMessage":"Warning: Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.\n   --> lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:247:13:\n    |\n247 |             tstore(slot, value)\n    |             ^^^^^^\n\n"},{"sourceLocation":{"file":"src/ArbHelper.sol","start":1098,"end":1353},"type":"Warning","component":"general","severity":"warning","errorCode":"2018","message":"Function state mutability can be restricted to view","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> src/ArbHelper.sol:33:5:\n   |\n33 |     function getL2BlockNumber() internal returns (uint256) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n"}],"contracts":{"src/balance-keeper/BalanceKeeper.sol":{"BalanceKeeper":{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"UPGRADE_INTERFACE_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"WITHDRAW_REQUEST_DELAY","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"coordinator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"dealBalancesTotal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"supply","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"diamond","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"disableOnchainRefund","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"enableOnchainRefund","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"freeBalanceTotal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"supply","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"freezeAccount","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"frozen","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"frozen","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"fundFromLimbo","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getDepositInfo","inputs":[{"name":"from","type":"uint256","internalType":"uint256"},{"name":"to","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IBalanceKeeper.DealDepositInfo[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"deal","type":"address","internalType":"address"},{"name":"user","type":"address","internalType":"address"},{"name":"reason","type":"uint8","internalType":"enum IBalanceKeeper.DealDepositReason"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"reserved1","type":"uint256","internalType":"uint256"},{"name":"reserved2","type":"uint256","internalType":"uint256"},{"name":"reserved3","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getDepositInfoLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getFreeBalance","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getFullBalance","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"_diamond","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"limbo","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"limboTotal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"manualWithdrawEnabled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"moveBalanceFromDeal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"reserved","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"moveBalanceToDeal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"reason","type":"uint8","internalType":"enum IBalanceKeeper.DealDepositReason"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"moveFreeBalance","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"reserved","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"poolBalance","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"poolTopUp","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"poolWithdraw","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"refund","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendToLimbo","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setCoordinator","inputs":[{"name":"_coordinator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"terminate","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"terminationRequest","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"terminationVeto","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"topUpIds","inputs":[{"name":"","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"unfreezeAccount","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"userTopUp","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"topUpId","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawByDeal","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"reserved","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawFromLimbo","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"user","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AccountFreezeStateChanged","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"frozen","type":"bool","indexed":false,"internalType":"bool"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"BalanceMoved","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"reserved","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"CoordinatorSet","inputs":[{"name":"coordinator","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DealDeposit","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"deal","type":"address","indexed":true,"internalType":"address"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"reason","type":"uint8","indexed":false,"internalType":"enum IBalanceKeeper.DealDepositReason"},{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"depositIndex","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DealMigrated","inputs":[{"name":"deal","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DealWithdraw","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"deal","type":"address","indexed":true,"internalType":"address"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"reserved","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"FreeBalanceDecrease","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"reason","type":"uint8","indexed":true,"internalType":"enum IBalanceKeeper.BalanceChangeReason"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"FreeBalanceIncrease","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"reason","type":"uint8","indexed":true,"internalType":"enum IBalanceKeeper.BalanceChangeReason"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"FundedFromLimbo","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"ManualWithdrawDisabled","inputs":[{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ManualWithdrawEnabled","inputs":[{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PoolTopUp","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"initiator","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PoolWithdraw","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"initiator","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Refunded","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SentToLimbo","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TerminationExecuted","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TerminationRequestCreated","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TerminationVeto","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"UserBalanceIncrease","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"topUpId","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"Withdrawn","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"reserved","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"WithdrawnFromLimbo","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"initiator","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedCall","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"SafeERC20FailedOperation","inputs":[{"name":"token","type":"address","internalType":"address"}]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"name":"slot","type":"bytes32","internalType":"bytes32"}]}],"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"AccountFreezeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"}],\"name\":\"BalanceMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBalanceKeeper.DealDepositReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"DealDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DealMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"}],\"name\":\"DealWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IBalanceKeeper.BalanceChangeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"info\",\"type\":\"address\"}],\"name\":\"FreeBalanceDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IBalanceKeeper.BalanceChangeReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"info\",\"type\":\"address\"}],\"name\":\"FreeBalanceIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundedFromLimbo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"ManualWithdrawDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"ManualWithdrawEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentToLimbo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"TerminationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"TerminationRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"TerminationVeto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topUpId\",\"type\":\"string\"}],\"name\":\"UserBalanceIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFromLimbo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_REQUEST_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"dealBalancesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableOnchainRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOnchainRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"freeBalanceTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundFromLimbo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IBalanceKeeper.DealDepositReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserved1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserved2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserved3\",\"type\":\"uint256\"}],\"internalType\":\"struct IBalanceKeeper.DealDepositInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositInfoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"limbo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"limboTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"}],\"name\":\"moveBalanceFromDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum IBalanceKeeper.DealDepositReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"moveBalanceToDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"}],\"name\":\"moveFreeBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"poolTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"poolWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sendToLimbo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"terminationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"terminationVeto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"topUpIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"topUpId\",\"type\":\"string\"}],\"name\":\"userTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"reserved\",\"type\":\"uint8\"}],\"name\":\"withdrawByDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromLimbo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:fluence-abi-checker\":\"\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"refund(address,address,uint256)\":{\"details\":\"Refunds the specified amount of tokens to the user\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/balance-keeper/BalanceKeeper.sol\":\"BalanceKeeper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[\":@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":buffer/=lib/filecoin-solidity/lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":filecoin-solidity/=lib/filecoin-solidity/contracts/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/\",\":solidity-cborutils/=lib/solidity-cborutils/contracts/\",\":solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x490959f972df54829d0ffacb71fa025429d9b7b9ebd118f418b41e9c0041ef73\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1883bc1a16a88922abccd415d1b41caf00c38ee581ae3e5976018d9c17d2c4b7\",\"dweb:/ipfs/QmP2vzQM8RR8ce675KhuZEaUicAPRMUbPLwBsTpxByvn18\"]},\"lib/openzeppelin-contracts/contracts//utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1\",\"dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9f21f1bcc51daf7fe3998608d7eeb96b16a9c3816898a0cf6a9407bd105c9253\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71cd1acb2370851314e9e2fc84123228e468037435eea0ed1c459346a214ce73\",\"dweb:/ipfs/QmXw5XVVnrjX3m224Zs9jdQVY3abwiCEVBjk9w24DXsFSi\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d\",\"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0xf5c04a8bf51755681f7db413095377dfd1a05b98b6326fb1da0e9a297057caf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f57690465f41860906cf84e6970baaacae9d05b8311674812e6b502bb510441e\",\"dweb:/ipfs/Qme5swSUieatWond1BHyZaEztdLAPu67KcoQTeY4pH5wVd\"]},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x5f3770f82f75d132e210b43c071d3feec1bef13c385d1d799763a366e8bda311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a50b7702cbd525c4a0fd3c36d1e116432b5f645f84cb25e4473dc9c88a917c5\",\"dweb:/ipfs/QmaN5QKZwgypVK3zAwdgXfsygEeauRYa4sSe4x8yKXDRtV\"]},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x18436638da96539b6a9f971f8ce332c6fcad32d15c988af689b174f753d9936b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0351b5b167c9f0f6eb670bc6db5e9579aadb9a42edc62256c182695c3e9bf47e\",\"dweb:/ipfs/QmSQPNXU4NYhYojvyqHRzQx2duRx5njv6AHssoJMQb8Tq1\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x80b4189de089dc632b752b365a16c5063b58cc24da0dd38b82f2c25f56d25c84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81e2717e78844156a86733f1cada84dba906ffe03e4957de12ca219c65e9191b\",\"dweb:/ipfs/QmW8vg3AafPJRo7EC75RQJTtjiaYmfPa4U4sqmEuBXXzaP\"]},\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0xc452b8c0ab5a57e6ca49c4fbe6aead2460c2f8d60d58bc60af68e559b7ca1179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0980b3b9e8cd9d9a0f2ae848f0f36a85158887e6fd961142a13b11299ae7f30a\",\"dweb:/ipfs/QmUrmDji3NR2V3YezV8xHSS3wjeBKq16FL7cHdBCnwLjKd\"]},\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0x29074fe5a74bb024c57b3570abf6c74d8bceed3438694d470fd0166a3ecd196a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4f8435ccbc56e384f4cc9ac9ff491cf30a82f2beac00e33ccc2cf8af3f77cc3\",\"dweb:/ipfs/QmUKJXxTe6nn1qfgnX8xbnboNNAPUuEmJyGqMZCKNiFBgn\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x629828db7f6354641b2bc42f6f6742b07bed39959361f92b781224fd33cfb0c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2654b69b5d9b42ad4c981875add283a06db8bd02e01c614d4f0d498860d0c58\",\"dweb:/ipfs/QmWE3oD4Ti4UKrZTiA4cxAwprkFTpBYsLRrc62w5Lg16Q8\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xfd29ed7a01e9ef109cc31542ca0f51ba3e793740570b69172ec3d8bfbb1643b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99379e0649be8106d2708a2bde73b5cdaba4505f1001f1586b53788bf971d097\",\"dweb:/ipfs/QmV9cCnvFoVzV2cVDW4Zbs3JQ3ehxBcooQS52taVxR637S\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e\",\"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x0883afe0b965062c94cb0a6640a334d9e7611aed38bfe7344489dda0fb064226\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53912d908082914f6c8e6e32b9cb850a379f1ea86ac56a8a69304204e6cb8bc7\",\"dweb:/ipfs/QmeSqtEAx3nWYmY93idobmhTywXsWAkX9J1zpP61UwXHR7\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1\",\"dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA\"]},\"src/ArbHelper.sol\":{\"keccak256\":\"0xfe5b9aa4045a1df6fad39bb0045f75da8828edf1ffb85051609b3ed3737b444b\",\"urls\":[\"bzz-raw://c6e740a573529dc527ba8fb751f1c1d24a440eb745e7d4ff5245c21a9bb2ca54\",\"dweb:/ipfs/QmWdBkjaM1ffsCWuM3gXL9oUSnidixzx8M2fYSTXFxBSJq\"]},\"src/balance-keeper/BalanceKeeper.sol\":{\"keccak256\":\"0xa8f36297a5a046202d78a0378c1208686695021fb42dc5fb0242ba7fc26ec6f9\",\"urls\":[\"bzz-raw://f5235f31f99dec7c7f1ddb38bc5c05ce8d462b329641dd26089521ff380e5495\",\"dweb:/ipfs/QmYXNnUaoDhHMF1MNVo6pM5nfspUwYeXcuHzpHSuJH24Mn\"]},\"src/balance-keeper/IBalanceKeeper.sol\":{\"keccak256\":\"0x4e7cfd02f0ac587064dc57b83703b2fb5eb322249a037625ffaae7e08ffb2f07\",\"urls\":[\"bzz-raw://b44f7ee150c56b4540dfa017135e6fff70ad47e8e58c32d66b5cf07b08cdfbe8\",\"dweb:/ipfs/QmNfDHG9LsP6bkfm3TVev3ZXpPCMTw4S6PxmCCQG8pD66h\"]},\"src/core/DealStakerRewards.sol\":{\"keccak256\":\"0x5daaa9277451934b06386210d32614e3510cf60b644782a553f5270fe277387a\",\"urls\":[\"bzz-raw://e8165e4cd31ae15151792415fa649f878c4836ae37a6cdf705cbf4d9b2506cbd\",\"dweb:/ipfs/QmbsEMpJ1agjKApkYUJbvDbGX8ChQLQ1KbsSngfoWfmgVR\"]},\"src/core/Snapshot.sol\":{\"keccak256\":\"0x6814fcdd7decb88354a4d50637de96eb3426da9588389116748f63c62fba3832\",\"urls\":[\"bzz-raw://3a36801dd25e53396e74c8a6240642432a01d0e78159b35ad38b8a7fe3c01b79\",\"dweb:/ipfs/QmdQvgtVfsgrBmjmXJhaQq6uF8tNn2NNTdijg5UyMERWoc\"]},\"src/core/Vesting.sol\":{\"keccak256\":\"0xf25bd278891c8946503bab393f102f7b6327831a291af8084af930bff2000078\",\"urls\":[\"bzz-raw://5174d81e81bcc858e618992f8f35c86289d54ffc099983fd9d770885c569896f\",\"dweb:/ipfs/QmR2exswUCRDKTvXEqLBdue3zZFobjCJj7Az6dQ4gjtnqB\"]},\"src/core/interfaces/IBaseOffer.sol\":{\"keccak256\":\"0xccb18f2f4bc37949db6779dec9b571034cc5df2dcaacb690c32698703c59976d\",\"urls\":[\"bzz-raw://aa92e404dce6e22af08be7f6f14202ae13ef51359c0df6e436b809f0a8c3c2d8\",\"dweb:/ipfs/QmWHE5ZvsZTE5W6C7swhe8QKWwVfV9thXWjiaah1cnVCFT\"]},\"src/core/interfaces/ICapacity.sol\":{\"keccak256\":\"0x952b553638f71cb49d2124439f7286a6091fdf0e485d991343f11451f1b0feb4\",\"urls\":[\"bzz-raw://fe0360066773c55188ac0b160ed0db23a799f98a7e41deebb3bd71c3fc5aeed9\",\"dweb:/ipfs/QmZ5Cifam3AkVS7Xx9FpnrouiVY7Fv42MK8yMLWe1DagKq\"]},\"src/core/interfaces/ICapacityConst.sol\":{\"keccak256\":\"0x60679e12175ef8ec5fe3fd2108fcdf8b7845348452fececc25ada3b7516191d9\",\"urls\":[\"bzz-raw://054ffd2a008a4ba8692dd7f60bef3d9f87c84799f28d1575b9031a4c9715e84f\",\"dweb:/ipfs/QmUqCxKvUCMQ2bGqnEsCUZR2qi8aMAFxrDAQNQdBnYkjPj\"]},\"src/core/interfaces/ICore.sol\":{\"keccak256\":\"0x8f612bef8f693e0f9db073c69be76568558961ff82018382457c54e771baa28a\",\"urls\":[\"bzz-raw://a0250e4a8e7f0b077ec6dc40fd39df85d4b8dca960927efb1d7ec40c08c35cb6\",\"dweb:/ipfs/QmasALo665VKJyFuFj69H6azXM1DEMBHRK5LZ6jngdXTxT\"]},\"src/core/interfaces/IDealFactory.sol\":{\"keccak256\":\"0x9018d741f6bf5af1314d420a0b145fcb49e861f7aa7b3efc05563d779e5668f7\",\"urls\":[\"bzz-raw://8fd482c586ff2376a9e6d829dc79f4a3e2e39a20ebba54277bd5f36e0f687a82\",\"dweb:/ipfs/QmWZSMFmM5yzZHZFiiMnuPu7Z9r37f17putTtjDjKjXPrD\"]},\"src/core/interfaces/IEpochController.sol\":{\"keccak256\":\"0x75d4b147938d93ea391e8e97950fae57dc0d02da5eceba44beafd3fdde152b43\",\"urls\":[\"bzz-raw://6709d7544c7c3ea5ef8b0a10d05ed1a23676a78ee27a23bf61d4eef7731f804b\",\"dweb:/ipfs/QmZFea2bBEZ185jGeRtGcxRYNChFmFwgiRrPUGaoJD4qLx\"]},\"src/core/interfaces/IGlobalConst.sol\":{\"keccak256\":\"0x244f1e7020782274570d1230a5b5df81ab67dc11007eda87acf0bfdb2b5bda2a\",\"urls\":[\"bzz-raw://a7a7a3b6781aa0b1994e79461094776bf4cfb3f6f801a5095f81694bed43bd9a\",\"dweb:/ipfs/QmbTAJDu5K9AaffkoHguoQnMsjPRRDhiwAdu9dafkcs52G\"]},\"src/core/interfaces/IOffer.sol\":{\"keccak256\":\"0x69f1837f5194d3542b8952f083c48f922320925ecb27530835fb84f11c0cdd83\",\"urls\":[\"bzz-raw://4989a76d3687c285f01d0375e35a23d2ea715fca87f14b965cf044956eb7581a\",\"dweb:/ipfs/QmeXEcAGnYxLfSnq9fMcsPSH8HLn18xmE7Tj1Awwr7FCzj\"]},\"src/core/interfaces/IOfferV2.sol\":{\"keccak256\":\"0xd39972985e6761adb6dd7d4bb40e1bcb6960fc74d585a86abe01123fd7fb468c\",\"urls\":[\"bzz-raw://cbe32167d3bda9048c1aa2981aa3744d61d8ca6bc9d3e8a49587c0a2804711c3\",\"dweb:/ipfs/QmZqLNDEp7CfL9czm3j6gC2yYZRMrNE5dCeKNp6yMBPc2q\"]},\"src/deal/interfaces/IConfig.sol\":{\"keccak256\":\"0x4d0243039bc5990fda1c5772f76d38a7ca1e6e814916bdc7b1d8cc651e8fe3b8\",\"urls\":[\"bzz-raw://b77ff1fa6f43446a3dc9eacee05ab91397798a155bdb9682d4236d184ed36458\",\"dweb:/ipfs/QmY1cyRu9cUkRrj5ppeMkqLif3XV28KU96H6TT5ZbLoD79\"]},\"src/deal/interfaces/IDeal.sol\":{\"keccak256\":\"0xbf4ad647183a23f9bad1c8af14ba29bd0026b870d243e3ee1905042ceaf338c7\",\"urls\":[\"bzz-raw://9372514328a1bc89911b49a5034740d8e64f0e5179fbfc1ac9b06ed8a453c31b\",\"dweb:/ipfs/QmdEx8S223XksxpZGZAjRzPAj2TfeKW5GL3CBc6pGB8ocJ\"]},\"src/deal/interfaces/IWorkerManager.sol\":{\"keccak256\":\"0x550c61112a645a9f723ea436092865c9ee664a4c0808e0a557918e64864f799a\",\"urls\":[\"bzz-raw://6697a6db8f14710cacb415e212c9d2eefbd054f0ce3b22eee65cc069e2d47a01\",\"dweb:/ipfs/QmTPtNHLK6PSiLDd8pHVMAqePULjQrMHMY1ti33xVsoqNp\"]},\"src/deal/v1/interfaces/IConfig.sol\":{\"keccak256\":\"0xd2ff604cbf7bd00e8319b8434e0001cb6180b6077dc4a188308a0a9b65ee9524\",\"urls\":[\"bzz-raw://3bf8a3c15d21c7ab8fcb84dbba3e77faf125caf2cf962b272b510818e0e3507e\",\"dweb:/ipfs/QmfXFRMxDSS2HM6smXjzJyB5BZqeDEgL5JPNBgFeo6Bxn3\"]},\"src/deal/v1/interfaces/IDeal.sol\":{\"keccak256\":\"0x37ad8292837a6781215fa7ffe8ea1c6bfc0f62ecc1b4720f79c279d4112c7c62\",\"urls\":[\"bzz-raw://5915f1e2e9199eccbbe356459b0db312bf6f45ab505f0f0490c893aee956db40\",\"dweb:/ipfs/QmZgPopU9HY1wkn7WdtZgwd29U52E9Y3vZ6uAT4pnzFLp1\"]},\"src/deal/v1/interfaces/IWorkerManager.sol\":{\"keccak256\":\"0xdf34ae6acdbeee4aaa5fe9ee174d50d2c737f04d0f7f76afb6fbfaf6b693bbfd\",\"urls\":[\"bzz-raw://60d024d31a6fc40fd67a18427969d7ba44e16ed1e7763a3b093f5eaef4e2fedf\",\"dweb:/ipfs/QmeAqAjx3QXUgk7bZfc4FWXcxjCt5VFNsy95dasLdAjHuo\"]},\"src/interfaces/ArbSysInterface.sol\":{\"keccak256\":\"0x4bc9f91d6a3973af46cc95dd5fe9a29d23e2e64b13512dd0b2d1bfcde705f132\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://7617f08af8fd8aa01a4a5e94ed0c4f15a8567665851c72765e82dbdd8ab20462\",\"dweb:/ipfs/QmYuVxm3JtrPwWBXhtEJZkhuv2SQ1iBH4j6ypP6uRAWAgF\"]},\"src/interfaces/IDiamond.sol\":{\"keccak256\":\"0x6ac4e3af3f634fe4523ff1c159402d43337d557ab4b4da7fb76be0a9586ea00b\",\"urls\":[\"bzz-raw://c435a28691b25d62d14eb453eb6f57b36613a9bddee4a42d4153d7692245e27d\",\"dweb:/ipfs/QmNZPJTBUwJngm36dDdeboDLMaUxvAJKtG5vQmSbR4CoFh\"]},\"src/interfaces/IDiamondCut.sol\":{\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://119d9a5acd99b9462a8341c9b95ddd468648799eefa47038f81521431743c1ae\",\"dweb:/ipfs/QmTF7WNyPWTUtUzNcpq5rf5v2uw5TwzqsSg9D53pfQufcu\"]},\"src/interfaces/IERC173.sol\":{\"keccak256\":\"0x001e07b0fbc894300b939d496ffb005abe398b5bc609802d319b8cdeafe5d36b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e59f66879ef993892410cbe834b1d2dd34891f47066b7be601ff825b0748361\",\"dweb:/ipfs/QmZedQ668we8ohPPZF5tPP5gKpJ5n22h3FDFkoFT5VXpEu\"]},\"src/interfaces/IWhitelist.sol\":{\"keccak256\":\"0x0dd87386e23970aaaa704283f3a0e6d71f782f576280885a1ce6741cf375cfa2\",\"urls\":[\"bzz-raw://ab074c338a4fde07d6d0b1548c0348849e47d720efc88a43fb067128d65c6b6e\",\"dweb:/ipfs/QmPk65Gu1vtxwJA7vucWsuaPfMb7tRPwA1roQZCj3bA4kY\"]},\"src/lib/LibBaseOffer.sol\":{\"keccak256\":\"0x6a1e8d686ed52167bb7f1cc9d5f5928f95c88974b858f263e5ce81aa55012d9a\",\"urls\":[\"bzz-raw://b42c9edad3b041a3acc156d020d38b80bdffb537ab1c3100c4aba28459b94694\",\"dweb:/ipfs/QmfXbg2ypcKk6Z1kZsddFCH1JXmndHLKp7W4YakbozF9Z6\"]},\"src/lib/LibCapacity.sol\":{\"keccak256\":\"0xa6282d41b15a17bfc63b86a292bdf4b1b9f76ed807cb9f120a3dfb45df575e6b\",\"urls\":[\"bzz-raw://f10bf0a906e46c769a7b3bbfa08145e687b1e926b2fd100bb9eeb445e9c01dfe\",\"dweb:/ipfs/QmbfxiX2kvYenv3QEMjMgmQfoV5oNVd84VGb2LA6sxcqZz\"]},\"src/lib/LibCapacityConst.sol\":{\"keccak256\":\"0xb5e8419cf51a6cdfcf4133e1663d9e860be2d2549eb7f70cf44389e4c9131de1\",\"urls\":[\"bzz-raw://258bf6b5f0ac2d7c7e07fc5bca35e3946adf9f88db203abd3a1d12b5e84f301d\",\"dweb:/ipfs/QmVjTKsQP8FgyQzJJUJmjCumC71yDtHbL6zhorsAFotw6e\"]},\"src/lib/LibDiamond.sol\":{\"keccak256\":\"0x2408a5742ee85ceba3764faeb0404945f813616fa2843b9cf8bffebdb5085fd6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1689678b6df2cc8f41b2195cec791158ff5cfe948b49248f2d0d769fad01d716\",\"dweb:/ipfs/Qmd5nrZ4tWR798jfwc78dudXCy33eDQYYDfydbHJvqv1Hj\"]},\"src/lib/LibEpochController.sol\":{\"keccak256\":\"0x9ec3cc1629fd372eb13414bd72fd5bcbefc5cd750481a36a02a4ac238ec1ac27\",\"urls\":[\"bzz-raw://7853c5d97803412369707e2ce6d6b61dbafdfc1a7484416d7794ede472d3ec04\",\"dweb:/ipfs/QmaUJ9oxDn1YSb3W3UknHS55vJv8LSEE2ZvcRG3aJX3kzz\"]},\"src/lib/LibGlobalConst.sol\":{\"keccak256\":\"0x899ef42e736db9f6ddd94071c860e27f69b336c0e0d1a32dfc18970f48aefc28\",\"urls\":[\"bzz-raw://d5a09dd2351d99163ec681c3915e28dda0ef219a539575e5d7a583dd477a2626\",\"dweb:/ipfs/QmehyZpEVEWT7kAzNXgpvCKd6hdmyP7rAgVibNdDXw7oXh\"]},\"src/lib/LibOffer.sol\":{\"keccak256\":\"0xbb9b76631b08f4423689d6c40d036da8c2420c87e60106ec97f31918e51fd6e0\",\"urls\":[\"bzz-raw://6cd55b3fd614611beb0f0c88772a2ebc0aed303669d41701614a1e1026c6f354\",\"dweb:/ipfs/QmZEpzCXefMY7szjKP5sEYa7tjxkNjxcvDyjAJwTybmH3X\"]},\"src/lib/LibOfferV2.sol\":{\"keccak256\":\"0x29b9f6552bfdda3329ba1cb17f9e3d21713ad182b1bd648ae8d5c75d3c96f46d\",\"urls\":[\"bzz-raw://b1c4a8fb59ee3679dd53d85b7c62d3133b77ba9ab58bc92b51541132ecbd886b\",\"dweb:/ipfs/QmXJmb8kWr5y23vPirmdt1qerwZXw4jYLLi2CX3kWgsbhj\"]},\"src/lib/LibOraclePrice.sol\":{\"keccak256\":\"0x395e410d38bb7320f0777a65f58396f295498c03bc2a300463637d04af46717e\",\"urls\":[\"bzz-raw://823509ec0230f49c7cdedd000a8daa423e57be202da80c277b1de1ef75abbfa1\",\"dweb:/ipfs/QmYbvvcRLAe2vxyKy3SerB2FLEePzEjpFD5i73n4A3ooo9\"]},\"src/lib/LibSendValue.sol\":{\"keccak256\":\"0xe67baddfe971458758212379777a88b24f10ba64909074d8e5e67d9c02ff2bc4\",\"urls\":[\"bzz-raw://24248623a873707b25433758820b844d6d18ee42d86a0011ace915a4fc557aa6\",\"dweb:/ipfs/QmPKvoYAxMTVTEnxn5DjuCweAsAcwQsD3oKGgPK9xjXHS1\"]},\"src/utils/Common.sol\":{\"keccak256\":\"0x825b67051bb6656367c807d479fbcb3acfc05ddd40c2f808f53c56cc7df65241\",\"urls\":[\"bzz-raw://5ee9f171a17bd35b1970b84dc7c964a326694af177bda0531bc7fd2252029ecb\",\"dweb:/ipfs/QmXdMNVRuKhMdn5AT8BE8oZCo3X4QmRtZAE5Cw2CSHsrA9\"]},\"src/utils/OwnableUpgradableDiamond.sol\":{\"keccak256\":\"0xf83ea1de92817acc06f07c1af78884b7efe86a78240b745b026e79936b5b1dcf\",\"urls\":[\"bzz-raw://bae836e95b2c565a93e69e4041240144557f419c68d004fc0c990325689a0e52\",\"dweb:/ipfs/QmdioTWkPjMJRYjymujBEsa4RwRjcewFABEqTHW7Y4fm3S\"]}},\"version\":1}","userdoc":{},"devdoc":{"version":1,"kind":"dev","methods":{"constructor":{},"proxiableUUID()":{"details":"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"refund(address,address,uint256)":{"details":"Refunds the specified amount of tokens to the user"},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]}},"storageLayout":{"storage":[{"astId":6139,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"diamond","offset":0,"slot":"0","type":"t_address"},{"astId":6141,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"coordinator","offset":0,"slot":"1","type":"t_address"},{"astId":6148,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"freeBalances","offset":0,"slot":"2","type":"t_mapping(t_contract(IERC20)938,t_mapping(t_address,t_uint256))"},{"astId":6155,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"dealBalances","offset":0,"slot":"3","type":"t_mapping(t_contract(IERC20)938,t_mapping(t_address,t_uint256))"},{"astId":6162,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"terminationRequests","offset":0,"slot":"4","type":"t_mapping(t_contract(IERC20)938,t_mapping(t_address,t_uint256))"},{"astId":6167,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"freeBalanceTotal","offset":0,"slot":"5","type":"t_mapping(t_contract(IERC20)938,t_uint256)"},{"astId":6172,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"dealBalancesTotal","offset":0,"slot":"6","type":"t_mapping(t_contract(IERC20)938,t_uint256)"},{"astId":6177,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"poolBalance","offset":0,"slot":"7","type":"t_mapping(t_contract(IERC20)938,t_uint256)"},{"astId":6184,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"limbo","offset":0,"slot":"8","type":"t_mapping(t_contract(IERC20)938,t_mapping(t_address,t_uint256))"},{"astId":6189,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"limboTotal","offset":0,"slot":"9","type":"t_mapping(t_contract(IERC20)938,t_uint256)"},{"astId":6193,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"frozen","offset":0,"slot":"10","type":"t_mapping(t_address,t_bool)"},{"astId":6197,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"topUpIds","offset":0,"slot":"11","type":"t_mapping(t_string_memory_ptr,t_bool)"},{"astId":6200,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"manualWithdrawEnabled","offset":0,"slot":"12","type":"t_bool"},{"astId":6204,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"dealDeposits","offset":0,"slot":"13","type":"t_array(t_struct(DealDepositInfo)7594_storage)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(DealDepositInfo)7594_storage)dyn_storage":{"encoding":"dynamic_array","label":"struct IBalanceKeeper.DealDepositInfo[]","numberOfBytes":"32","base":"t_struct(DealDepositInfo)7594_storage"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)938":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_enum(DealDepositReason)7573":{"encoding":"inplace","label":"enum IBalanceKeeper.DealDepositReason","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_contract(IERC20)938,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_contract(IERC20)938","label":"mapping(contract IERC20 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_contract(IERC20)938,t_uint256)":{"encoding":"mapping","key":"t_contract(IERC20)938","label":"mapping(contract IERC20 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_string_memory_ptr,t_bool)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(DealDepositInfo)7594_storage":{"encoding":"inplace","label":"struct IBalanceKeeper.DealDepositInfo","numberOfBytes":"256","members":[{"astId":7576,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"token","offset":0,"slot":"0","type":"t_contract(IERC20)938"},{"astId":7578,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"deal","offset":0,"slot":"1","type":"t_address"},{"astId":7580,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"user","offset":0,"slot":"2","type":"t_address"},{"astId":7583,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"reason","offset":20,"slot":"2","type":"t_enum(DealDepositReason)7573"},{"astId":7585,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"amount","offset":0,"slot":"3","type":"t_uint256"},{"astId":7587,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"blockNumber","offset":0,"slot":"4","type":"t_uint256"},{"astId":7589,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"reserved1","offset":0,"slot":"5","type":"t_uint256"},{"astId":7591,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"reserved2","offset":0,"slot":"6","type":"t_uint256"},{"astId":7593,"contract":"src/balance-keeper/BalanceKeeper.sol:BalanceKeeper","label":"reserved3","offset":0,"slot":"7","type":"t_uint256"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"bytecode":{"object":"60a080604052346100f2573060805260ff19600c5416600c557ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c166100e3576002600160401b03196001600160401b0382160161007d575b6040516132dc90816100f782396080518181816116b401526117560152f35b6001600160401b0319166001600160401b039081177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8061005e565b63f92ee8a960e01b5f5260045ffd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301627f56146127355750806304930575146127185780630a009097146126f0578063116424cc146123355780631229add5146122fd5780631e4343ec146122db578063301aaac9146120ad57806331acc94214611d975780633adce71514611d395780633bf9bb0b14611a735780633eb026af146119185780634f1ef2861461170857806352d1902d146116a257806368abb5e01461166a578063788649ea146116025780637df5070f146114eb5780637fad64011461135157806382ad6f351461118057806388081fcb14610f265780638ea9811714610ead578063933a6d5e14610e7557806395e1b41814610bee578063985a3e1a14610a6c5780639cf8fc3614610a11578063ad3cb1cc146109c6578063ae77dc1014610976578063c08ea6e61461091c578063c44ead3c146108e4578063c4d66de81461077b578063d05166501461073e578063d4f4ba48146106d1578063db2aa127146105ad578063de700da61461055d578063ec178c131461051e578063edb455291461023e578063f0b7db4e14610217578063f26c159f146101df5763fac4bf22146101be575f80fd5b346101db575f3660031901126101db57602060405162093a808152f35b5f80fd5b346101db5760203660031901126101db576102156101fb61292f565b61021060018060a01b03600154163314612c21565b612e5b565b005b346101db575f3660031901126101db575f546040516001600160a01b039091168152602090f35b346101db5760203660031901126101db5761025761292f565b335f52600a60205261027060ff60405f20541615612b4e565b610278612d3d565b60ff600c5416156104bf576001600160a01b0381165f8181526004602090815260408083203384529091529020549091901561046e57815f52600460205260405f2060018060a01b0333165f5260205262093a806102da60405f205442612bf5565b1061041e575f828152600260209081526040808320338452909152902054156103c5575f828152600260209081526040808320338452909152902080546103869290916103278380612bf5565b9055835f52600560205260405f20610340838254612bf5565b905560056040518381525f6020820152855f8051602061312783398151915260403393a45f84815260046020908152604080832033808552925282209190915590612d72565b604051903382527f58c9b83f9c19bf10c1eabd844bd0371158317b08615ff5e11c9ba5761bca6ba860203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152602b60248201527f42616c616e63654b65657065723a2077697468647261773a206e6f7420656e6f60448201526a7567682062616c616e636560a81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f42616c616e63654b65657065723a2077697468647261773a20746f6f206561726044820152616c7960f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f42616c616e63654b65657065723a2077697468647261773a206e6f2072657175604482015262195cdd60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201527f42616c616e63654b65657065723a2077697468647261773a206d616e75616c206044820152701dda5d1a191c985dc8191a5cd8589b1959607a1b6064820152608490fd5b346101db5760403660031901126101db5761021561053a61292f565b610542612945565b9061055860018060a01b03600154163314612c21565b612e99565b346101db5760403660031901126101db5761057661292f565b61057e612945565b6001600160a01b039182165f908152600260209081526040808320949093168252928352819020549051908152f35b346101db5760403660031901126101db576105c661292f565b602435906105d2612d3d565b6105ed6001600160a01b036105e5612e0c565b163314612ca4565b60018060a01b03811690815f5260076020528260405f20541061066d578261062f91835f52600760205260405f20610626838254612bf5565b90553390612d72565b6040519182527fab8ee1a4a7de523166c3532be846a4090f08cce2dcad80e897e9df474fc6a85a60203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603660248201527f42616c616e63654b65657065723a206e6f7420656e6f75676820616d6f756e74604482015275081d1bc81dda5d1a191c985dc8199c9bdb481c1bdbdb60521b6064820152608490fd5b346101db5760403660031901126101db5760206107366106ef61292f565b6106f7612945565b6001600160a01b039182165f81815260028652604080822094909316808252938652828120549181526003865282812093815292855291205490612bac565b604051908152f35b346101db5760203660031901126101db576001600160a01b0361075f61292f565b165f52600a602052602060ff60405f2054166040519015158152f35b346101db5760203660031901126101db5761079461292f565b5f8051602061324783398151915254604081901c60ff161591906001600160401b038116801590816108dc575b60011490816108d2575b1590816108c9575b506108ba576001600160401b031981166001175f805160206132478339815191525582610892575b505f80546001600160a01b0319166001600160a01b03929092169190911790555f805160206132478339815191525490604082901c60ff16156108835761083e57005b60ff60401b19165f8051602061324783398151915255604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b631afcd79f60e31b5f5260045ffd5b6001600160481b0319166001600160401b01175f8051602061324783398151915255826107fb565b63f92ee8a960e01b5f5260045ffd5b905015846107d3565b303b1591506107cb565b8491506107c1565b346101db5760203660031901126101db576001600160a01b0361090561292f565b165f526009602052602060405f2054604051908152f35b346101db5760203660031901126101db576004356001600160401b0381116101db5760ff60208061095281943690600401612a49565b604051928184925191829101835e8101600b81520301902054166040519015158152f35b346101db5760403660031901126101db5761098f61292f565b610997612945565b6001600160a01b039182165f908152600860209081526040808320949093168252928352819020549051908152f35b346101db575f3660031901126101db57610a0d6040516109e76040826129d5565b60058152640352e302e360dc1b6020820152604051918291602083526020830190612aae565b0390f35b346101db575f3660031901126101db57610a3660018060a01b03600154163314612c21565b60ff19600c5416600c557fc090ba447c2876286710fa3f84277e63b8c4b98a2691afca3435f79060a716cb6020604051338152a1005b346101db5760803660031901126101db57610a8561292f565b610a8d612945565b90610a9661295b565b9060643591610aa3612d3d565b610ab66001600160a01b036105e5612e0c565b60018060a01b03821691825f52600860205260405f2060018060a01b0386165f526020528360405f205410610b8c5781610b59857f5d16c4a1e4b62879fbf1bda626a5a21daded2fc836b50947712c5d595f947fbd94610b7794875f52600860205260405f2060018060a01b038b165f5260205260405f20610b39848254612bf5565b9055875f52600960205260405f20610b52848254612bf5565b9055612d72565b6040516001600160a01b039182169690911694909182913383612d09565b0390a45f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603460248201527f42616c616e63654b65657065723a20776974686472617746726f6d4c696d626f6044820152733a206e6f7420656e6f7567682062616c616e636560601b6064820152608490fd5b346101db5760a03660031901126101db57610c0761292f565b610c0f612945565b610c1761295b565b6064359160843560ff811681036101db575f54604051632105305360e01b815233600482015290602090829060249082906001600160a01b03165afa8015610e6a57610c6a915f91610e3b575b50612aea565b60018060a01b03821693845f52600a602052610c8d60ff60405f20541615612b4e565b60018060a01b03841695865f52600a602052610cb060ff60405f20541615612b4e565b610cb8612d3d565b60018060a01b031693845f52600260205260405f20865f526020528160405f205410610ddb5786855f80516020613207833981519152610dbd7fec02109b69235dc964dc3600685d13d211d8f05b663fac885f581f60da3fc2ca9760028b855f805160206131278339815191528399825f528460205260405f20845f5260205260405f20610d478d8254612bf5565b9055825f52600560205260405f20610d608d8254612bf5565b90558b610d7260405192839283612d24565b0390a4835f528560205260405f20855f5260205260405f20610d95888254612bac565b9055835f52600560205260405f20610dae888254612bac565b90556040519182918883612d24565b0390a46040805191825260ff90921660208201529081908101610b77565b60405162461bcd60e51b815260206004820152603260248201527f42616c616e63654b65657065723a206d6f76654672656542616c616e63653a206044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b610e5d915060203d602011610e63575b610e5581836129d5565b810190612ad2565b87610c64565b503d610e4b565b6040513d5f823e3d90fd5b346101db5760203660031901126101db576001600160a01b03610e9661292f565b165f526005602052602060405f2054604051908152f35b346101db5760203660031901126101db57610ec661292f565b610ed96001600160a01b036105e5612e0c565b600180546001600160a01b0319166001600160a01b039290921691821790556040513381527f770b8c4e13577f5ef5749f2e790fdb6a3f401e49bb3eded50a027c81f72c6a7c90602090a2005b346101db57610f3436612971565b5f54604051632105305360e01b81523360048201529293919290602090829060249082906001600160a01b03165afa8015610e6a57610f79915f916111615750612aea565b60018060a01b031692835f52600a602052610f9b60ff60405f20541615612b4e565b610fa3612d3d565b60018060a01b031690815f52600360205260405f20845f526020528260405f20541061111057815f5260066020528260405f2054106110b957610b777f1e579e7583af5383169584a02ef5981c4b4f8d7ff2c36ccfdabfa6280036b3dd91835f52600360205260405f20865f5260205260405f20611022868254612bf5565b9055835f52600660205260405f2061103b868254612bf5565b9055835f52600260205260405f20865f5260205260405f2061105e868254612bac565b9055835f52600560205260405f20611077868254612bac565b9055600186855f805160206132078339815191526040518061109a338c83612d24565b0390a460405191829133968390815260ff909116602082015260400190565b60405162461bcd60e51b815260206004820152603c60248201525f8051602061326783398151915260448201527b616c3a206e6f7420656e6f75676820746f74616c2062616c616e636560201b6064820152608490fd5b60405162461bcd60e51b815260206004820152603660248201525f80516020613267833981519152604482015275616c3a206e6f7420656e6f7567682062616c616e636560501b6064820152608490fd5b61117a915060203d602011610e6357610e5581836129d5565b86610c64565b346101db5761118e36612a74565b611196612d3d565b6111ab60018060a01b03600154163314612c21565b60018060a01b03831691825f5260056020528160405f2054106112fe57825f52600260205260405f2060018060a01b0382165f526020528160405f2054106112b1578161128e7fed3f8d40e0f7f69b8048638c399ff0c54ec9b89759e2b8f2207729452e1422f19361129c93865f52600260205260405f2060018060a01b0382165f5260205260405f20611240838254612bf5565b9055865f52600560205260405f20611259838254612bf5565b905560018060a01b03811697600889895f8051602061312783398151915260405180611286338a83612d24565b0390a4612d72565b604051918291339083612d24565b0390a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603260248201525f805160206132878339815191526044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201525f805160206132878339815191526044820152776e6f7420656e6f75676820746f74616c2062616c616e636560401b6064820152608490fd5b346101db5761135f36612a74565b916113736001600160a01b036105e5612e0c565b60018060a01b031690815f52600860205260405f2060018060a01b0382165f526020528260405f20541061148d576114887fad800992a52028310197800abba2e1d874c3952c1622e9266ba9e0abac9ecbee91835f52600860205260405f2060018060a01b0382165f5260205260405f206113ef868254612bf5565b9055835f52600960205260405f20611408868254612bf5565b9055835f52600260205260405f2060018060a01b0382165f5260205260405f20611433868254612bac565b9055835f52600560205260405f2061144c868254612bac565b905560018060a01b031693600785855f8051602061320783398151915260405180611478338883612d24565b0390a46040519182913383612d09565b0390a3005b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a2066756e6446726f6d4c696d626f3a206e6f60448201526f7420656e6f7567682062616c616e636560801b6064820152608490fd5b346101db5760403660031901126101db5761150461292f565b61150c612945565b9061152260018060a01b03600154163314612c21565b60018060a01b03811690815f52600460205260405f2060018060a01b0384165f5260205260405f2054156115bd578261157a91835f52600460205260405f2060018060a01b0383165f526020525f6040812055612e99565b61158382612e5b565b6040513381526001600160a01b03909216917f578c57b9c6614c72323596d4a9a6a5676102b3adaa6814118c74afe38b6c8ae690602090a3005b60405162461bcd60e51b815260206004820152601f60248201527f42616c616e63654b65657065723a207665746f3a206e6f2072657175657374006044820152606490fd5b346101db5760203660031901126101db5761161b61292f565b61163060018060a01b03600154163314612c21565b60018060a01b0316805f52600a60205260405f2060ff1981541690555f80516020613147833981519152604080515f8152336020820152a2005b346101db5760203660031901126101db576001600160a01b0361168b61292f565b165f526007602052602060405f2054604051908152f35b346101db575f3660031901126101db577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036116f95760206040515f805160206131e78339815191528152f35b63703e46dd60e11b5f5260045ffd5b60403660031901126101db5761171c61292f565b6024356001600160401b0381116101db57366023820112156101db5761174c903690602481600401359101612a13565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163081149081156118f6575b506116f9576117996001600160a01b036105e5612e0c565b6040516352d1902d60e01b81526001600160a01b0383169290602081600481875afa5f91816118c2575b506117db5783634c9c8ce360e01b5f5260045260245ffd5b805f805160206131e78339815191528592036118b05750813b1561189e575f805160206131e783398151915280546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115611886575f8083602061021595519101845af43d1561187e573d91611862836129f8565b9261187060405194856129d5565b83523d5f602085013e6130a8565b6060916130a8565b50503461188f57005b63b398979f60e01b5f5260045ffd5b634c9c8ce360e01b5f5260045260245ffd5b632a87526960e21b5f5260045260245ffd5b9091506020813d6020116118ee575b816118de602093836129d5565b810103126101db575190856117c3565b3d91506118d1565b5f805160206131e7833981519152546001600160a01b03161415905083611781565b346101db5760403660031901126101db5761193161292f565b6024359061193d612d3d565b6001546001600160a01b031633148015611a5a575b156119f2576119b460018060a01b03821691825f52600760205260405f2061197b858254612bac565b90556040516323b872dd60e01b602082015233602482015230604482015260648082018690528152906119af6084836129d5565b613050565b6040519182527fc5efc688606a98f36c8fcc0d9c778216b9db9aa4809a8de9f18e3cc8885c99a760203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152604760248201525f8051602061316783398151915260448201527f6f72206469616d6f6e64206f776e65722063616e2063616c6c207468697320666064820152663ab731ba34b7b760c91b608482015260a490fd5b506001600160a01b03611a6b612e0c565b163314611952565b346101db5760403660031901126101db57600435602435818110611cfb57600d54811015611cbb57611aa58282612bf5565b9160018301809311611c5957611aba83612c79565b92611ac860405194856129d5565b808452611ad7601f1991612c79565b015f5b818110611c6d575050805b82811115611ba557836040518091602082016020835281518091526020604084019201905f5b818110611b19575050500390f35b9193509160206101206001926101008751858060a01b038151168352858060a01b03858201511685840152858060a01b036040820151166040840152611b6760608201516060850190612a67565b6080810151608084015260a081015160a084015260c081015160c084015260e081015160e08401520151610100820152019401910191849392611b0b565b611c48611bb182612bc5565b50611bbc8484612bf5565b90600760405191611bcc836129b9565b80546001600160a01b03908116845260018201548116602085015260028201549081166040850152611c079060a01c60ff1660608501612bb9565b60038101546080840152600481015460a0840152600581015460c0840152600681015460e08401520154610100820152611c418288612c90565b5285612c90565b505f198114611c5957600101611ae5565b634e487b7160e01b5f52601160045260245ffd5b602090604051611c7c816129b9565b5f81525f838201525f60408201525f60608201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015282828801015201611ada565b60405162461bcd60e51b81526020600482015260186024820152776765744465706f736974496e666f3a206f766572666c6f7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527573746f7265644465616c733a20746f203c2066726f6d60501b6044820152606490fd5b346101db575f3660031901126101db57611d5e60018060a01b03600154163314612c21565b600160ff19600c541617600c557ffc30ceacbbd28b9ae09ddbb48ae26fbe5ebc9eb59bb3470290fadd187d7c40246020604051338152a1005b346101db5760803660031901126101db57611db061292f565b611db8612945565b906044356064356001600160401b0381116101db57611ddb903690600401612a49565b9260018060a01b031691825f52600a602052611dfe60ff60405f20541615612b4e565b5f546040516302984ebd60e31b815290602090829060049082906001600160a01b03165afa908115610e6a575f9161207e575b506001600160a01b0316330361201e5760405160ff855191602081818901948086835e8101600b8152030190205416611fc0576020604051809287518091835e8101600b815203019020600160ff1982541617905560018060a01b031690815f5260076020528060405f205410611f5e577fd255d18d8ecbcbaa2126775ba49c6bddd4ec7bed71589374889bacdd0334bb4a90825f52600760205260405f20611edb828254612bf5565b9055825f52600260205260405f20845f5260205260405f20611efe828254612bac565b9055825f52600560205260405f20611f17828254612bac565b90555f84845f8051602061320783398151915260405180611f39338883612d24565b0390a46040519081526040602082015280611f5933966040830190612aae565b0390a4005b60405162461bcd60e51b815260206004820152603460248201527f42616c616e63654b65657065723a2075736572546f7055703a206e6f7420656e6044820152736f75676820676174657761792062616c616e636560601b6064820152608490fd5b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a2075736572546f7055703a20746f702d757060448201526f081a5908185b1c9958591e481d5cd95960821b6064820152608490fd5b60405162461bcd60e51b815260206004820152603260248201527f42616c616e63654b65657065723a204f6e6c7920766f646f7061642063616e2060448201527131b0b636103a3434b990333ab731ba34b7b760711b6064820152608490fd5b6120a0915060203d6020116120a6575b61209881836129d5565b810190612c02565b85611e31565b503d61208e565b346101db5760203660031901126101db576120c661292f565b335f52600a6020526120df60ff60405f20541615612b4e565b6001600160a01b03165f8181526003602090815260408083203384529091529020546122875760ff600c541615612234575f818152600260209081526040808320338452909152902054156121e7575f81815260046020908152604080832033845290915290205461219b57805f52600460205260405f2060018060a01b0333165f5260205260405f20429055604051903382527f4365d6807428f602d009451dbfac23489f573dc32f596c2e89dee5df4573575760203393a3005b60405162461bcd60e51b815260206004820152603160248201525f80516020613187833981519152604482015270185b1c9958591e481c995c5d595cdd1959607a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603260248201525f805160206131878339815191526044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201525f805160206131878339815191526044820152771b585b9d585b081dda5d1a191c985dc8191a5cd8589b195960421b6064820152608490fd5b60405162461bcd60e51b815260206004820152603960248201525f805160206132878339815191526044820152786465616c2062616c616e6365206973206e6f7420656d70747960381b6064820152608490fd5b346101db575f3660031901126101db57602060ff600c54166040519015158152f35b346101db5760203660031901126101db576001600160a01b0361231e61292f565b165f526006602052602060405f2054604051908152f35b346101db5760803660031901126101db5761234e61292f565b612356612945565b604435906064359060028210156101db575f54604051632105305360e01b815233600482015290602090829060249082906001600160a01b03165afa8015610e6a576123a8915f916111615750612aea565b60018060a01b031692835f52600a6020526123ca60ff60405f20541615612b4e565b6123d2612d3d565b60018060a01b031690815f52600260205260405f20845f526020528260405f2054106126a157815f5260056020528260405f20541061264c57815f52600360205260405f20845f5260205260405f2061242c848254612bac565b9055815f52600660205260405f20612445848254612bac565b9055815f52600260205260405f20845f5260205260405f20612468848254612bf5565b9055815f52600560205260405f20612481848254612bf5565b9055600384835f80516020613127833981519152604051806124a4338a83612d24565b0390a46124af612da9565b6040516124bb816129b9565b838152602081013381526040820190878252606083016124db8682612bb9565b6080840188815260a0850186815260c08601915f835260e08701935f85526101008801955f8752600d54600160401b811015612638578060016125219201600d55612bc5565b999099612625575189546001600160a01b03199081166001600160a01b03928316178b55915160018b018054841691831691909117905597516002808b018054909316919099161781559051968710156126115760079681549060ff60a01b9060a01b169060ff60a01b191617905551600387015551600486015551600585015551600684015551910155600d54915f198301928311611c59576125cf906040519586526020860190612a67565b604084015260608301527f58a01cec638e44fd50f881445a9cedbc0c087ba39f0218de7ddc71ec1180129060803393a45f5f805160206132278339815191525d005b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152603a60248201525f805160206131078339815191526044820152793a206e6f7420656e6f75676820746f74616c2062616c616e636560301b6064820152608490fd5b60405162461bcd60e51b815260206004820152603460248201525f805160206131078339815191526044820152733a206e6f7420656e6f7567682062616c616e636560601b6064820152608490fd5b346101db575f3660031901126101db576001546040516001600160a01b039091168152602090f35b346101db575f3660031901126101db576020600d54604051908152f35b346101db5761274336612971565b91909360208160248160018060a01b035f5416632105305360e01b82523360048301525afa8015610e6a5761277e915f916111615750612aea565b60018060a01b03811693845f52600a6020526127a160ff60405f20541615612b4e565b6127a9612d3d565b60018060a01b03841693845f52600260205260405f20865f526020528160405f2054106128e357845f5260056020528160405f205410612891577f266db432dd60d996c5eacf4e77fb6e9d1642097fad309f5fce95908bb09e15949361286c8360609560ff94895f52600260205260405f208b5f5260205260405f20612830848254612bf5565b9055895f52600560205260405f20612849848254612bf5565b905560048b8b5f8051602061312783398151915260405180611286338a83612d24565b604051928352166020820152336040820152a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603760248201525f805160206131c78339815191526044820152766f7420656e6f75676820746f74616c2062616c616e636560481b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201525f805160206131c78339815191526044820152706f7420656e6f7567682062616c616e636560781b6064820152608490fd5b600435906001600160a01b03821682036101db57565b602435906001600160a01b03821682036101db57565b604435906001600160a01b03821682036101db57565b60809060031901126101db576004356001600160a01b03811681036101db57906024356001600160a01b03811681036101db57906044359060643560ff811681036101db5790565b61012081019081106001600160401b0382111761263857604052565b601f909101601f19168101906001600160401b0382119082101761263857604052565b6001600160401b03811161263857601f01601f191660200190565b929192612a1f826129f8565b91612a2d60405193846129d5565b8294818452818301116101db578281602093845f960137010152565b9080601f830112156101db57816020612a6493359101612a13565b90565b9060028210156126115752565b60609060031901126101db576004356001600160a01b03811681036101db57906024356001600160a01b03811681036101db579060443590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b908160209103126101db575180151581036101db5790565b15612af157565b60405162461bcd60e51b815260206004820152602f60248201527f42616c616e63654b65657065723a204f6e6c79206465616c2063616e2063616c60448201526e36103a3434b990333ab731ba34b7b760891b6064820152608490fd5b15612b5557565b60405162461bcd60e51b815260206004820152602960248201527f42616c616e63654b65657065723a2055736572206973207065726d616e656e74604482015268363c90333937bd32b760b91b6064820152608490fd5b91908201809211611c5957565b60028210156126115752565b600d54811015612be157600d5f5260205f209060031b01905f90565b634e487b7160e01b5f52603260045260245ffd5b91908203918211611c5957565b908160209103126101db57516001600160a01b03811681036101db5790565b15612c2857565b60405162461bcd60e51b815260206004820152603660248201525f8051602061316783398151915260448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608490fd5b6001600160401b0381116126385760051b60200190565b8051821015612be15760209160051b010190565b15612cab57565b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a204f6e6c79206f776e65722063616e20636160448201526f3636103a3434b990333ab731ba34b7b760811b6064820152608490fd5b6001600160a01b039091168152602081019190915260400190565b9081526001600160a01b03909116602082015260400190565b5f805160206132278339815191525c612d635760015f805160206132278339815191525d565b633ee5aeb560e01b5f5260045ffd5b6119af612da79392612d9960405194859263a9059cbb60e01b602085015260248401612d09565b03601f1981018452836129d5565b565b60643b15612e085760405163a3b1b31d60e01b815260208160048160645afa908115610e6a575f91612dd9575090565b90506020813d602011612e00575b81612df4602093836129d5565b810103126101db575190565b3d9150612de7565b4390565b5f54604051638da5cb5b60e01b815290602090829060049082906001600160a01b03165afa908115610e6a575f91612e42575090565b612a64915060203d6020116120a65761209881836129d5565b60018060a01b0316805f52600a60205260405f20600160ff198254161790555f805160206131478339815191526040805160018152336020820152a2565b60018060a01b0316805f52600260205260405f2060018060a01b0383165f5260205260405f205491821561300657815f5260056020528260405f205410612fb657612fb17f8d6aa7cd13e7031d191d6fa5505e7bca293b15b474585bd0748c94280a1dfb0c91835f52600860205260405f2060018060a01b0382165f5260205260405f20612f28868254612bac565b9055835f52600960205260405f20612f41868254612bac565b9055835f52600260205260405f2060018060a01b0382165f5260205260405f20612f6c868254612bf5565b9055835f52600560205260405f20612f85868254612bf5565b905560018060a01b031693600685855f8051602061312783398151915260405180611478338883612d24565b0390a3565b60405162461bcd60e51b815260206004820152603560248201525f805160206131a783398151915260448201527420656e6f75676820746f74616c2062616c616e636560581b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201525f805160206131a783398151915260448201526e20656e6f7567682062616c616e636560881b6064820152608490fd5b905f602091828151910182855af115610e6a575f513d61309f57506001600160a01b0381163b155b61307f5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415613078565b906130cc57508051156130bd57805190602001fd5b63d6bda27560e01b5f5260045ffd5b815115806130fd575b6130dd575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b156130d556fe42616c616e63654b65657065723a206d6f766542616c616e6365546f4465616c69bee883171cca38453cbb97adc848425ea48ea1b0fcc40c53abc32e3ef7b0e5ebbe21d9a1cf17261291d004eb85252315dcfcbeb7780eb74ea43763e23bed0342616c616e63654b65657065723a204f6e6c7920636f6f7264696e61746f722042616c616e63654b65657065723a207769746864726177526571756573743a2042616c616e63654b65657065723a205f73656e64546f4c696d626f3a206e6f7442616c616e63654b65657065723a20776974686472617742794465616c3a206e360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8a574e0ee9236bf8a1f1625cca6131131ef4fba2e05aaa184e939ba4da397c8a9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0042616c616e63654b65657065723a206d6f766542616c616e636546726f6d446542616c616e63654b65657065723a20766f646f70616457697468647261773a20a2646970667358221220482f846ec3fad9f5c4a2898fbab36a1e0fa7f42449b5dad695d9b24b18b1317b64736f6c634300081a0033","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xF2 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0xFF NOT PUSH1 0xC SLOAD AND PUSH1 0xC SSTORE PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0xFF DUP2 PUSH1 0x40 SHR AND PUSH2 0xE3 JUMPI PUSH1 0x2 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ADD PUSH2 0x7D JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32DC SWAP1 DUP2 PUSH2 0xF7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x16B4 ADD MSTORE PUSH2 0x1756 ADD MSTORE RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SSTORE DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 SWAP1 LOG1 PUSH0 DUP1 PUSH2 0x5E JUMP JUMPDEST PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1627F56 EQ PUSH2 0x2735 JUMPI POP DUP1 PUSH4 0x4930575 EQ PUSH2 0x2718 JUMPI DUP1 PUSH4 0xA009097 EQ PUSH2 0x26F0 JUMPI DUP1 PUSH4 0x116424CC EQ PUSH2 0x2335 JUMPI DUP1 PUSH4 0x1229ADD5 EQ PUSH2 0x22FD JUMPI DUP1 PUSH4 0x1E4343EC EQ PUSH2 0x22DB JUMPI DUP1 PUSH4 0x301AAAC9 EQ PUSH2 0x20AD JUMPI DUP1 PUSH4 0x31ACC942 EQ PUSH2 0x1D97 JUMPI DUP1 PUSH4 0x3ADCE715 EQ PUSH2 0x1D39 JUMPI DUP1 PUSH4 0x3BF9BB0B EQ PUSH2 0x1A73 JUMPI DUP1 PUSH4 0x3EB026AF EQ PUSH2 0x1918 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1708 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x16A2 JUMPI DUP1 PUSH4 0x68ABB5E0 EQ PUSH2 0x166A JUMPI DUP1 PUSH4 0x788649EA EQ PUSH2 0x1602 JUMPI DUP1 PUSH4 0x7DF5070F EQ PUSH2 0x14EB JUMPI DUP1 PUSH4 0x7FAD6401 EQ PUSH2 0x1351 JUMPI DUP1 PUSH4 0x82AD6F35 EQ PUSH2 0x1180 JUMPI DUP1 PUSH4 0x88081FCB EQ PUSH2 0xF26 JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0xEAD JUMPI DUP1 PUSH4 0x933A6D5E EQ PUSH2 0xE75 JUMPI DUP1 PUSH4 0x95E1B418 EQ PUSH2 0xBEE JUMPI DUP1 PUSH4 0x985A3E1A EQ PUSH2 0xA6C JUMPI DUP1 PUSH4 0x9CF8FC36 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x9C6 JUMPI DUP1 PUSH4 0xAE77DC10 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xC08EA6E6 EQ PUSH2 0x91C JUMPI DUP1 PUSH4 0xC44EAD3C EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x77B JUMPI DUP1 PUSH4 0xD0516650 EQ PUSH2 0x73E JUMPI DUP1 PUSH4 0xD4F4BA48 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0xDB2AA127 EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xDE700DA6 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0xEC178C13 EQ PUSH2 0x51E JUMPI DUP1 PUSH4 0xEDB45529 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xF0B7DB4E EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xF26C159F EQ PUSH2 0x1DF JUMPI PUSH4 0xFAC4BF22 EQ PUSH2 0x1BE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x215 PUSH2 0x1FB PUSH2 0x292F JUMP JUMPDEST PUSH2 0x210 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0x2E5B JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x257 PUSH2 0x292F JUMP JUMPDEST CALLER PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x270 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x278 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0xFF PUSH1 0xC SLOAD AND ISZERO PUSH2 0x4BF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x46E JUMPI DUP2 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH3 0x93A80 PUSH2 0x2DA PUSH1 0x40 PUSH0 KECCAK256 SLOAD TIMESTAMP PUSH2 0x2BF5 JUMP JUMPDEST LT PUSH2 0x41E JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3C5 JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x386 SWAP3 SWAP1 SWAP2 PUSH2 0x327 DUP4 DUP1 PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x340 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x5 PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH0 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP4 LOG4 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP1 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 CALLER DUP3 MSTORE PUSH32 0x58C9B83F9C19BF10C1EABD844BD0371158317B08615FF5E11C9BA5761BCA6BA8 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206E6F7420656E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7567682062616C616E6365 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A20746F6F20656172 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6C79 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206E6F2072657175 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x195CDD PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206D616E75616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDA5D1A191C985DC8191A5CD8589B1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x215 PUSH2 0x53A PUSH2 0x292F JUMP JUMPDEST PUSH2 0x542 PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0x558 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0x2E99 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x576 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x57E PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x5C6 PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x5D2 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x5ED PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST AND CALLER EQ PUSH2 0x2CA4 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x66D JUMPI DUP3 PUSH2 0x62F SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x626 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE CALLER SWAP1 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAB8EE1A4A7DE523166C3532BE846A4090F08CCE2DCAD80E897E9DF474FC6A85A PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A206E6F7420656E6F75676820616D6F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x81D1BC81DDA5D1A191C985DC8199C9BDB481C1BDBDB PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH2 0x736 PUSH2 0x6EF PUSH2 0x292F JUMP JUMPDEST PUSH2 0x6F7 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP1 DUP3 MSTORE SWAP4 DUP7 MSTORE DUP3 DUP2 KECCAK256 SLOAD SWAP2 DUP2 MSTORE PUSH1 0x3 DUP7 MSTORE DUP3 DUP2 KECCAK256 SWAP4 DUP2 MSTORE SWAP3 DUP6 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x75F PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x794 PUSH2 0x292F JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x40 DUP2 SWAP1 SHR PUSH1 0xFF AND ISZERO SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 ISZERO SWAP1 DUP2 PUSH2 0x8DC JUMPI JUMPDEST PUSH1 0x1 EQ SWAP1 DUP2 PUSH2 0x8D2 JUMPI JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x8C9 JUMPI JUMPDEST POP PUSH2 0x8BA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP2 AND PUSH1 0x1 OR PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE DUP3 PUSH2 0x892 JUMPI JUMPDEST POP PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 PUSH1 0x40 DUP3 SWAP1 SHR PUSH1 0xFF AND ISZERO PUSH2 0x883 JUMPI PUSH2 0x83E JUMPI STOP JUMPDEST PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH4 0x1AFCD79F PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x48 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL ADD OR PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE DUP3 PUSH2 0x7FB JUMP JUMPDEST PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP ISZERO DUP5 PUSH2 0x7D3 JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP PUSH2 0x7CB JUMP JUMPDEST DUP5 SWAP2 POP PUSH2 0x7C1 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x905 PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI PUSH1 0xFF PUSH1 0x20 DUP1 PUSH2 0x952 DUP2 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2A49 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP2 DUP5 SWAP3 MLOAD SWAP2 DUP3 SWAP2 ADD DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x98F PUSH2 0x292F JUMP JUMPDEST PUSH2 0x997 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA0D PUSH1 0x40 MLOAD PUSH2 0x9E7 PUSH1 0x40 DUP3 PUSH2 0x29D5 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x352E302E3 PUSH1 0xDC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2AAE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA36 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xC SLOAD AND PUSH1 0xC SSTORE PUSH32 0xC090BA447C2876286710FA3F84277E63B8C4B98A2691AFCA3435F79060A716CB PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA85 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xA8D PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0xA96 PUSH2 0x295B JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH2 0xAA3 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0xAB6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0xB8C JUMPI DUP2 PUSH2 0xB59 DUP6 PUSH32 0x5D16C4A1E4B62879FBF1BDA626A5A21DADED2FC836B50947712C5D595F947FBD SWAP5 PUSH2 0xB77 SWAP5 DUP8 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xB39 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP8 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xB52 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP7 SWAP1 SWAP2 AND SWAP5 SWAP1 SWAP2 DUP3 SWAP2 CALLER DUP4 PUSH2 0x2D09 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A20776974686472617746726F6D4C696D626F PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xC07 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xC0F PUSH2 0x2945 JUMP JUMPDEST PUSH2 0xC17 PUSH2 0x295B JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0xC6A SWAP2 PUSH0 SWAP2 PUSH2 0xE3B JUMPI JUMPDEST POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xC8D PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xCB0 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0xCB8 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0xDDB JUMPI DUP7 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xDBD PUSH32 0xEC02109B69235DC964DC3600685D13D211D8F05B663FAC885F581F60DA3FC2CA SWAP8 PUSH1 0x2 DUP12 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 SWAP10 DUP3 PUSH0 MSTORE DUP5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD47 DUP14 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD60 DUP14 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP12 PUSH2 0xD72 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 DUP4 PUSH0 MSTORE DUP6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP6 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD95 DUP9 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xDAE DUP9 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 DUP2 ADD PUSH2 0xB77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A206D6F76654672656542616C616E63653A20 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xE5D SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE63 JUMPI JUMPDEST PUSH2 0xE55 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2AD2 JUMP JUMPDEST DUP8 PUSH2 0xC64 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE4B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xE96 PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xEC6 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xED9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x770B8C4E13577F5EF5749F2E790FDB6A3F401E49BB3EDED50A027C81F72C6A7C SWAP1 PUSH1 0x20 SWAP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0xF34 CALLDATASIZE PUSH2 0x2971 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0xF79 SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xF9B PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0xFA3 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x1110 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x10B9 JUMPI PUSH2 0xB77 PUSH32 0x1E579E7583AF5383169584A02EF5981C4B4F8D7FF2C36CCFDABFA6280036B3DD SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1022 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x103B DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x105E DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1077 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP7 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x109A CALLER DUP13 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER SWAP7 DUP4 SWAP1 DUP2 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3267 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH28 0x616C3A206E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x20 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3267 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x616C3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x117A SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE63 JUMPI PUSH2 0xE55 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP7 PUSH2 0xC64 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x118E CALLDATASIZE PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x1196 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x11AB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x12FE JUMPI DUP3 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x12B1 JUMPI DUP2 PUSH2 0x128E PUSH32 0xED3F8D40E0F7F69B8048638C399FF0C54EC9B89759E2B8F2207729452E1422F1 SWAP4 PUSH2 0x129C SWAP4 DUP7 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1240 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP7 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1259 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP8 PUSH1 0x8 DUP10 DUP10 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1286 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER SWAP1 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x6E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x40 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x135F CALLDATASIZE PUSH2 0x2A74 JUMP JUMPDEST SWAP2 PUSH2 0x1373 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x148D JUMPI PUSH2 0x1488 PUSH32 0xAD800992A52028310197800ABBA2E1D874C3952C1622E9266BA9E0ABAC9ECBEE SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x13EF DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1408 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1433 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x144C DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH1 0x7 DUP6 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1478 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER DUP4 PUSH2 0x2D09 JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2066756E6446726F6D4C696D626F3A206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x7420656E6F7567682062616C616E6365 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1504 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x150C PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0x1522 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD ISZERO PUSH2 0x15BD JUMPI DUP3 PUSH2 0x157A SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2E99 JUMP JUMPDEST PUSH2 0x1583 DUP3 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0x578C57B9C6614C72323596D4A9A6A5676102B3ADAA6814118C74AFE38B6C8AE6 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A207665746F3A206E6F207265717565737400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x161B PUSH2 0x292F JUMP JUMPDEST PUSH2 0x1630 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3147 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH0 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x168B PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x16F9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH4 0x703E46DD PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x171C PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x1DB JUMPI PUSH2 0x174C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x2A13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x18F6 JUMPI JUMPDEST POP PUSH2 0x16F9 JUMPI PUSH2 0x1799 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP3 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL PUSH0 SWAP2 DUP2 PUSH2 0x18C2 JUMPI JUMPDEST POP PUSH2 0x17DB JUMPI DUP4 PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 SWAP3 SUB PUSH2 0x18B0 JUMPI POP DUP2 EXTCODESIZE ISZERO PUSH2 0x189E JUMPI PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO PUSH2 0x1886 JUMPI PUSH0 DUP1 DUP4 PUSH1 0x20 PUSH2 0x215 SWAP6 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x187E JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1862 DUP4 PUSH2 0x29F8 JUMP JUMPDEST SWAP3 PUSH2 0x1870 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x29D5 JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x30A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 PUSH2 0x30A8 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x188F JUMPI STOP JUMPDEST PUSH4 0xB398979F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x2A875269 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x18EE JUMPI JUMPDEST DUP2 PUSH2 0x18DE PUSH1 0x20 SWAP4 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 DUP6 PUSH2 0x17C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18D1 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP1 POP DUP4 PUSH2 0x1781 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1931 PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x193D PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0x1A5A JUMPI JUMPDEST ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x19B4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x197B DUP6 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 MSTORE SWAP1 PUSH2 0x19AF PUSH1 0x84 DUP4 PUSH2 0x29D5 JUMP JUMPDEST PUSH2 0x3050 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xC5EFC688606A98F36C8FCC0D9C778216B9DB9AA4809A8DE9F18E3CC8885C99A7 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x47 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3167 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F72206469616D6F6E64206F776E65722063616E2063616C6C20746869732066 PUSH1 0x64 DUP3 ADD MSTORE PUSH7 0x3AB731BA34B7B7 PUSH1 0xC9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1A6B PUSH2 0x2E0C JUMP JUMPDEST AND CALLER EQ PUSH2 0x1952 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP2 DUP2 LT PUSH2 0x1CFB JUMPI PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x1CBB JUMPI PUSH2 0x1AA5 DUP3 DUP3 PUSH2 0x2BF5 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x1C59 JUMPI PUSH2 0x1ABA DUP4 PUSH2 0x2C79 JUMP JUMPDEST SWAP3 PUSH2 0x1AC8 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x29D5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x1AD7 PUSH1 0x1F NOT SWAP2 PUSH2 0x2C79 JUMP JUMPDEST ADD PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1C6D JUMPI POP POP DUP1 JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1BA5 JUMPI DUP4 PUSH1 0x40 MLOAD DUP1 SWAP2 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B19 JUMPI POP POP POP SUB SWAP1 RETURN JUMPDEST SWAP2 SWAP4 POP SWAP2 PUSH1 0x20 PUSH2 0x120 PUSH1 0x1 SWAP3 PUSH2 0x100 DUP8 MLOAD DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP4 MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP3 ADD MLOAD AND DUP6 DUP5 ADD MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B67 PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP2 DUP5 SWAP4 SWAP3 PUSH2 0x1B0B JUMP JUMPDEST PUSH2 0x1C48 PUSH2 0x1BB1 DUP3 PUSH2 0x2BC5 JUMP JUMPDEST POP PUSH2 0x1BBC DUP5 DUP5 PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 PUSH1 0x7 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1BCC DUP4 PUSH2 0x29B9 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP1 DUP2 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1C07 SWAP1 PUSH1 0xA0 SHR PUSH1 0xFF AND PUSH1 0x60 DUP6 ADD PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xE0 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1C41 DUP3 DUP9 PUSH2 0x2C90 JUMP JUMPDEST MSTORE DUP6 PUSH2 0x2C90 JUMP JUMPDEST POP PUSH0 NOT DUP2 EQ PUSH2 0x1C59 JUMPI PUSH1 0x1 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1C7C DUP2 PUSH2 0x29B9 JUMP JUMPDEST PUSH0 DUP2 MSTORE PUSH0 DUP4 DUP3 ADD MSTORE PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH0 PUSH1 0x60 DUP3 ADD MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH0 PUSH1 0xE0 DUP3 ADD MSTORE PUSH0 PUSH2 0x100 DUP3 ADD MSTORE DUP3 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x6765744465706F736974496E666F3A206F766572666C6F77 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x73746F7265644465616C733A20746F203C2066726F6D PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1D5E PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH32 0xFC30CEACBBD28B9AE09DDBB48AE26FBE5EBC9EB59BB3470290FADD187D7C4024 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1DB0 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x1DB8 PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI PUSH2 0x1DDB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2A49 JUMP JUMPDEST SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x1DFE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2984EBD PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x207E JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x201E JUMPI PUSH1 0x40 MLOAD PUSH1 0xFF DUP6 MLOAD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP10 ADD SWAP5 DUP1 DUP7 DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SLOAD AND PUSH2 0x1FC0 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP8 MLOAD DUP1 SWAP2 DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x1F5E JUMPI PUSH32 0xD255D18D8ECBCBAA2126775BA49C6BDDD4EC7BED71589374889BACDD0334BB4A SWAP1 DUP3 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1EDB DUP3 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1EFE DUP3 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1F17 DUP3 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH0 DUP5 DUP5 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1F39 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0x1F59 CALLER SWAP7 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2AAE JUMP JUMPDEST SUB SWAP1 LOG4 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2075736572546F7055703A206E6F7420656E PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x6F75676820676174657761792062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2075736572546F7055703A20746F702D7570 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x81A5908185B1C9958591E481D5CD959 PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C7920766F646F7061642063616E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B0B636103A3434B990333AB731BA34B7B7 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x20A0 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x20A6 JUMPI JUMPDEST PUSH2 0x2098 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST DUP6 PUSH2 0x1E31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x208E JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x20C6 PUSH2 0x292F JUMP JUMPDEST CALLER PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x20DF PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x2287 JUMPI PUSH1 0xFF PUSH1 0xC SLOAD AND ISZERO PUSH2 0x2234 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x21E7 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x219B JUMPI DUP1 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 TIMESTAMP SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 CALLER DUP3 MSTORE PUSH32 0x4365D6807428F602D009451DBFAC23489F573DC32F596C2E89DEE5DF45735757 PUSH1 0x20 CALLER SWAP4 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x185B1C9958591E481C995C5D595CDD1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B585B9D585B081DDA5D1A191C985DC8191A5CD8589B1959 PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH25 0x6465616C2062616C616E6365206973206E6F7420656D707479 PUSH1 0x38 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x231E PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x234E PUSH2 0x292F JUMP JUMPDEST PUSH2 0x2356 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0x23A8 SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x23CA PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x23D2 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x26A1 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x264C JUMPI DUP2 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x242C DUP5 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2445 DUP5 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2468 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2481 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x3 DUP5 DUP4 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x24A4 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x24AF PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24BB DUP2 PUSH2 0x29B9 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD CALLER DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 DUP8 DUP3 MSTORE PUSH1 0x60 DUP4 ADD PUSH2 0x24DB DUP7 DUP3 PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD DUP9 DUP2 MSTORE PUSH1 0xA0 DUP6 ADD DUP7 DUP2 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 PUSH0 DUP4 MSTORE PUSH1 0xE0 DUP8 ADD SWAP4 PUSH0 DUP6 MSTORE PUSH2 0x100 DUP9 ADD SWAP6 PUSH0 DUP8 MSTORE PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2638 JUMPI DUP1 PUSH1 0x1 PUSH2 0x2521 SWAP3 ADD PUSH1 0xD SSTORE PUSH2 0x2BC5 JUMP JUMPDEST SWAP10 SWAP1 SWAP10 PUSH2 0x2625 JUMPI MLOAD DUP10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR DUP12 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP12 ADD DUP1 SLOAD DUP5 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP8 MLOAD PUSH1 0x2 DUP1 DUP12 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP10 AND OR DUP2 SSTORE SWAP1 MLOAD SWAP7 DUP8 LT ISZERO PUSH2 0x2611 JUMPI PUSH1 0x7 SWAP7 DUP2 SLOAD SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR SWAP1 SSTORE MLOAD PUSH1 0x3 DUP8 ADD SSTORE MLOAD PUSH1 0x4 DUP7 ADD SSTORE MLOAD PUSH1 0x5 DUP6 ADD SSTORE MLOAD PUSH1 0x6 DUP5 ADD SSTORE MLOAD SWAP2 ADD SSTORE PUSH1 0xD SLOAD SWAP2 PUSH0 NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0x1C59 JUMPI PUSH2 0x25CF SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0x58A01CEC638E44FD50F881445A9CEDBC0C087BA39F0218DE7DDC71EC11801290 PUSH1 0x80 CALLER SWAP4 LOG4 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3107 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x3A206E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x30 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3107 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0xD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x2743 CALLDATASIZE PUSH2 0x2971 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND PUSH4 0x21053053 PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0x277E SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x27A1 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x27A9 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x28E3 JUMPI DUP5 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x2891 JUMPI PUSH32 0x266DB432DD60D996C5EACF4E77FB6E9D1642097FAD309F5FCE95908BB09E1594 SWAP4 PUSH2 0x286C DUP4 PUSH1 0x60 SWAP6 PUSH1 0xFF SWAP5 DUP10 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP12 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2830 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP10 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2849 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x4 DUP12 DUP12 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1286 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x40 DUP3 ADD MSTORE LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31C7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH23 0x6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x48 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31C7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x6F7420656E6F7567682062616C616E6365 PUSH1 0x78 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2638 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x2638 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2638 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x2A1F DUP3 PUSH2 0x29F8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x29D5 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1DB JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1DB JUMPI DUP2 PUSH1 0x20 PUSH2 0x2A64 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2A13 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x2611 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1DB JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2AF1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C79206465616C2063616E2063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x36103A3434B990333AB731BA34B7B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2B55 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2055736572206973207065726D616E656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x363C90333937BD32B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C59 JUMPI JUMP JUMPDEST PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x2611 JUMPI MSTORE JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0xD PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 PUSH1 0x3 SHL ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1C59 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1DB JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2C28 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3167 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x31B0B71031B0B636103A3434B990333AB731BA34B7B7 PUSH1 0x51 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2638 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2CAB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C79206F776E65722063616E206361 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x3636103A3434B990333AB731BA34B7B7 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TLOAD PUSH2 0x2D63 JUMPI PUSH1 0x1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH2 0x19AF PUSH2 0x2DA7 SWAP4 SWAP3 PUSH2 0x2D99 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD PUSH2 0x2D09 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x29D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x64 EXTCODESIZE ISZERO PUSH2 0x2E08 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA3B1B31D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x64 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x2DD9 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x2E00 JUMPI JUMPDEST DUP2 PUSH2 0x2DF4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2DE7 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x2E42 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x2A64 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x20A6 JUMPI PUSH2 0x2098 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3147 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE LOG2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x3006 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x2FB6 JUMPI PUSH2 0x2FB1 PUSH32 0x8D6AA7CD13E7031D191D6FA5505E7BCA293B15B474585BD0748C94280A1DFB0C SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F28 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F41 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F6C DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F85 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH1 0x6 DUP6 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1478 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31A7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x20656E6F75676820746F74616C2062616C616E6365 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31A7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x20656E6F7567682062616C616E6365 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0xE6A JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x309F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x307F JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x3078 JUMP JUMPDEST SWAP1 PUSH2 0x30CC JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x30BD JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xD6BDA275 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x30FD JUMPI JUMPDEST PUSH2 0x30DD JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x9996B315 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x30D5 JUMP INVALID TIMESTAMP PUSH2 0x6C61 PUSH15 0x63654B65657065723A206D6F766542 PUSH2 0x6C61 PUSH15 0x6365546F4465616C69BEE883171CCA CODESIZE GASLIMIT EXTCODECOPY 0xBB SWAP8 0xAD 0xC8 BASEFEE TIMESTAMP MCOPY LOG4 DUP15 LOG1 0xB0 0xFC 0xC4 0xC MSTORE8 0xAB 0xC3 0x2E RETURNDATACOPY 0xF7 0xB0 0xE5 0xEB 0xBE 0x21 0xD9 LOG1 0xCF OR 0x26 SLT SWAP2 0xD0 DIV 0xEB DUP6 0x25 0x23 ISZERO 0xDC 0xFC 0xBE 0xB7 PUSH25 0xEB74EA43763E23BED0342616C616E63654B65657065723A20 0x4F PUSH15 0x6C7920636F6F7264696E61746F7220 TIMESTAMP PUSH2 0x6C61 PUSH15 0x63654B65657065723A207769746864 PUSH19 0x6177526571756573743A2042616C616E63654B PUSH6 0x657065723A20 PUSH0 PUSH20 0x656E64546F4C696D626F3A206E6F7442616C616E PUSH4 0x654B6565 PUSH17 0x65723A2077697468647261774279446561 PUSH13 0x3A206E360894A13BA1A3210667 0xC8 0x28 BLOBHASH 0x2D 0xB9 DUP14 0xCA RETURNDATACOPY KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC8A574E0EE9236BF8A1F162 TLOAD 0xCA PUSH2 0x3113 0x1E DELEGATECALL 0xFB LOG2 0xE0 GAS 0xAA XOR 0x4E SWAP4 SWAP12 LOG4 0xDA CODECOPY PUSH29 0x8A9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003B 0xEC 0xC5 PUSH0 STOP CREATE 0xC5 PUSH31 0x16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A004261 PUSH13 0x616E63654B65657065723A206D PUSH16 0x766542616C616E636546726F6D446542 PUSH2 0x6C61 PUSH15 0x63654B65657065723A20766F646F70 PUSH2 0x6457 PUSH10 0x7468647261773A20A264 PUSH10 0x70667358221220482F84 PUSH15 0xC3FAD9F5C4A2898FBAB36A1E0FA7F4 0x24 BLOBHASH 0xB5 0xDA 0xD6 SWAP6 0xD9 0xB2 0x4B XOR 0xB1 BALANCE PUSH28 0x64736F6C634300081A00330000000000000000000000000000000000 ","sourceMap":"1446:13432:22:-:0;;;;;;;1171:4:1;1163:13;;1446:13432:22;;2577:5;1446:13432;;2577:5;1446:13432;8837:64:0;1446:13432:22;;;;;;7896:76:0;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;7985:34:0;7981:146;;-1:-1:-1;1446:13432:22;;;;;;;;1163:13:1;1446:13432:22;;;;;;;;;;;7981:146:0;-1:-1:-1;;;;;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;;;8837:64:0;1446:13432:22;;;8087:29:0;;1446:13432:22;;8087:29:0;7981:146;;;;7896:76;7938:23;;;2577:5:22;7938:23:0;;2577:5:22;7938:23:0;1446:13432:22;;;","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":10565,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_40398":{"entryPoint":10587,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":11266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":10771,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":10962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_contract_IERC20":{"entryPoint":10543,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_contract_IERC20t_addresst_uint256":{"entryPoint":10868,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_contract_IERC20t_addresst_uint256t_uint8":{"entryPoint":10609,"id":null,"parameterSlots":1,"returnSlots":4},"abi_decode_string":{"entryPoint":10825,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":11529,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_enum_DealDepositReason":{"entryPoint":10855,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":10926,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_address":{"entryPoint":11556,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_uint256_uint8":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_struct_DealDepositInfo_dyn":{"entryPoint":11385,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":10744,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":11180,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":11253,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10709,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_40370":{"entryPoint":10681,"id":null,"parameterSlots":1,"returnSlots":0},"fun_callOptionalReturn":{"entryPoint":12368,"id":1307,"parameterSlots":2,"returnSlots":0},"fun_freezeAccount":{"entryPoint":11867,"id":6701,"parameterSlots":1,"returnSlots":0},"fun_getL2BlockNumber":{"entryPoint":11689,"id":6100,"parameterSlots":0,"returnSlots":1},"fun_nonReentrantBefore":{"entryPoint":11581,"id":1725,"parameterSlots":0,"returnSlots":0},"fun_owner":{"entryPoint":11788,"id":6216,"parameterSlots":0,"returnSlots":1},"fun_safeTransfer":{"entryPoint":11634,"id":985,"parameterSlots":3,"returnSlots":0},"fun_sendToLimbo":{"entryPoint":11929,"id":6508,"parameterSlots":2,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":12456,"id":1565,"parameterSlots":3,"returnSlots":1},"memory_array_index_access_struct_DealDepositInfo_dyn":{"entryPoint":11408,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral_0a1b":{"entryPoint":11428,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_527d":{"entryPoint":11297,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6ec0":{"entryPoint":10986,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_8b5f":{"entryPoint":11086,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_struct_DealDepositInfo__dyn_ptr":{"entryPoint":11205,"id":null,"parameterSlots":1,"returnSlots":2},"write_to_memory_enum_DealDepositReason":{"entryPoint":11193,"id":null,"parameterSlots":2,"returnSlots":0}},"object":"6080806040526004361015610012575f80fd5b5f3560e01c90816301627f56146127355750806304930575146127185780630a009097146126f0578063116424cc146123355780631229add5146122fd5780631e4343ec146122db578063301aaac9146120ad57806331acc94214611d975780633adce71514611d395780633bf9bb0b14611a735780633eb026af146119185780634f1ef2861461170857806352d1902d146116a257806368abb5e01461166a578063788649ea146116025780637df5070f146114eb5780637fad64011461135157806382ad6f351461118057806388081fcb14610f265780638ea9811714610ead578063933a6d5e14610e7557806395e1b41814610bee578063985a3e1a14610a6c5780639cf8fc3614610a11578063ad3cb1cc146109c6578063ae77dc1014610976578063c08ea6e61461091c578063c44ead3c146108e4578063c4d66de81461077b578063d05166501461073e578063d4f4ba48146106d1578063db2aa127146105ad578063de700da61461055d578063ec178c131461051e578063edb455291461023e578063f0b7db4e14610217578063f26c159f146101df5763fac4bf22146101be575f80fd5b346101db575f3660031901126101db57602060405162093a808152f35b5f80fd5b346101db5760203660031901126101db576102156101fb61292f565b61021060018060a01b03600154163314612c21565b612e5b565b005b346101db575f3660031901126101db575f546040516001600160a01b039091168152602090f35b346101db5760203660031901126101db5761025761292f565b335f52600a60205261027060ff60405f20541615612b4e565b610278612d3d565b60ff600c5416156104bf576001600160a01b0381165f8181526004602090815260408083203384529091529020549091901561046e57815f52600460205260405f2060018060a01b0333165f5260205262093a806102da60405f205442612bf5565b1061041e575f828152600260209081526040808320338452909152902054156103c5575f828152600260209081526040808320338452909152902080546103869290916103278380612bf5565b9055835f52600560205260405f20610340838254612bf5565b905560056040518381525f6020820152855f8051602061312783398151915260403393a45f84815260046020908152604080832033808552925282209190915590612d72565b604051903382527f58c9b83f9c19bf10c1eabd844bd0371158317b08615ff5e11c9ba5761bca6ba860203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152602b60248201527f42616c616e63654b65657065723a2077697468647261773a206e6f7420656e6f60448201526a7567682062616c616e636560a81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f42616c616e63654b65657065723a2077697468647261773a20746f6f206561726044820152616c7960f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f42616c616e63654b65657065723a2077697468647261773a206e6f2072657175604482015262195cdd60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201527f42616c616e63654b65657065723a2077697468647261773a206d616e75616c206044820152701dda5d1a191c985dc8191a5cd8589b1959607a1b6064820152608490fd5b346101db5760403660031901126101db5761021561053a61292f565b610542612945565b9061055860018060a01b03600154163314612c21565b612e99565b346101db5760403660031901126101db5761057661292f565b61057e612945565b6001600160a01b039182165f908152600260209081526040808320949093168252928352819020549051908152f35b346101db5760403660031901126101db576105c661292f565b602435906105d2612d3d565b6105ed6001600160a01b036105e5612e0c565b163314612ca4565b60018060a01b03811690815f5260076020528260405f20541061066d578261062f91835f52600760205260405f20610626838254612bf5565b90553390612d72565b6040519182527fab8ee1a4a7de523166c3532be846a4090f08cce2dcad80e897e9df474fc6a85a60203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603660248201527f42616c616e63654b65657065723a206e6f7420656e6f75676820616d6f756e74604482015275081d1bc81dda5d1a191c985dc8199c9bdb481c1bdbdb60521b6064820152608490fd5b346101db5760403660031901126101db5760206107366106ef61292f565b6106f7612945565b6001600160a01b039182165f81815260028652604080822094909316808252938652828120549181526003865282812093815292855291205490612bac565b604051908152f35b346101db5760203660031901126101db576001600160a01b0361075f61292f565b165f52600a602052602060ff60405f2054166040519015158152f35b346101db5760203660031901126101db5761079461292f565b5f8051602061324783398151915254604081901c60ff161591906001600160401b038116801590816108dc575b60011490816108d2575b1590816108c9575b506108ba576001600160401b031981166001175f805160206132478339815191525582610892575b505f80546001600160a01b0319166001600160a01b03929092169190911790555f805160206132478339815191525490604082901c60ff16156108835761083e57005b60ff60401b19165f8051602061324783398151915255604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b631afcd79f60e31b5f5260045ffd5b6001600160481b0319166001600160401b01175f8051602061324783398151915255826107fb565b63f92ee8a960e01b5f5260045ffd5b905015846107d3565b303b1591506107cb565b8491506107c1565b346101db5760203660031901126101db576001600160a01b0361090561292f565b165f526009602052602060405f2054604051908152f35b346101db5760203660031901126101db576004356001600160401b0381116101db5760ff60208061095281943690600401612a49565b604051928184925191829101835e8101600b81520301902054166040519015158152f35b346101db5760403660031901126101db5761098f61292f565b610997612945565b6001600160a01b039182165f908152600860209081526040808320949093168252928352819020549051908152f35b346101db575f3660031901126101db57610a0d6040516109e76040826129d5565b60058152640352e302e360dc1b6020820152604051918291602083526020830190612aae565b0390f35b346101db575f3660031901126101db57610a3660018060a01b03600154163314612c21565b60ff19600c5416600c557fc090ba447c2876286710fa3f84277e63b8c4b98a2691afca3435f79060a716cb6020604051338152a1005b346101db5760803660031901126101db57610a8561292f565b610a8d612945565b90610a9661295b565b9060643591610aa3612d3d565b610ab66001600160a01b036105e5612e0c565b60018060a01b03821691825f52600860205260405f2060018060a01b0386165f526020528360405f205410610b8c5781610b59857f5d16c4a1e4b62879fbf1bda626a5a21daded2fc836b50947712c5d595f947fbd94610b7794875f52600860205260405f2060018060a01b038b165f5260205260405f20610b39848254612bf5565b9055875f52600960205260405f20610b52848254612bf5565b9055612d72565b6040516001600160a01b039182169690911694909182913383612d09565b0390a45f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603460248201527f42616c616e63654b65657065723a20776974686472617746726f6d4c696d626f6044820152733a206e6f7420656e6f7567682062616c616e636560601b6064820152608490fd5b346101db5760a03660031901126101db57610c0761292f565b610c0f612945565b610c1761295b565b6064359160843560ff811681036101db575f54604051632105305360e01b815233600482015290602090829060249082906001600160a01b03165afa8015610e6a57610c6a915f91610e3b575b50612aea565b60018060a01b03821693845f52600a602052610c8d60ff60405f20541615612b4e565b60018060a01b03841695865f52600a602052610cb060ff60405f20541615612b4e565b610cb8612d3d565b60018060a01b031693845f52600260205260405f20865f526020528160405f205410610ddb5786855f80516020613207833981519152610dbd7fec02109b69235dc964dc3600685d13d211d8f05b663fac885f581f60da3fc2ca9760028b855f805160206131278339815191528399825f528460205260405f20845f5260205260405f20610d478d8254612bf5565b9055825f52600560205260405f20610d608d8254612bf5565b90558b610d7260405192839283612d24565b0390a4835f528560205260405f20855f5260205260405f20610d95888254612bac565b9055835f52600560205260405f20610dae888254612bac565b90556040519182918883612d24565b0390a46040805191825260ff90921660208201529081908101610b77565b60405162461bcd60e51b815260206004820152603260248201527f42616c616e63654b65657065723a206d6f76654672656542616c616e63653a206044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b610e5d915060203d602011610e63575b610e5581836129d5565b810190612ad2565b87610c64565b503d610e4b565b6040513d5f823e3d90fd5b346101db5760203660031901126101db576001600160a01b03610e9661292f565b165f526005602052602060405f2054604051908152f35b346101db5760203660031901126101db57610ec661292f565b610ed96001600160a01b036105e5612e0c565b600180546001600160a01b0319166001600160a01b039290921691821790556040513381527f770b8c4e13577f5ef5749f2e790fdb6a3f401e49bb3eded50a027c81f72c6a7c90602090a2005b346101db57610f3436612971565b5f54604051632105305360e01b81523360048201529293919290602090829060249082906001600160a01b03165afa8015610e6a57610f79915f916111615750612aea565b60018060a01b031692835f52600a602052610f9b60ff60405f20541615612b4e565b610fa3612d3d565b60018060a01b031690815f52600360205260405f20845f526020528260405f20541061111057815f5260066020528260405f2054106110b957610b777f1e579e7583af5383169584a02ef5981c4b4f8d7ff2c36ccfdabfa6280036b3dd91835f52600360205260405f20865f5260205260405f20611022868254612bf5565b9055835f52600660205260405f2061103b868254612bf5565b9055835f52600260205260405f20865f5260205260405f2061105e868254612bac565b9055835f52600560205260405f20611077868254612bac565b9055600186855f805160206132078339815191526040518061109a338c83612d24565b0390a460405191829133968390815260ff909116602082015260400190565b60405162461bcd60e51b815260206004820152603c60248201525f8051602061326783398151915260448201527b616c3a206e6f7420656e6f75676820746f74616c2062616c616e636560201b6064820152608490fd5b60405162461bcd60e51b815260206004820152603660248201525f80516020613267833981519152604482015275616c3a206e6f7420656e6f7567682062616c616e636560501b6064820152608490fd5b61117a915060203d602011610e6357610e5581836129d5565b86610c64565b346101db5761118e36612a74565b611196612d3d565b6111ab60018060a01b03600154163314612c21565b60018060a01b03831691825f5260056020528160405f2054106112fe57825f52600260205260405f2060018060a01b0382165f526020528160405f2054106112b1578161128e7fed3f8d40e0f7f69b8048638c399ff0c54ec9b89759e2b8f2207729452e1422f19361129c93865f52600260205260405f2060018060a01b0382165f5260205260405f20611240838254612bf5565b9055865f52600560205260405f20611259838254612bf5565b905560018060a01b03811697600889895f8051602061312783398151915260405180611286338a83612d24565b0390a4612d72565b604051918291339083612d24565b0390a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603260248201525f805160206132878339815191526044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201525f805160206132878339815191526044820152776e6f7420656e6f75676820746f74616c2062616c616e636560401b6064820152608490fd5b346101db5761135f36612a74565b916113736001600160a01b036105e5612e0c565b60018060a01b031690815f52600860205260405f2060018060a01b0382165f526020528260405f20541061148d576114887fad800992a52028310197800abba2e1d874c3952c1622e9266ba9e0abac9ecbee91835f52600860205260405f2060018060a01b0382165f5260205260405f206113ef868254612bf5565b9055835f52600960205260405f20611408868254612bf5565b9055835f52600260205260405f2060018060a01b0382165f5260205260405f20611433868254612bac565b9055835f52600560205260405f2061144c868254612bac565b905560018060a01b031693600785855f8051602061320783398151915260405180611478338883612d24565b0390a46040519182913383612d09565b0390a3005b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a2066756e6446726f6d4c696d626f3a206e6f60448201526f7420656e6f7567682062616c616e636560801b6064820152608490fd5b346101db5760403660031901126101db5761150461292f565b61150c612945565b9061152260018060a01b03600154163314612c21565b60018060a01b03811690815f52600460205260405f2060018060a01b0384165f5260205260405f2054156115bd578261157a91835f52600460205260405f2060018060a01b0383165f526020525f6040812055612e99565b61158382612e5b565b6040513381526001600160a01b03909216917f578c57b9c6614c72323596d4a9a6a5676102b3adaa6814118c74afe38b6c8ae690602090a3005b60405162461bcd60e51b815260206004820152601f60248201527f42616c616e63654b65657065723a207665746f3a206e6f2072657175657374006044820152606490fd5b346101db5760203660031901126101db5761161b61292f565b61163060018060a01b03600154163314612c21565b60018060a01b0316805f52600a60205260405f2060ff1981541690555f80516020613147833981519152604080515f8152336020820152a2005b346101db5760203660031901126101db576001600160a01b0361168b61292f565b165f526007602052602060405f2054604051908152f35b346101db575f3660031901126101db577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036116f95760206040515f805160206131e78339815191528152f35b63703e46dd60e11b5f5260045ffd5b60403660031901126101db5761171c61292f565b6024356001600160401b0381116101db57366023820112156101db5761174c903690602481600401359101612a13565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163081149081156118f6575b506116f9576117996001600160a01b036105e5612e0c565b6040516352d1902d60e01b81526001600160a01b0383169290602081600481875afa5f91816118c2575b506117db5783634c9c8ce360e01b5f5260045260245ffd5b805f805160206131e78339815191528592036118b05750813b1561189e575f805160206131e783398151915280546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115611886575f8083602061021595519101845af43d1561187e573d91611862836129f8565b9261187060405194856129d5565b83523d5f602085013e6130a8565b6060916130a8565b50503461188f57005b63b398979f60e01b5f5260045ffd5b634c9c8ce360e01b5f5260045260245ffd5b632a87526960e21b5f5260045260245ffd5b9091506020813d6020116118ee575b816118de602093836129d5565b810103126101db575190856117c3565b3d91506118d1565b5f805160206131e7833981519152546001600160a01b03161415905083611781565b346101db5760403660031901126101db5761193161292f565b6024359061193d612d3d565b6001546001600160a01b031633148015611a5a575b156119f2576119b460018060a01b03821691825f52600760205260405f2061197b858254612bac565b90556040516323b872dd60e01b602082015233602482015230604482015260648082018690528152906119af6084836129d5565b613050565b6040519182527fc5efc688606a98f36c8fcc0d9c778216b9db9aa4809a8de9f18e3cc8885c99a760203393a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152604760248201525f8051602061316783398151915260448201527f6f72206469616d6f6e64206f776e65722063616e2063616c6c207468697320666064820152663ab731ba34b7b760c91b608482015260a490fd5b506001600160a01b03611a6b612e0c565b163314611952565b346101db5760403660031901126101db57600435602435818110611cfb57600d54811015611cbb57611aa58282612bf5565b9160018301809311611c5957611aba83612c79565b92611ac860405194856129d5565b808452611ad7601f1991612c79565b015f5b818110611c6d575050805b82811115611ba557836040518091602082016020835281518091526020604084019201905f5b818110611b19575050500390f35b9193509160206101206001926101008751858060a01b038151168352858060a01b03858201511685840152858060a01b036040820151166040840152611b6760608201516060850190612a67565b6080810151608084015260a081015160a084015260c081015160c084015260e081015160e08401520151610100820152019401910191849392611b0b565b611c48611bb182612bc5565b50611bbc8484612bf5565b90600760405191611bcc836129b9565b80546001600160a01b03908116845260018201548116602085015260028201549081166040850152611c079060a01c60ff1660608501612bb9565b60038101546080840152600481015460a0840152600581015460c0840152600681015460e08401520154610100820152611c418288612c90565b5285612c90565b505f198114611c5957600101611ae5565b634e487b7160e01b5f52601160045260245ffd5b602090604051611c7c816129b9565b5f81525f838201525f60408201525f60608201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015282828801015201611ada565b60405162461bcd60e51b81526020600482015260186024820152776765744465706f736974496e666f3a206f766572666c6f7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527573746f7265644465616c733a20746f203c2066726f6d60501b6044820152606490fd5b346101db575f3660031901126101db57611d5e60018060a01b03600154163314612c21565b600160ff19600c541617600c557ffc30ceacbbd28b9ae09ddbb48ae26fbe5ebc9eb59bb3470290fadd187d7c40246020604051338152a1005b346101db5760803660031901126101db57611db061292f565b611db8612945565b906044356064356001600160401b0381116101db57611ddb903690600401612a49565b9260018060a01b031691825f52600a602052611dfe60ff60405f20541615612b4e565b5f546040516302984ebd60e31b815290602090829060049082906001600160a01b03165afa908115610e6a575f9161207e575b506001600160a01b0316330361201e5760405160ff855191602081818901948086835e8101600b8152030190205416611fc0576020604051809287518091835e8101600b815203019020600160ff1982541617905560018060a01b031690815f5260076020528060405f205410611f5e577fd255d18d8ecbcbaa2126775ba49c6bddd4ec7bed71589374889bacdd0334bb4a90825f52600760205260405f20611edb828254612bf5565b9055825f52600260205260405f20845f5260205260405f20611efe828254612bac565b9055825f52600560205260405f20611f17828254612bac565b90555f84845f8051602061320783398151915260405180611f39338883612d24565b0390a46040519081526040602082015280611f5933966040830190612aae565b0390a4005b60405162461bcd60e51b815260206004820152603460248201527f42616c616e63654b65657065723a2075736572546f7055703a206e6f7420656e6044820152736f75676820676174657761792062616c616e636560601b6064820152608490fd5b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a2075736572546f7055703a20746f702d757060448201526f081a5908185b1c9958591e481d5cd95960821b6064820152608490fd5b60405162461bcd60e51b815260206004820152603260248201527f42616c616e63654b65657065723a204f6e6c7920766f646f7061642063616e2060448201527131b0b636103a3434b990333ab731ba34b7b760711b6064820152608490fd5b6120a0915060203d6020116120a6575b61209881836129d5565b810190612c02565b85611e31565b503d61208e565b346101db5760203660031901126101db576120c661292f565b335f52600a6020526120df60ff60405f20541615612b4e565b6001600160a01b03165f8181526003602090815260408083203384529091529020546122875760ff600c541615612234575f818152600260209081526040808320338452909152902054156121e7575f81815260046020908152604080832033845290915290205461219b57805f52600460205260405f2060018060a01b0333165f5260205260405f20429055604051903382527f4365d6807428f602d009451dbfac23489f573dc32f596c2e89dee5df4573575760203393a3005b60405162461bcd60e51b815260206004820152603160248201525f80516020613187833981519152604482015270185b1c9958591e481c995c5d595cdd1959607a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603260248201525f805160206131878339815191526044820152716e6f7420656e6f7567682062616c616e636560701b6064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201525f805160206131878339815191526044820152771b585b9d585b081dda5d1a191c985dc8191a5cd8589b195960421b6064820152608490fd5b60405162461bcd60e51b815260206004820152603960248201525f805160206132878339815191526044820152786465616c2062616c616e6365206973206e6f7420656d70747960381b6064820152608490fd5b346101db575f3660031901126101db57602060ff600c54166040519015158152f35b346101db5760203660031901126101db576001600160a01b0361231e61292f565b165f526006602052602060405f2054604051908152f35b346101db5760803660031901126101db5761234e61292f565b612356612945565b604435906064359060028210156101db575f54604051632105305360e01b815233600482015290602090829060249082906001600160a01b03165afa8015610e6a576123a8915f916111615750612aea565b60018060a01b031692835f52600a6020526123ca60ff60405f20541615612b4e565b6123d2612d3d565b60018060a01b031690815f52600260205260405f20845f526020528260405f2054106126a157815f5260056020528260405f20541061264c57815f52600360205260405f20845f5260205260405f2061242c848254612bac565b9055815f52600660205260405f20612445848254612bac565b9055815f52600260205260405f20845f5260205260405f20612468848254612bf5565b9055815f52600560205260405f20612481848254612bf5565b9055600384835f80516020613127833981519152604051806124a4338a83612d24565b0390a46124af612da9565b6040516124bb816129b9565b838152602081013381526040820190878252606083016124db8682612bb9565b6080840188815260a0850186815260c08601915f835260e08701935f85526101008801955f8752600d54600160401b811015612638578060016125219201600d55612bc5565b999099612625575189546001600160a01b03199081166001600160a01b03928316178b55915160018b018054841691831691909117905597516002808b018054909316919099161781559051968710156126115760079681549060ff60a01b9060a01b169060ff60a01b191617905551600387015551600486015551600585015551600684015551910155600d54915f198301928311611c59576125cf906040519586526020860190612a67565b604084015260608301527f58a01cec638e44fd50f881445a9cedbc0c087ba39f0218de7ddc71ec1180129060803393a45f5f805160206132278339815191525d005b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152603a60248201525f805160206131078339815191526044820152793a206e6f7420656e6f75676820746f74616c2062616c616e636560301b6064820152608490fd5b60405162461bcd60e51b815260206004820152603460248201525f805160206131078339815191526044820152733a206e6f7420656e6f7567682062616c616e636560601b6064820152608490fd5b346101db575f3660031901126101db576001546040516001600160a01b039091168152602090f35b346101db575f3660031901126101db576020600d54604051908152f35b346101db5761274336612971565b91909360208160248160018060a01b035f5416632105305360e01b82523360048301525afa8015610e6a5761277e915f916111615750612aea565b60018060a01b03811693845f52600a6020526127a160ff60405f20541615612b4e565b6127a9612d3d565b60018060a01b03841693845f52600260205260405f20865f526020528160405f2054106128e357845f5260056020528160405f205410612891577f266db432dd60d996c5eacf4e77fb6e9d1642097fad309f5fce95908bb09e15949361286c8360609560ff94895f52600260205260405f208b5f5260205260405f20612830848254612bf5565b9055895f52600560205260405f20612849848254612bf5565b905560048b8b5f8051602061312783398151915260405180611286338a83612d24565b604051928352166020820152336040820152a35f5f805160206132278339815191525d005b60405162461bcd60e51b815260206004820152603760248201525f805160206131c78339815191526044820152766f7420656e6f75676820746f74616c2062616c616e636560481b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201525f805160206131c78339815191526044820152706f7420656e6f7567682062616c616e636560781b6064820152608490fd5b600435906001600160a01b03821682036101db57565b602435906001600160a01b03821682036101db57565b604435906001600160a01b03821682036101db57565b60809060031901126101db576004356001600160a01b03811681036101db57906024356001600160a01b03811681036101db57906044359060643560ff811681036101db5790565b61012081019081106001600160401b0382111761263857604052565b601f909101601f19168101906001600160401b0382119082101761263857604052565b6001600160401b03811161263857601f01601f191660200190565b929192612a1f826129f8565b91612a2d60405193846129d5565b8294818452818301116101db578281602093845f960137010152565b9080601f830112156101db57816020612a6493359101612a13565b90565b9060028210156126115752565b60609060031901126101db576004356001600160a01b03811681036101db57906024356001600160a01b03811681036101db579060443590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b908160209103126101db575180151581036101db5790565b15612af157565b60405162461bcd60e51b815260206004820152602f60248201527f42616c616e63654b65657065723a204f6e6c79206465616c2063616e2063616c60448201526e36103a3434b990333ab731ba34b7b760891b6064820152608490fd5b15612b5557565b60405162461bcd60e51b815260206004820152602960248201527f42616c616e63654b65657065723a2055736572206973207065726d616e656e74604482015268363c90333937bd32b760b91b6064820152608490fd5b91908201809211611c5957565b60028210156126115752565b600d54811015612be157600d5f5260205f209060031b01905f90565b634e487b7160e01b5f52603260045260245ffd5b91908203918211611c5957565b908160209103126101db57516001600160a01b03811681036101db5790565b15612c2857565b60405162461bcd60e51b815260206004820152603660248201525f8051602061316783398151915260448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608490fd5b6001600160401b0381116126385760051b60200190565b8051821015612be15760209160051b010190565b15612cab57565b60405162461bcd60e51b815260206004820152603060248201527f42616c616e63654b65657065723a204f6e6c79206f776e65722063616e20636160448201526f3636103a3434b990333ab731ba34b7b760811b6064820152608490fd5b6001600160a01b039091168152602081019190915260400190565b9081526001600160a01b03909116602082015260400190565b5f805160206132278339815191525c612d635760015f805160206132278339815191525d565b633ee5aeb560e01b5f5260045ffd5b6119af612da79392612d9960405194859263a9059cbb60e01b602085015260248401612d09565b03601f1981018452836129d5565b565b60643b15612e085760405163a3b1b31d60e01b815260208160048160645afa908115610e6a575f91612dd9575090565b90506020813d602011612e00575b81612df4602093836129d5565b810103126101db575190565b3d9150612de7565b4390565b5f54604051638da5cb5b60e01b815290602090829060049082906001600160a01b03165afa908115610e6a575f91612e42575090565b612a64915060203d6020116120a65761209881836129d5565b60018060a01b0316805f52600a60205260405f20600160ff198254161790555f805160206131478339815191526040805160018152336020820152a2565b60018060a01b0316805f52600260205260405f2060018060a01b0383165f5260205260405f205491821561300657815f5260056020528260405f205410612fb657612fb17f8d6aa7cd13e7031d191d6fa5505e7bca293b15b474585bd0748c94280a1dfb0c91835f52600860205260405f2060018060a01b0382165f5260205260405f20612f28868254612bac565b9055835f52600960205260405f20612f41868254612bac565b9055835f52600260205260405f2060018060a01b0382165f5260205260405f20612f6c868254612bf5565b9055835f52600560205260405f20612f85868254612bf5565b905560018060a01b031693600685855f8051602061312783398151915260405180611478338883612d24565b0390a3565b60405162461bcd60e51b815260206004820152603560248201525f805160206131a783398151915260448201527420656e6f75676820746f74616c2062616c616e636560581b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201525f805160206131a783398151915260448201526e20656e6f7567682062616c616e636560881b6064820152608490fd5b905f602091828151910182855af115610e6a575f513d61309f57506001600160a01b0381163b155b61307f5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415613078565b906130cc57508051156130bd57805190602001fd5b63d6bda27560e01b5f5260045ffd5b815115806130fd575b6130dd575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b156130d556fe42616c616e63654b65657065723a206d6f766542616c616e6365546f4465616c69bee883171cca38453cbb97adc848425ea48ea1b0fcc40c53abc32e3ef7b0e5ebbe21d9a1cf17261291d004eb85252315dcfcbeb7780eb74ea43763e23bed0342616c616e63654b65657065723a204f6e6c7920636f6f7264696e61746f722042616c616e63654b65657065723a207769746864726177526571756573743a2042616c616e63654b65657065723a205f73656e64546f4c696d626f3a206e6f7442616c616e63654b65657065723a20776974686472617742794465616c3a206e360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8a574e0ee9236bf8a1f1625cca6131131ef4fba2e05aaa184e939ba4da397c8a9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0042616c616e63654b65657065723a206d6f766542616c616e636546726f6d446542616c616e63654b65657065723a20766f646f70616457697468647261773a20a2646970667358221220482f846ec3fad9f5c4a2898fbab36a1e0fa7f42449b5dad695d9b24b18b1317b64736f6c634300081a0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1627F56 EQ PUSH2 0x2735 JUMPI POP DUP1 PUSH4 0x4930575 EQ PUSH2 0x2718 JUMPI DUP1 PUSH4 0xA009097 EQ PUSH2 0x26F0 JUMPI DUP1 PUSH4 0x116424CC EQ PUSH2 0x2335 JUMPI DUP1 PUSH4 0x1229ADD5 EQ PUSH2 0x22FD JUMPI DUP1 PUSH4 0x1E4343EC EQ PUSH2 0x22DB JUMPI DUP1 PUSH4 0x301AAAC9 EQ PUSH2 0x20AD JUMPI DUP1 PUSH4 0x31ACC942 EQ PUSH2 0x1D97 JUMPI DUP1 PUSH4 0x3ADCE715 EQ PUSH2 0x1D39 JUMPI DUP1 PUSH4 0x3BF9BB0B EQ PUSH2 0x1A73 JUMPI DUP1 PUSH4 0x3EB026AF EQ PUSH2 0x1918 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x1708 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x16A2 JUMPI DUP1 PUSH4 0x68ABB5E0 EQ PUSH2 0x166A JUMPI DUP1 PUSH4 0x788649EA EQ PUSH2 0x1602 JUMPI DUP1 PUSH4 0x7DF5070F EQ PUSH2 0x14EB JUMPI DUP1 PUSH4 0x7FAD6401 EQ PUSH2 0x1351 JUMPI DUP1 PUSH4 0x82AD6F35 EQ PUSH2 0x1180 JUMPI DUP1 PUSH4 0x88081FCB EQ PUSH2 0xF26 JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0xEAD JUMPI DUP1 PUSH4 0x933A6D5E EQ PUSH2 0xE75 JUMPI DUP1 PUSH4 0x95E1B418 EQ PUSH2 0xBEE JUMPI DUP1 PUSH4 0x985A3E1A EQ PUSH2 0xA6C JUMPI DUP1 PUSH4 0x9CF8FC36 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x9C6 JUMPI DUP1 PUSH4 0xAE77DC10 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xC08EA6E6 EQ PUSH2 0x91C JUMPI DUP1 PUSH4 0xC44EAD3C EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x77B JUMPI DUP1 PUSH4 0xD0516650 EQ PUSH2 0x73E JUMPI DUP1 PUSH4 0xD4F4BA48 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0xDB2AA127 EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xDE700DA6 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0xEC178C13 EQ PUSH2 0x51E JUMPI DUP1 PUSH4 0xEDB45529 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xF0B7DB4E EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xF26C159F EQ PUSH2 0x1DF JUMPI PUSH4 0xFAC4BF22 EQ PUSH2 0x1BE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x215 PUSH2 0x1FB PUSH2 0x292F JUMP JUMPDEST PUSH2 0x210 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0x2E5B JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x257 PUSH2 0x292F JUMP JUMPDEST CALLER PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x270 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x278 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0xFF PUSH1 0xC SLOAD AND ISZERO PUSH2 0x4BF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x46E JUMPI DUP2 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH3 0x93A80 PUSH2 0x2DA PUSH1 0x40 PUSH0 KECCAK256 SLOAD TIMESTAMP PUSH2 0x2BF5 JUMP JUMPDEST LT PUSH2 0x41E JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3C5 JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x386 SWAP3 SWAP1 SWAP2 PUSH2 0x327 DUP4 DUP1 PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x340 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x5 PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH0 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP4 LOG4 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SWAP1 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 CALLER DUP3 MSTORE PUSH32 0x58C9B83F9C19BF10C1EABD844BD0371158317B08615FF5E11C9BA5761BCA6BA8 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206E6F7420656E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7567682062616C616E6365 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A20746F6F20656172 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6C79 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206E6F2072657175 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x195CDD PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2077697468647261773A206D616E75616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1DDA5D1A191C985DC8191A5CD8589B1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x215 PUSH2 0x53A PUSH2 0x292F JUMP JUMPDEST PUSH2 0x542 PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0x558 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH2 0x2E99 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x576 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x57E PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x5C6 PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x5D2 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x5ED PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST AND CALLER EQ PUSH2 0x2CA4 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x66D JUMPI DUP3 PUSH2 0x62F SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x626 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE CALLER SWAP1 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xAB8EE1A4A7DE523166C3532BE846A4090F08CCE2DCAD80E897E9DF474FC6A85A PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A206E6F7420656E6F75676820616D6F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x81D1BC81DDA5D1A191C985DC8199C9BDB481C1BDBDB PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH2 0x736 PUSH2 0x6EF PUSH2 0x292F JUMP JUMPDEST PUSH2 0x6F7 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP7 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP1 DUP3 MSTORE SWAP4 DUP7 MSTORE DUP3 DUP2 KECCAK256 SLOAD SWAP2 DUP2 MSTORE PUSH1 0x3 DUP7 MSTORE DUP3 DUP2 KECCAK256 SWAP4 DUP2 MSTORE SWAP3 DUP6 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x75F PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x794 PUSH2 0x292F JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x40 DUP2 SWAP1 SHR PUSH1 0xFF AND ISZERO SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 ISZERO SWAP1 DUP2 PUSH2 0x8DC JUMPI JUMPDEST PUSH1 0x1 EQ SWAP1 DUP2 PUSH2 0x8D2 JUMPI JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x8C9 JUMPI JUMPDEST POP PUSH2 0x8BA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP2 AND PUSH1 0x1 OR PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE DUP3 PUSH2 0x892 JUMPI JUMPDEST POP PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 PUSH1 0x40 DUP3 SWAP1 SHR PUSH1 0xFF AND ISZERO PUSH2 0x883 JUMPI PUSH2 0x83E JUMPI STOP JUMPDEST PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH4 0x1AFCD79F PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x48 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL ADD OR PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3247 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE DUP3 PUSH2 0x7FB JUMP JUMPDEST PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP ISZERO DUP5 PUSH2 0x7D3 JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP PUSH2 0x7CB JUMP JUMPDEST DUP5 SWAP2 POP PUSH2 0x7C1 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x905 PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI PUSH1 0xFF PUSH1 0x20 DUP1 PUSH2 0x952 DUP2 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2A49 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP2 DUP5 SWAP3 MLOAD SWAP2 DUP3 SWAP2 ADD DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x98F PUSH2 0x292F JUMP JUMPDEST PUSH2 0x997 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA0D PUSH1 0x40 MLOAD PUSH2 0x9E7 PUSH1 0x40 DUP3 PUSH2 0x29D5 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x352E302E3 PUSH1 0xDC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x2AAE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA36 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xC SLOAD AND PUSH1 0xC SSTORE PUSH32 0xC090BA447C2876286710FA3F84277E63B8C4B98A2691AFCA3435F79060A716CB PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xA85 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xA8D PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0xA96 PUSH2 0x295B JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH2 0xAA3 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0xAB6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0xB8C JUMPI DUP2 PUSH2 0xB59 DUP6 PUSH32 0x5D16C4A1E4B62879FBF1BDA626A5A21DADED2FC836B50947712C5D595F947FBD SWAP5 PUSH2 0xB77 SWAP5 DUP8 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xB39 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP8 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xB52 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP7 SWAP1 SWAP2 AND SWAP5 SWAP1 SWAP2 DUP3 SWAP2 CALLER DUP4 PUSH2 0x2D09 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A20776974686472617746726F6D4C696D626F PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xC07 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xC0F PUSH2 0x2945 JUMP JUMPDEST PUSH2 0xC17 PUSH2 0x295B JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0xC6A SWAP2 PUSH0 SWAP2 PUSH2 0xE3B JUMPI JUMPDEST POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xC8D PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xCB0 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0xCB8 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0xDDB JUMPI DUP7 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xDBD PUSH32 0xEC02109B69235DC964DC3600685D13D211D8F05B663FAC885F581F60DA3FC2CA SWAP8 PUSH1 0x2 DUP12 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 SWAP10 DUP3 PUSH0 MSTORE DUP5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD47 DUP14 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD60 DUP14 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP12 PUSH2 0xD72 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 DUP4 PUSH0 MSTORE DUP6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP6 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xD95 DUP9 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0xDAE DUP9 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 DUP2 ADD PUSH2 0xB77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A206D6F76654672656542616C616E63653A20 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xE5D SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE63 JUMPI JUMPDEST PUSH2 0xE55 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2AD2 JUMP JUMPDEST DUP8 PUSH2 0xC64 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE4B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xE96 PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0xEC6 PUSH2 0x292F JUMP JUMPDEST PUSH2 0xED9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x770B8C4E13577F5EF5749F2E790FDB6A3F401E49BB3EDED50A027C81F72C6A7C SWAP1 PUSH1 0x20 SWAP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0xF34 CALLDATASIZE PUSH2 0x2971 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0xF79 SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0xF9B PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0xFA3 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x1110 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x10B9 JUMPI PUSH2 0xB77 PUSH32 0x1E579E7583AF5383169584A02EF5981C4B4F8D7FF2C36CCFDABFA6280036B3DD SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1022 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x103B DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x105E DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1077 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP7 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x109A CALLER DUP13 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER SWAP7 DUP4 SWAP1 DUP2 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3267 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH28 0x616C3A206E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x20 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3267 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x616C3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x117A SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE63 JUMPI PUSH2 0xE55 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP7 PUSH2 0xC64 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x118E CALLDATASIZE PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x1196 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x11AB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x12FE JUMPI DUP3 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x12B1 JUMPI DUP2 PUSH2 0x128E PUSH32 0xED3F8D40E0F7F69B8048638C399FF0C54EC9B89759E2B8F2207729452E1422F1 SWAP4 PUSH2 0x129C SWAP4 DUP7 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1240 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP7 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1259 DUP4 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP8 PUSH1 0x8 DUP10 DUP10 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1286 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x2D72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER SWAP1 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x6E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x40 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x135F CALLDATASIZE PUSH2 0x2A74 JUMP JUMPDEST SWAP2 PUSH2 0x1373 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x148D JUMPI PUSH2 0x1488 PUSH32 0xAD800992A52028310197800ABBA2E1D874C3952C1622E9266BA9E0ABAC9ECBEE SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x13EF DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1408 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1433 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x144C DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH1 0x7 DUP6 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1478 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 CALLER DUP4 PUSH2 0x2D09 JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2066756E6446726F6D4C696D626F3A206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x7420656E6F7567682062616C616E6365 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1504 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x150C PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH2 0x1522 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD ISZERO PUSH2 0x15BD JUMPI DUP3 PUSH2 0x157A SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2E99 JUMP JUMPDEST PUSH2 0x1583 DUP3 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0x578C57B9C6614C72323596D4A9A6A5676102B3ADAA6814118C74AFE38B6C8AE6 SWAP1 PUSH1 0x20 SWAP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A207665746F3A206E6F207265717565737400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x161B PUSH2 0x292F JUMP JUMPDEST PUSH2 0x1630 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3147 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH0 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x168B PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x16F9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH4 0x703E46DD PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x171C PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x1DB JUMPI PUSH2 0x174C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x2A13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x18F6 JUMPI JUMPDEST POP PUSH2 0x16F9 JUMPI PUSH2 0x1799 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5E5 PUSH2 0x2E0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP3 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL PUSH0 SWAP2 DUP2 PUSH2 0x18C2 JUMPI JUMPDEST POP PUSH2 0x17DB JUMPI DUP4 PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 SWAP3 SUB PUSH2 0x18B0 JUMPI POP DUP2 EXTCODESIZE ISZERO PUSH2 0x189E JUMPI PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO PUSH2 0x1886 JUMPI PUSH0 DUP1 DUP4 PUSH1 0x20 PUSH2 0x215 SWAP6 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x187E JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1862 DUP4 PUSH2 0x29F8 JUMP JUMPDEST SWAP3 PUSH2 0x1870 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x29D5 JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x30A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 PUSH2 0x30A8 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x188F JUMPI STOP JUMPDEST PUSH4 0xB398979F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x2A875269 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x18EE JUMPI JUMPDEST DUP2 PUSH2 0x18DE PUSH1 0x20 SWAP4 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 DUP6 PUSH2 0x17C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18D1 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31E7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP1 POP DUP4 PUSH2 0x1781 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1931 PUSH2 0x292F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x193D PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0x1A5A JUMPI JUMPDEST ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x19B4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x197B DUP6 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 MSTORE SWAP1 PUSH2 0x19AF PUSH1 0x84 DUP4 PUSH2 0x29D5 JUMP JUMPDEST PUSH2 0x3050 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xC5EFC688606A98F36C8FCC0D9C778216B9DB9AA4809A8DE9F18E3CC8885C99A7 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x47 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3167 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F72206469616D6F6E64206F776E65722063616E2063616C6C20746869732066 PUSH1 0x64 DUP3 ADD MSTORE PUSH7 0x3AB731BA34B7B7 PUSH1 0xC9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1A6B PUSH2 0x2E0C JUMP JUMPDEST AND CALLER EQ PUSH2 0x1952 JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP2 DUP2 LT PUSH2 0x1CFB JUMPI PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x1CBB JUMPI PUSH2 0x1AA5 DUP3 DUP3 PUSH2 0x2BF5 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x1C59 JUMPI PUSH2 0x1ABA DUP4 PUSH2 0x2C79 JUMP JUMPDEST SWAP3 PUSH2 0x1AC8 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x29D5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x1AD7 PUSH1 0x1F NOT SWAP2 PUSH2 0x2C79 JUMP JUMPDEST ADD PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1C6D JUMPI POP POP DUP1 JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1BA5 JUMPI DUP4 PUSH1 0x40 MLOAD DUP1 SWAP2 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B19 JUMPI POP POP POP SUB SWAP1 RETURN JUMPDEST SWAP2 SWAP4 POP SWAP2 PUSH1 0x20 PUSH2 0x120 PUSH1 0x1 SWAP3 PUSH2 0x100 DUP8 MLOAD DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP4 MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP3 ADD MLOAD AND DUP6 DUP5 ADD MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B67 PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP2 DUP5 SWAP4 SWAP3 PUSH2 0x1B0B JUMP JUMPDEST PUSH2 0x1C48 PUSH2 0x1BB1 DUP3 PUSH2 0x2BC5 JUMP JUMPDEST POP PUSH2 0x1BBC DUP5 DUP5 PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 PUSH1 0x7 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1BCC DUP4 PUSH2 0x29B9 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP1 DUP2 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1C07 SWAP1 PUSH1 0xA0 SHR PUSH1 0xFF AND PUSH1 0x60 DUP6 ADD PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xE0 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x1C41 DUP3 DUP9 PUSH2 0x2C90 JUMP JUMPDEST MSTORE DUP6 PUSH2 0x2C90 JUMP JUMPDEST POP PUSH0 NOT DUP2 EQ PUSH2 0x1C59 JUMPI PUSH1 0x1 ADD PUSH2 0x1AE5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1C7C DUP2 PUSH2 0x29B9 JUMP JUMPDEST PUSH0 DUP2 MSTORE PUSH0 DUP4 DUP3 ADD MSTORE PUSH0 PUSH1 0x40 DUP3 ADD MSTORE PUSH0 PUSH1 0x60 DUP3 ADD MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH0 PUSH1 0xE0 DUP3 ADD MSTORE PUSH0 PUSH2 0x100 DUP3 ADD MSTORE DUP3 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x6765744465706F736974496E666F3A206F766572666C6F77 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x73746F7265644465616C733A20746F203C2066726F6D PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1D5E PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 SLOAD AND CALLER EQ PUSH2 0x2C21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH32 0xFC30CEACBBD28B9AE09DDBB48AE26FBE5EBC9EB59BB3470290FADD187D7C4024 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x1DB0 PUSH2 0x292F JUMP JUMPDEST PUSH2 0x1DB8 PUSH2 0x2945 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1DB JUMPI PUSH2 0x1DDB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2A49 JUMP JUMPDEST SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x1DFE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2984EBD PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x207E JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x201E JUMPI PUSH1 0x40 MLOAD PUSH1 0xFF DUP6 MLOAD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP10 ADD SWAP5 DUP1 DUP7 DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SLOAD AND PUSH2 0x1FC0 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP8 MLOAD DUP1 SWAP2 DUP4 MCOPY DUP2 ADD PUSH1 0xB DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x1F5E JUMPI PUSH32 0xD255D18D8ECBCBAA2126775BA49C6BDDD4EC7BED71589374889BACDD0334BB4A SWAP1 DUP3 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1EDB DUP3 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1EFE DUP3 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1F17 DUP3 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE PUSH0 DUP5 DUP5 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3207 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1F39 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0x1F59 CALLER SWAP7 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2AAE JUMP JUMPDEST SUB SWAP1 LOG4 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2075736572546F7055703A206E6F7420656E PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x6F75676820676174657761792062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2075736572546F7055703A20746F702D7570 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x81A5908185B1C9958591E481D5CD959 PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C7920766F646F7061642063616E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B0B636103A3434B990333AB731BA34B7B7 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x20A0 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x20A6 JUMPI JUMPDEST PUSH2 0x2098 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST DUP6 PUSH2 0x1E31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x208E JUMP JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x20C6 PUSH2 0x292F JUMP JUMPDEST CALLER PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x20DF PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x2287 JUMPI PUSH1 0xFF PUSH1 0xC SLOAD AND ISZERO PUSH2 0x2234 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x21E7 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x219B JUMPI DUP1 PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 TIMESTAMP SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 CALLER DUP3 MSTORE PUSH32 0x4365D6807428F602D009451DBFAC23489F573DC32F596C2E89DEE5DF45735757 PUSH1 0x20 CALLER SWAP4 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x185B1C9958591E481C995C5D595CDD1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3187 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B585B9D585B081DDA5D1A191C985DC8191A5CD8589B1959 PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3287 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH25 0x6465616C2062616C616E6365206973206E6F7420656D707479 PUSH1 0x38 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x231E PUSH2 0x292F JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x234E PUSH2 0x292F JUMP JUMPDEST PUSH2 0x2356 PUSH2 0x2945 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x1DB JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21053053 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0x23A8 SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x23CA PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x23D2 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x26A1 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x264C JUMPI DUP2 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x242C DUP5 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2445 DUP5 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2468 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2481 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x3 DUP5 DUP4 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x24A4 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x24AF PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24BB DUP2 PUSH2 0x29B9 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD CALLER DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 DUP8 DUP3 MSTORE PUSH1 0x60 DUP4 ADD PUSH2 0x24DB DUP7 DUP3 PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD DUP9 DUP2 MSTORE PUSH1 0xA0 DUP6 ADD DUP7 DUP2 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 PUSH0 DUP4 MSTORE PUSH1 0xE0 DUP8 ADD SWAP4 PUSH0 DUP6 MSTORE PUSH2 0x100 DUP9 ADD SWAP6 PUSH0 DUP8 MSTORE PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2638 JUMPI DUP1 PUSH1 0x1 PUSH2 0x2521 SWAP3 ADD PUSH1 0xD SSTORE PUSH2 0x2BC5 JUMP JUMPDEST SWAP10 SWAP1 SWAP10 PUSH2 0x2625 JUMPI MLOAD DUP10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR DUP12 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP12 ADD DUP1 SLOAD DUP5 AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP8 MLOAD PUSH1 0x2 DUP1 DUP12 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP10 AND OR DUP2 SSTORE SWAP1 MLOAD SWAP7 DUP8 LT ISZERO PUSH2 0x2611 JUMPI PUSH1 0x7 SWAP7 DUP2 SLOAD SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR SWAP1 SSTORE MLOAD PUSH1 0x3 DUP8 ADD SSTORE MLOAD PUSH1 0x4 DUP7 ADD SSTORE MLOAD PUSH1 0x5 DUP6 ADD SSTORE MLOAD PUSH1 0x6 DUP5 ADD SSTORE MLOAD SWAP2 ADD SSTORE PUSH1 0xD SLOAD SWAP2 PUSH0 NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0x1C59 JUMPI PUSH2 0x25CF SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0x58A01CEC638E44FD50F881445A9CEDBC0C087BA39F0218DE7DDC71EC11801290 PUSH1 0x80 CALLER SWAP4 LOG4 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3107 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x3A206E6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x30 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3107 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A206E6F7420656E6F7567682062616C616E6365 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 PUSH1 0xD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH2 0x2743 CALLDATASIZE PUSH2 0x2971 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND PUSH4 0x21053053 PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0xE6A JUMPI PUSH2 0x277E SWAP2 PUSH0 SWAP2 PUSH2 0x1161 JUMPI POP PUSH2 0x2AEA JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH2 0x27A1 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0x2B4E JUMP JUMPDEST PUSH2 0x27A9 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x28E3 JUMPI DUP5 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x2891 JUMPI PUSH32 0x266DB432DD60D996C5EACF4E77FB6E9D1642097FAD309F5FCE95908BB09E1594 SWAP4 PUSH2 0x286C DUP4 PUSH1 0x60 SWAP6 PUSH1 0xFF SWAP5 DUP10 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP12 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2830 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP10 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2849 DUP5 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x4 DUP12 DUP12 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1286 CALLER DUP11 DUP4 PUSH2 0x2D24 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x40 DUP3 ADD MSTORE LOG3 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31C7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH23 0x6F7420656E6F75676820746F74616C2062616C616E6365 PUSH1 0x48 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31C7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x6F7420656E6F7567682062616C616E6365 PUSH1 0x78 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2638 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x2638 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2638 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x2A1F DUP3 PUSH2 0x29F8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x29D5 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1DB JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1DB JUMPI DUP2 PUSH1 0x20 PUSH2 0x2A64 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2A13 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x2611 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1DB JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2AF1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C79206465616C2063616E2063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x36103A3434B990333AB731BA34B7B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2B55 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A2055736572206973207065726D616E656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x363C90333937BD32B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1C59 JUMPI JUMP JUMPDEST PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x2611 JUMPI MSTORE JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0xD PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 PUSH1 0x3 SHL ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1C59 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1DB JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1DB JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2C28 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3167 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x31B0B71031B0B636103A3434B990333AB731BA34B7B7 PUSH1 0x51 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2638 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2BE1 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2CAB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E63654B65657065723A204F6E6C79206F776E65722063616E206361 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x3636103A3434B990333AB731BA34B7B7 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TLOAD PUSH2 0x2D63 JUMPI PUSH1 0x1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3227 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE TSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH2 0x19AF PUSH2 0x2DA7 SWAP4 SWAP3 PUSH2 0x2D99 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD PUSH2 0x2D09 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x29D5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x64 EXTCODESIZE ISZERO PUSH2 0x2E08 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA3B1B31D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x64 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x2DD9 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x2E00 JUMPI JUMPDEST DUP2 PUSH2 0x2DF4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x29D5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2DE7 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6A JUMPI PUSH0 SWAP2 PUSH2 0x2E42 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x2A64 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x20A6 JUMPI PUSH2 0x2098 DUP2 DUP4 PUSH2 0x29D5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3147 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE LOG2 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP2 DUP3 ISZERO PUSH2 0x3006 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SLOAD LT PUSH2 0x2FB6 JUMPI PUSH2 0x2FB1 PUSH32 0x8D6AA7CD13E7031D191D6FA5505E7BCA293B15B474585BD0748C94280A1DFB0C SWAP2 DUP4 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F28 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F41 DUP7 DUP3 SLOAD PUSH2 0x2BAC JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F6C DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x2F85 DUP7 DUP3 SLOAD PUSH2 0x2BF5 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH1 0x6 DUP6 DUP6 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3127 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x1478 CALLER DUP9 DUP4 PUSH2 0x2D24 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31A7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x20656E6F75676820746F74616C2062616C616E6365 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x31A7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x20656E6F7567682062616C616E6365 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0xE6A JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x309F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x307F JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x3078 JUMP JUMPDEST SWAP1 PUSH2 0x30CC JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x30BD JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xD6BDA275 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x30FD JUMPI JUMPDEST PUSH2 0x30DD JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x9996B315 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x30D5 JUMP INVALID TIMESTAMP PUSH2 0x6C61 PUSH15 0x63654B65657065723A206D6F766542 PUSH2 0x6C61 PUSH15 0x6365546F4465616C69BEE883171CCA CODESIZE GASLIMIT EXTCODECOPY 0xBB SWAP8 0xAD 0xC8 BASEFEE TIMESTAMP MCOPY LOG4 DUP15 LOG1 0xB0 0xFC 0xC4 0xC MSTORE8 0xAB 0xC3 0x2E RETURNDATACOPY 0xF7 0xB0 0xE5 0xEB 0xBE 0x21 0xD9 LOG1 0xCF OR 0x26 SLT SWAP2 0xD0 DIV 0xEB DUP6 0x25 0x23 ISZERO 0xDC 0xFC 0xBE 0xB7 PUSH25 0xEB74EA43763E23BED0342616C616E63654B65657065723A20 0x4F PUSH15 0x6C7920636F6F7264696E61746F7220 TIMESTAMP PUSH2 0x6C61 PUSH15 0x63654B65657065723A207769746864 PUSH19 0x6177526571756573743A2042616C616E63654B PUSH6 0x657065723A20 PUSH0 PUSH20 0x656E64546F4C696D626F3A206E6F7442616C616E PUSH4 0x654B6565 PUSH17 0x65723A2077697468647261774279446561 PUSH13 0x3A206E360894A13BA1A3210667 0xC8 0x28 BLOBHASH 0x2D 0xB9 DUP14 0xCA RETURNDATACOPY KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC8A574E0EE9236BF8A1F162 TLOAD 0xCA PUSH2 0x3113 0x1E DELEGATECALL 0xFB LOG2 0xE0 GAS 0xAA XOR 0x4E SWAP4 SWAP12 LOG4 0xDA CODECOPY PUSH29 0x8A9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003B 0xEC 0xC5 PUSH0 STOP CREATE 0xC5 PUSH31 0x16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A004261 PUSH13 0x616E63654B65657065723A206D PUSH16 0x766542616C616E636546726F6D446542 PUSH2 0x6C61 PUSH15 0x63654B65657065723A20766F646F70 PUSH2 0x6457 PUSH10 0x7468647261773A20A264 PUSH10 0x70667358221220482F84 PUSH15 0xC3FAD9F5C4A2898FBAB36A1E0FA7F4 0x24 BLOBHASH 0xB5 0xDA 0xD6 SWAP6 0xD9 0xB2 0x4B XOR 0xB1 BALANCE PUSH28 0x64736F6C634300081A00330000000000000000000000000000000000 ","sourceMap":"1446:13432:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;;1629:6;1446:13432;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;7422:4;1446:13432;;:::i;:::-;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;7422:4;:::i;:::-;1446:13432;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;12930:10;1446:13432;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1060:103:15;;:::i;:::-;1446:13432:22;12973:21;1446:13432;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;12930:10;1446:13432;;;;;;;;;;;13066:42;1446:13432;;;;;;;;;;;;;;;;12930:10;1446:13432;-1:-1:-1;1446:13432:22;;;1629:6;13166:56;1446:13432;-1:-1:-1;1446:13432:22;;13166:15;:56;:::i;:::-;:82;1446:13432;;;;;;13305:12;1446:13432;;;;;;;;12930:10;1446:13432;;;;;;;;13305:35;1446:13432;;;;;;13305:12;1446:13432;;;;;;;;12930:10;1446:13432;;;;;;;;;13638:6;;1446:13432;;4364:35;1446:13432;;4364:35;:::i;:::-;1446:13432;;;;;13503:29;1446:13432;;;;;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;13503:29;1446:13432;;;;;;;;;;12930:10;-1:-1:-1;;;;;;;;;;;1446:13432:22;12930:10;4457:54;;1446:13432;;;;;;;;;;;;;12930:10;1446:13432;;;;;;;;;;;12930:10;13638:6;:::i;:::-;1446:13432;;12930:10;;1446:13432;;13660:50;1446:13432;12930:10;13660:50;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;7658:4;1446:13432;;:::i;:::-;;;:::i;:::-;;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;7658:4;:::i;1446:13432::-;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1446:13432:22;;;;;;;4773:12;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;1060:103:15;;;:::i;:::-;2772:82:22;-1:-1:-1;;;;;2794:7:22;;:::i;:::-;1446:13432;2780:10;:21;2772:82;:::i;:::-;1446:13432;;;;;;;;;;;6024:11;1446:13432;;;;;;;6024:28;1446:13432;;;6190:6;1446:13432;;;;6024:11;1446:13432;;;;;6121:28;1446:13432;;;6121:28;:::i;:::-;1446:13432;;2780:10;6190:6;;:::i;:::-;1446:13432;;;;;6212:39;1446:13432;2780:10;6212:39;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;4912:53;1446:13432;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1446:13432:22;;;;;;;4912:12;1446:13432;;;;;;;;;;;;;;;;;;;;;;;4940:12;1446:13432;;;;;;;;;;;;;;;4912:53;:::i;:::-;1446:13432;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;:::i;:::-;;;;2438:50;1446:13432;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;;;;4301:16:0;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;;4726:16:0;;;;:34;;1446:13432:22;4805:1:0;4790:16;:50;;;;1446:13432:22;4855:13:0;:30;;;;1446:13432:22;4851:91:0;;;-1:-1:-1;;;;;;1446:13432:22;;4805:1:0;1446:13432:22;-1:-1:-1;;;;;;;;;;;1446:13432:22;;4979:67:0;;1446:13432:22;-1:-1:-1;1446:13432:22;;;-1:-1:-1;;;;;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;;;;;7150:18:0;7146:73;;5066:101;;1446:13432:22;5066:101:0;-1:-1:-1;;;;1446:13432:22;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;4805:1:0;1446:13432:22;;5142:14:0;;1446:13432:22;;5142:14:0;1446:13432:22;7146:73:0;7191:17;;;1446:13432:22;7191:17:0;1446:13432:22;;7191:17:0;4979:67;-1:-1:-1;;;;;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;-1:-1:-1;;;;;;;;;;;1446:13432:22;4979:67:0;;;4851:91;4908:23;;;1446:13432:22;4908:23:0;1446:13432:22;;4908:23:0;4855:30;4872:13;;;4855:30;;;4790:50;4818:4;4810:25;:30;;-1:-1:-1;4790:50:0;;4726:34;;;-1:-1:-1;4726:34:0;;1446:13432:22;;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;:::i;:::-;;;;2374:57;1446:13432;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2495:39;1446:13432;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1446:13432:22;;;;;;;2290:78;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;1446:13432;;6486:29;1446:13432;;6486:29;1446:13432;6530:34;1446:13432;;;3243:10;1446:13432;;6530:34;1446:13432;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;1060:103:15;;;:::i;:::-;2772:82:22;-1:-1:-1;;;;;2794:7:22;;:::i;2772:82::-;1446:13432;;;;;;;;;;;14073:5;1446:13432;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;14073:28;1446:13432;;;14266:6;1446:13432;14288:55;1446:13432;14288:55;1446:13432;;;;14073:5;1446:13432;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;14168:28;1446:13432;;;14168:28;:::i;:::-;1446:13432;;;;;14206:10;1446:13432;;;;;14206:27;1446:13432;;;14206:27;:::i;:::-;1446:13432;;14266:6;:::i;:::-;1446:13432;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;2780:10;1446:13432;14288:55;:::i;:::-;;;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;2916:41:22;;2946:10;1446:13432;2916:41;;1446:13432;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;2916:41;;;;;;2908:101;2916:41;1446:13432;2916:41;;;1446:13432;2908:101;;:::i;:::-;1446:13432;;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1446:13432;;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1060:103:15;;:::i;:::-;1446:13432:22;;;;;;;;;;9522:12;1446:13432;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;9522:35;1446:13432;;4364:19;;-1:-1:-1;;;;;;;;;;;4118:54:22;9814:47;4364:19;9522:12;4364:19;;-1:-1:-1;;;;;;;;;;;4364:19:22;;1446:13432;;;;;;;;;;;;;;;;;4364:35;1446:13432;;;4364:35;:::i;:::-;1446:13432;;;;;4409:16;1446:13432;;;;;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;;4457:54;1446:13432;;4457:54;;;;;:::i;:::-;;;;1446:13432;;;;;;;;;;;;;;;;;4025:35;1446:13432;;;4025:35;:::i;:::-;1446:13432;;;;;4409:16;1446:13432;;;;;4070:33;1446:13432;;;4070:33;:::i;:::-;1446:13432;;;;4118:54;;;;;;:::i;:::-;;;;1446:13432;;;;;;;;;;;;;;;;;;;9814:47;1446:13432;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;2916:41;;;;1446:13432;2916:41;1446:13432;2916:41;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1446:13432;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;:::i;:::-;;;;2086:63;1446:13432;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;2772:82;-1:-1:-1;;;;;2794:7:22;;:::i;2772:82::-;1446:13432;;;-1:-1:-1;;;;;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;2780:10;1446:13432;;13880:40;;1446:13432;;13880:40;1446:13432;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;2916:41:22;;2946:10;1446:13432;2916:41;;1446:13432;;;;;;;;;;2916:41;;1446:13432;;-1:-1:-1;;;;;1446:13432:22;2916:41;;;;;;2908:101;2916:41;1446:13432;2916:41;;;2908:101;;:::i;:::-;1446:13432;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1060:103:15;;:::i;:::-;1446:13432:22;;;;;;;;;;8839:12;1446:13432;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;8839:35;1446:13432;;;;;8951:17;1446:13432;;;;;;;8951:34;1446:13432;;9254:55;;1446:13432;;;;8839:12;1446:13432;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;9060:35;1446:13432;;;9060:35;:::i;:::-;1446:13432;;;;;8951:17;1446:13432;;;;;9105:34;1446:13432;;;9105:34;:::i;:::-;1446:13432;;;;;4025:12;1446:13432;;;;;;;;;;;;;4025:35;1446:13432;;;4025:35;:::i;:::-;1446:13432;;;;;4070:16;1446:13432;;;;;4070:33;1446:13432;;;4070:33;:::i;:::-;1446:13432;;9190:34;1446:13432;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;2946:10;4118:54;2946:10;4118:54;;;:::i;:::-;;;;1446:13432;;2946:10;;;;9254:55;;1446:13432;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;2916:41;1446:13432;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;2916:41;1446:13432;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;2916:41;;;;1446:13432;2916:41;1446:13432;2916:41;;;;;;;:::i;:::-;;;;1446:13432;;;;;;;:::i;:::-;1060:103:15;;:::i;:::-;3235:92:22;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;1446:13432;;;;;;;;;;;6757:16;1446:13432;;;;;;;6757:33;1446:13432;;;;;6869:12;1446:13432;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;6869:35;1446:13432;;4364:19;7084:6;7106:41;4364:19;7106:41;4364:19;1446:13432;;;6869:12;1446:13432;;;;;;;;;;;;;;;;;;;4364:35;1446:13432;;;4364:35;:::i;:::-;1446:13432;;;;;6757:16;1446:13432;;;;;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;;;;;;;;;7010:26;1446:13432;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;3243:10;4457:54;3243:10;4457:54;;;:::i;:::-;;;;7084:6;:::i;:::-;1446:13432;;3243:10;;;;7106:41;;;:::i;:::-;;;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;:::i;:::-;;2772:82;-1:-1:-1;;;;;2794:7:22;;:::i;2772:82::-;1446:13432;;;;;;;;;;14467:5;1446:13432;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;14467:28;1446:13432;;14737:48;;1446:13432;;;;14467:5;1446:13432;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;14558:28;1446:13432;;;14558:28;:::i;:::-;1446:13432;;;;;14596:10;1446:13432;;;;;14596:27;1446:13432;;;14596:27;:::i;:::-;1446:13432;;;;;4025:12;1446:13432;;;;;;;;;;;;;;;;;;;4025:35;1446:13432;;;4025:35;:::i;:::-;1446:13432;;;;;4070:16;1446:13432;;;;;4070:33;1446:13432;;;4070:33;:::i;:::-;1446:13432;;;;;;;;;14674:35;1446:13432;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;2780:10;4118:54;2780:10;4118:54;;;:::i;:::-;;;;1446:13432;;2780:10;;;;14737:48;;:::i;:::-;;;;1446:13432;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;;7772:36;1446:13432;;;7920:4;1446:13432;;;;;;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;;;;7920:4;:::i;:::-;7956;;;:::i;:::-;1446:13432;;3243:10;1446:13432;;-1:-1:-1;;;;;1446:13432:22;;;;7976:40;;1446:13432;;7976:40;1446:13432;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;1446:13432;;;;;;;;;7229:6;1446:13432;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;;;3243:10;1446:13432;;;;7265:51;1446:13432;;;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;:::i;:::-;;;;2226:58;1446:13432;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;5115:6:1;-1:-1:-1;;;;;1446:13432:22;5106:4:1;5098:23;5094:145;;1446:13432:22;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;5094:145:1;4869:29;;;1446:13432:22;5199:29:1;1446:13432:22;;5199:29:1;1446:13432:22;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4692:6:1;1446:13432:22;4683:4:1;4675:23;;;:120;;;;1446:13432:22;4658:251:1;;;2772:82:22;-1:-1:-1;;;;;2794:7:22;;:::i;2772:82::-;1446:13432;;-1:-1:-1;;;6156:52:1;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;6156:52:1;;1446:13432:22;;6156:52:1;;;1446:13432:22;-1:-1:-1;6152:437:1;;1815:47:8;;;;1446:13432:22;6518:60:1;1446:13432:22;;;;6518:60:1;6152:437;6250:40;-1:-1:-1;;;;;;;;;;;6250:40:1;;;6246:120;;1758:29:8;;;:34;1754:119;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;-1:-1:-1;;;;;;1446:13432:22;;;;;2417:36:8;-1:-1:-1;;2417:36:8;1446:13432:22;;2468:15:8;:11;;1446:13432:22;4049:25:12;;1446:13432:22;4091:55:12;4049:25;;;;;;;1446:13432:22;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;4091:55:12;:::i;1446:13432:22:-;;;4091:55:12;:::i;2464:148:8:-;6173:9;;;6169:70;;1446:13432:22;6169:70:8;6209:19;;;1446:13432:22;6209:19:8;1446:13432:22;;6209:19:8;1754:119;1815:47;;;1446:13432:22;1815:47:8;1446:13432:22;;;;1815:47:8;6246:120:1;6317:34;;;1446:13432:22;6317:34:1;1446:13432:22;;;;6317:34:1;6156:52;;;;1446:13432:22;6156:52:1;;1446:13432:22;6156:52:1;;;;;;1446:13432:22;6156:52:1;;;:::i;:::-;;;1446:13432:22;;;;;6156:52:1;;;;;;;-1:-1:-1;6156:52:1;;4675:120;-1:-1:-1;;;;;;;;;;;1446:13432:22;-1:-1:-1;;;;;1446:13432:22;4753:42:1;;;-1:-1:-1;4675:120:1;;;1446:13432:22;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;1060:103:15;;;:::i;:::-;1446:13432:22;;-1:-1:-1;;;;;1446:13432:22;3423:10;:25;:50;;;;1446:13432;;;;1797:53:11;1446:13432:22;;;;;;;;;;;5756:11;1446:13432;;;;;5756:28;1446:13432;;;5756:28;:::i;:::-;1446:13432;;;;-1:-1:-1;;;1446:13432:22;1797:53:11;;;3423:10:22;1446:13432;1797:53:11;;1446:13432:22;5837:4;1446:13432;;;;;;;;;;;1797:53:11;;1446:13432:22;1797:53:11;;1446:13432:22;1797:53:11;:::i;:::-;;:::i;:::-;1446:13432:22;;;;;5866:36;1446:13432;3423:10;5866:36;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;3423:50;-1:-1:-1;;;;;;3466:7:22;;:::i;:::-;1446:13432;3423:10;3452:21;3423:50;;1446:13432;;;;;;-1:-1:-1;;1446:13432:22;;;;;;;;11256:10;;;1446:13432;;11316:12;1446:13432;11311:24;;1446:13432;;;11430:9;;;;:::i;:::-;1446:13432;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;11459:17;;;11478:11;;;;;;;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11491:7;11514:42;11537:19;;;:::i;:::-;11521:12;;;;;:::i;:::-;1446:13432;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11514:42;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;1446:13432:22;;;;;;11459:17;;1446:13432;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;3235:92;1446:13432;;;;;3257:11;1446:13432;;3243:10;:25;3235:92;:::i;:::-;3257:11;1446:13432;;6330:28;1446:13432;;;6330:28;1446:13432;6373:33;1446:13432;;;3243:10;1446:13432;;6373:33;1446:13432;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1446:13432;;;;-1:-1:-1;;;3088:31:22;;1446:13432;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;3088:31;;;;;;;1446:13432;3088:31;;;1446:13432;-1:-1:-1;;;;;;1446:13432:22;3074:10;:45;1446:13432;;;;;;;;;;;;;;;;;;;;8204:8;1446:13432;;;;;;;;;;;;;;;;;;;;;;;8204:8;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;;8335:11;1446:13432;;;;;;;8335:28;1446:13432;;8568:61;1446:13432;;;;8335:11;1446:13432;;;;;8430:28;1446:13432;;;8430:28;:::i;:::-;1446:13432;;;;;4025:12;1446:13432;;;;;;;;;;;;;4025:35;1446:13432;;;4025:35;:::i;:::-;1446:13432;;;;;4070:16;1446:13432;;;;;4070:33;1446:13432;;;4070:33;:::i;:::-;1446:13432;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;3074:10;4118:54;3074:10;4118:54;;;:::i;:::-;;;;1446:13432;;;;;;;;;;3074:10;1446:13432;3074:10;1446:13432;;;;;;:::i;:::-;8568:61;;;1446:13432;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;3088:31;;;;1446:13432;3088:31;1446:13432;3088:31;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1446:13432;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;12271:10;1446:13432;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;-1:-1:-1;;;;;1446:13432:22;;;;;12301:12;1446:13432;;;;;;;;12271:10;1446:13432;;;;;;;;;;;12417:21;1446:13432;;;;;;;;;12517:12;1446:13432;;;;;;;;12271:10;1446:13432;;;;;;;;12517:35;1446:13432;;;;;;;;;;;;;;;12271:10;1446:13432;;;;;;;;;;;;;;;;;;;;;;;;12271:10;1446:13432;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;12773:15;1446:13432;;;;12271:10;;1446:13432;;12803:56;1446:13432;12271:10;12803:56;;1446:13432;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;2541:41;1446:13432;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;:::i;:::-;;;;2155:64;1446:13432;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;2916:41:22;;2946:10;1446:13432;2916:41;;1446:13432;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;2916:41;;;;;;2908:101;2916:41;1446:13432;2916:41;;;2908:101;;:::i;:::-;1446:13432;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1060:103:15;;:::i;:::-;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;10099:35;1446:13432;;;;;10209:16;1446:13432;;;;;;;10209:33;1446:13432;;;;;10315:12;1446:13432;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;10315:35;1446:13432;;;10315:35;:::i;:::-;1446:13432;;;;;10360:17;1446:13432;;;;;10360:34;1446:13432;;;10360:34;:::i;:::-;1446:13432;;;;;;;;;;;;;;;;;;;4364:35;1446:13432;;;4364:35;:::i;:::-;1446:13432;;;;;10209:16;1446:13432;;;;;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;10315:12;1446:13432;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;2946:10;4457:54;2946:10;4457:54;;;:::i;:::-;;;;10523:18;;:::i;:::-;1446:13432;;;;;:::i;:::-;;;;;10588:279;;2946:10;1446:13432;;;10588:279;;1446:13432;;;;;10588:279;;;;;;:::i;:::-;1446:13432;10588:279;;1446:13432;;;10588:279;;;1446:13432;;;10588:279;;;1446:13432;;;;;10588:279;;1446:13432;;;;10588:279;;;1446:13432;;;;10877:12;1446:13432;;;;;;;;;;;;;;10877:12;1446:13432;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;;1446:13432:22;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10588:279;1446:13432;;;;;;;;;;;;10315:12;1446:13432;;;;;;;;;10209:16;1446:13432;;;;10360:17;1446:13432;;;;;;;10877:12;1446:13432;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;10923:90;1446:13432;2946:10;10923:90;;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;-1:-1:-1;;1446:13432:22;;;;;11107:12;1446:13432;;;;;;;;;;;;;;:::i;:::-;;;;;;2916:41;1446:13432;;;;;;;;;;;;2916:41;;2946:10;1446:13432;2916:41;;1446:13432;2916:41;;;;;;2908:101;2916:41;1446:13432;2916:41;;;2908:101;;:::i;:::-;1446:13432;;;;;;;;;;;3652:6;1446:13432;;3643:67;1446:13432;;;;;;3651:13;3643:67;:::i;:::-;1060:103:15;;:::i;:::-;1446:13432:22;;;;;;;;;;;11757:12;1446:13432;;;;;;-1:-1:-1;1446:13432:22;;;;;-1:-1:-1;1446:13432:22;;11757:35;1446:13432;;;;;11864:16;1446:13432;;;;;;;11864:33;1446:13432;;12114:52;4364:19;12092:6;4364:19;1446:13432;4364:19;1446:13432;4364:19;1446:13432;;;11757:12;1446:13432;;;;;;;;;;;;;4364:35;1446:13432;;;4364:35;:::i;:::-;1446:13432;;;;;11864:16;1446:13432;;;;;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;2946:10;4457:54;2946:10;4457:54;;;:::i;12092:6::-;1446:13432;;;;;;;;;;2946:10;1446:13432;;;;12114:52;1446:13432;-1:-1:-1;;;;;;;;;;;7628:52:16;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;2916:41;1446:13432;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;2916:41;1446:13432;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;:::o;:::-;;;;;-1:-1:-1;;1446:13432:22;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;1446:13432:22;;;;;;-1:-1:-1;;1446:13432:22;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1446:13432:22;;;;;;;;-1:-1:-1;;1446:13432:22;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;10877:12;1446:13432;;;;;;10877:12;-1:-1:-1;1446:13432:22;;-1:-1:-1;1446:13432:22;;;;;;-1:-1:-1;1446:13432:22;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1446:13432:22;;;;;;;;;;:::o;1169:346:15:-;-1:-1:-1;;;;;;;;;;;7368:53:16;1292:93:15;;1503:4;-1:-1:-1;;;;;;;;;;;7628:52:16;1169:346:15:o;1292:93::-;1344:30;;;-1:-1:-1;1344:30:15;;-1:-1:-1;1344:30:15;1271:160:11;1380:43;;1271:160;;1380:43;1446:13432:22;;;;;;;;1380:43:11;;;;;;;;:::i;:::-;;1446:13432:22;;1380:43:11;;;;;;:::i;:::-;1271:160::o;1098:255:21:-;889:3;1167:19;:24;889:3;;1446:13432:22;;-1:-1:-1;;;1214:32:21;;;1446:13432:22;1214:32:21;1446:13432:22;889:3:21;1214:32;;;;;;;1446:13432:22;1214:32:21;;;1207:39;;:::o;1214:32::-;;;;;;;;;;;;;;;;;:::i;:::-;;;881:12;;;;;1207:39;:::o;1214:32::-;;;-1:-1:-1;1214:32:21;;1163:184;1324:12;1317:19;:::o;2634:96:22:-;2707:7;1446:13432;;;-1:-1:-1;;;2699:24:22;;1446:13432;2699:24;;1446:13432;;2699:24;;1446:13432;;-1:-1:-1;;;;;1446:13432:22;2699:24;;;;;;;2707:7;2699:24;;;2692:31;2634:96;:::o;2699:24::-;;;;;;;;;;;;;;:::i;7160:163::-;1446:13432;;;;;;;-1:-1:-1;1446:13432:22;7229:6;1446:13432;;;-1:-1:-1;1446:13432:22;3257:11;1446:13432;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;3257:11;1446:13432;;7305:10;1446:13432;;;;7265:51;7160:163::o;5070:537::-;1446:13432;;;;;;;-1:-1:-1;1446:13432:22;5155:12;1446:13432;;;-1:-1:-1;1446:13432:22;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;;5198:10;;;1446:13432;;;-1:-1:-1;1446:13432:22;5278:16;1446:13432;;;;-1:-1:-1;1446:13432:22;;5278:33;1446:13432;;5556:44;;1446:13432;;-1:-1:-1;1446:13432:22;5379:5;1446:13432;;;-1:-1:-1;1446:13432:22;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;5379:28;1446:13432;;;5379:28;:::i;:::-;1446:13432;;;-1:-1:-1;1446:13432:22;5417:10;1446:13432;;;-1:-1:-1;1446:13432:22;5417:27;1446:13432;;;5417:27;:::i;:::-;1446:13432;;;-1:-1:-1;1446:13432:22;5155:12;1446:13432;;;-1:-1:-1;1446:13432:22;;;;;;;;-1:-1:-1;1446:13432:22;;;;-1:-1:-1;1446:13432:22;4364:35;1446:13432;;;4364:35;:::i;:::-;1446:13432;;;-1:-1:-1;1446:13432:22;5278:16;1446:13432;;;-1:-1:-1;1446:13432:22;4409:33;1446:13432;;;4409:33;:::i;:::-;1446:13432;;;;;;;;;5495:33;1446:13432;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;5530:10;4457:54;5530:10;4457:54;;;:::i;5556:44::-;;;;5070:537::o;1446:13432::-;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;-1:-1:-1;;;1446:13432:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1446:13432:22;;;;-1:-1:-1;;;1446:13432:22;;;;;;;6550:720:11;;-1:-1:-1;6687:421:11;6550:720;6687:421;;;;;;;;;;;;-1:-1:-1;6687:421:11;;7122:15;;-1:-1:-1;;;;;;1446:13432:22;;7140:26:11;:31;7122:68;7118:146;;6550:720;:::o;7118:146::-;-1:-1:-1;;;;7213:40:11;;;-1:-1:-1;;;;;1446:13432:22;;;;7213:40:11;1446:13432:22;;;7213:40:11;7122:68;7189:1;7174:16;;7122:68;;4421:582:12;;4593:8;;-1:-1:-1;1446:13432:22;;5674:21:12;:17;;5846:142;;;;;;5670:385;6025:19;;;5694:1;6025:19;;5694:1;6025:19;4589:408;1446:13432:22;;4841:22:12;:49;;;4589:408;4837:119;;4969:17;;:::o;4837:119::-;-1:-1:-1;;;4862:1:12;4917:24;;;-1:-1:-1;;;;;1446:13432:22;;;;4917:24:12;1446:13432:22;;;4917:24:12;4841:49;4867:18;;;:23;4841:49;","linkReferences":{},"immutableReferences":{"273":[{"start":5812,"length":32},{"start":5974,"length":32}]}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","WITHDRAW_REQUEST_DELAY()":"fac4bf22","coordinator()":"0a009097","dealBalancesTotal(address)":"1229add5","diamond()":"f0b7db4e","disableOnchainRefund()":"9cf8fc36","enableOnchainRefund()":"3adce715","freeBalanceTotal(address)":"933a6d5e","freezeAccount(address)":"f26c159f","frozen(address)":"d0516650","fundFromLimbo(address,address,uint256)":"7fad6401","getDepositInfo(uint256,uint256)":"3bf9bb0b","getDepositInfoLength()":"04930575","getFreeBalance(address,address)":"de700da6","getFullBalance(address,address)":"d4f4ba48","initialize(address)":"c4d66de8","limbo(address,address)":"ae77dc10","limboTotal(address)":"c44ead3c","manualWithdrawEnabled()":"1e4343ec","moveBalanceFromDeal(address,address,uint256,uint8)":"88081fcb","moveBalanceToDeal(address,address,uint256,uint8)":"116424cc","moveFreeBalance(address,address,address,uint256,uint8)":"95e1b418","poolBalance(address)":"68abb5e0","poolTopUp(address,uint256)":"3eb026af","poolWithdraw(address,uint256)":"db2aa127","proxiableUUID()":"52d1902d","refund(address,address,uint256)":"82ad6f35","sendToLimbo(address,address)":"ec178c13","setCoordinator(address)":"8ea98117","terminate(address)":"edb45529","terminationRequest(address)":"301aaac9","terminationVeto(address,address)":"7df5070f","topUpIds(string)":"c08ea6e6","unfreezeAccount(address)":"788649ea","upgradeToAndCall(address,bytes)":"4f1ef286","userTopUp(address,address,uint256,string)":"31acc942","withdrawByDeal(address,address,uint256,uint8)":"01627f56","withdrawFromLimbo(address,address,address,uint256)":"985a3e1a"}}}}},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"id":3,"ast":{}},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"id":4,"ast":{}},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"id":5,"ast":{}},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"id":6,"ast":{}},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"id":7,"ast":{}},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"id":8,"ast":{}},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"id":9,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"id":10,"ast":{}},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"id":11,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"id":12,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"id":13,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"id":14,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol":{"id":15,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"id":16,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"id":17,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"id":18,"ast":{}},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"id":19,"ast":{}},"lib/openzeppelin-contracts/contracts//utils/structs/EnumerableSet.sol":{"id":20,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"id":0,"ast":{}},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"id":1,"ast":{}},"src/ArbHelper.sol":{"id":21,"ast":{}},"src/balance-keeper/BalanceKeeper.sol":{"id":22,"ast":{"absolutePath":"src/balance-keeper/BalanceKeeper.sol","id":7557,"exportedSymbols":{"ArbHelper":[6101],"BalanceKeeper":[7556],"IBalanceKeeper":[8092],"IDealFactory":[10775],"IERC173":[12728],"IERC20":[938],"Initializable":[253],"ReentrancyGuardTransient":[1751],"SafeERC20":[1349],"UUPSUpgradeable":[435]},"nodeType":"SourceUnit","src":"700:14179:22","nodes":[{"id":6103,"nodeType":"PragmaDirective","src":"700:23:22","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6105,"nodeType":"ImportDirective","src":"725:100:22","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":1752,"symbolAliases":[{"foreign":{"id":6104,"name":"ReentrancyGuardTransient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"733:24:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6107,"nodeType":"ImportDirective","src":"826:96:22","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":254,"symbolAliases":[{"foreign":{"id":6106,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"834:13:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6109,"nodeType":"ImportDirective","src":"923:100:22","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":436,"symbolAliases":[{"foreign":{"id":6108,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"931:15:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6111,"nodeType":"ImportDirective","src":"1024:70:22","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":939,"symbolAliases":[{"foreign":{"id":6110,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1032:6:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6113,"nodeType":"ImportDirective","src":"1095:82:22","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":1350,"symbolAliases":[{"foreign":{"id":6112,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"1103:9:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6115,"nodeType":"ImportDirective","src":"1178:51:22","nodes":[],"absolutePath":"src/interfaces/IERC173.sol","file":"src/interfaces/IERC173.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":12729,"symbolAliases":[{"foreign":{"id":6114,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12728,"src":"1186:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6117,"nodeType":"ImportDirective","src":"1230:69:22","nodes":[],"absolutePath":"src/balance-keeper/IBalanceKeeper.sol","file":"src/balance-keeper/IBalanceKeeper.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":8093,"symbolAliases":[{"foreign":{"id":6116,"name":"IBalanceKeeper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8092,"src":"1238:14:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6119,"nodeType":"ImportDirective","src":"1300:66:22","nodes":[],"absolutePath":"src/core/interfaces/IDealFactory.sol","file":"src/core/interfaces/IDealFactory.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":10776,"symbolAliases":[{"foreign":{"id":6118,"name":"IDealFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10775,"src":"1308:12:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":6121,"nodeType":"ImportDirective","src":"1367:44:22","nodes":[],"absolutePath":"src/ArbHelper.sol","file":"src/ArbHelper.sol","nameLocation":"-1:-1:-1","scope":7557,"sourceUnit":6102,"symbolAliases":[{"foreign":{"id":6120,"name":"ArbHelper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"1375:9:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7556,"nodeType":"ContractDefinition","src":"1446:13432:22","nodes":[{"id":6134,"nodeType":"UsingForDirective","src":"1547:27:22","nodes":[],"global":false,"libraryName":{"id":6131,"name":"SafeERC20","nameLocations":["1553:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":1349,"src":"1553:9:22"},"typeName":{"id":6133,"nodeType":"UserDefinedTypeName","pathNode":{"id":6132,"name":"IERC20","nameLocations":["1567:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"1567:6:22"},"referencedDeclaration":938,"src":"1567:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}}},{"id":6137,"nodeType":"VariableDeclaration","src":"1580:55:22","nodes":[],"baseFunctions":[7834],"constant":true,"functionSelector":"fac4bf22","mutability":"constant","name":"WITHDRAW_REQUEST_DELAY","nameLocation":"1604:22:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1580:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"37","id":6136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1629:6:22","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"7"},"visibility":"public"},{"id":6139,"nodeType":"VariableDeclaration","src":"1642:22:22","nodes":[],"baseFunctions":[7819],"constant":false,"functionSelector":"f0b7db4e","mutability":"mutable","name":"diamond","nameLocation":"1657:7:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6138,"name":"address","nodeType":"ElementaryTypeName","src":"1642:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":6141,"nodeType":"VariableDeclaration","src":"1670:26:22","nodes":[],"baseFunctions":[7824],"constant":false,"functionSelector":"0a009097","mutability":"mutable","name":"coordinator","nameLocation":"1685:11:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6140,"name":"address","nodeType":"ElementaryTypeName","src":"1670:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":6148,"nodeType":"VariableDeclaration","src":"1801:86:22","nodes":[],"constant":false,"mutability":"mutable","name":"freeBalances","nameLocation":"1875:12:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"typeName":{"id":6147,"keyName":"token","keyNameLocation":"1816:5:22","keyType":{"id":6143,"nodeType":"UserDefinedTypeName","pathNode":{"id":6142,"name":"IERC20","nameLocations":["1809:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"1809:6:22"},"referencedDeclaration":938,"src":"1809:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"1801:65:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6146,"keyName":"user","keyNameLocation":"1841:4:22","keyType":{"id":6144,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1825:40:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"balance","valueNameLocation":"1857:7:22","valueType":{"id":6145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"id":6155,"nodeType":"VariableDeclaration","src":"1893:86:22","nodes":[],"constant":false,"mutability":"mutable","name":"dealBalances","nameLocation":"1967:12:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"typeName":{"id":6154,"keyName":"token","keyNameLocation":"1908:5:22","keyType":{"id":6150,"nodeType":"UserDefinedTypeName","pathNode":{"id":6149,"name":"IERC20","nameLocations":["1901:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"1901:6:22"},"referencedDeclaration":938,"src":"1901:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"1893:65:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6153,"keyName":"user","keyNameLocation":"1933:4:22","keyType":{"id":6151,"name":"address","nodeType":"ElementaryTypeName","src":"1925:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1917:40:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"balance","valueNameLocation":"1949:7:22","valueType":{"id":6152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1941:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"id":6162,"nodeType":"VariableDeclaration","src":"1985:95:22","nodes":[],"constant":false,"mutability":"mutable","name":"terminationRequests","nameLocation":"2061:19:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"typeName":{"id":6161,"keyName":"token","keyNameLocation":"2000:5:22","keyType":{"id":6157,"nodeType":"UserDefinedTypeName","pathNode":{"id":6156,"name":"IERC20","nameLocations":["1993:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"1993:6:22"},"referencedDeclaration":938,"src":"1993:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"1985:67:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6160,"keyName":"user","keyNameLocation":"2025:4:22","keyType":{"id":6158,"name":"address","nodeType":"ElementaryTypeName","src":"2017:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2009:42:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"timestamp","valueNameLocation":"2041:9:22","valueType":{"id":6159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2033:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"id":6167,"nodeType":"VariableDeclaration","src":"2086:63:22","nodes":[],"baseFunctions":[7842],"constant":false,"functionSelector":"933a6d5e","mutability":"mutable","name":"freeBalanceTotal","nameLocation":"2133:16:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"typeName":{"id":6166,"keyName":"token","keyNameLocation":"2101:5:22","keyType":{"id":6164,"nodeType":"UserDefinedTypeName","pathNode":{"id":6163,"name":"IERC20","nameLocations":["2094:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"2094:6:22"},"referencedDeclaration":938,"src":"2094:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"2086:39:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"supply","valueNameLocation":"2118:6:22","valueType":{"id":6165,"name":"uint256","nodeType":"ElementaryTypeName","src":"2110:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":6172,"nodeType":"VariableDeclaration","src":"2155:64:22","nodes":[],"baseFunctions":[7850],"constant":false,"functionSelector":"1229add5","mutability":"mutable","name":"dealBalancesTotal","nameLocation":"2202:17:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"typeName":{"id":6171,"keyName":"token","keyNameLocation":"2170:5:22","keyType":{"id":6169,"nodeType":"UserDefinedTypeName","pathNode":{"id":6168,"name":"IERC20","nameLocations":["2163:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"2163:6:22"},"referencedDeclaration":938,"src":"2163:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"2155:39:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"supply","valueNameLocation":"2187:6:22","valueType":{"id":6170,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":6177,"nodeType":"VariableDeclaration","src":"2226:58:22","nodes":[],"baseFunctions":[7858],"constant":false,"functionSelector":"68abb5e0","mutability":"mutable","name":"poolBalance","nameLocation":"2273:11:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"typeName":{"id":6176,"keyName":"token","keyNameLocation":"2241:5:22","keyType":{"id":6174,"nodeType":"UserDefinedTypeName","pathNode":{"id":6173,"name":"IERC20","nameLocations":["2234:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"2234:6:22"},"referencedDeclaration":938,"src":"2234:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"2226:39:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"amount","valueNameLocation":"2258:6:22","valueType":{"id":6175,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":6184,"nodeType":"VariableDeclaration","src":"2290:78:22","nodes":[],"baseFunctions":[7868],"constant":false,"functionSelector":"ae77dc10","mutability":"mutable","name":"limbo","nameLocation":"2363:5:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"typeName":{"id":6183,"keyName":"token","keyNameLocation":"2305:5:22","keyType":{"id":6179,"nodeType":"UserDefinedTypeName","pathNode":{"id":6178,"name":"IERC20","nameLocations":["2298:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"2298:6:22"},"referencedDeclaration":938,"src":"2298:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"2290:65:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6182,"keyName":"user","keyNameLocation":"2330:4:22","keyType":{"id":6180,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2314:40:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"balance","valueNameLocation":"2346:7:22","valueType":{"id":6181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2338:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"id":6189,"nodeType":"VariableDeclaration","src":"2374:57:22","nodes":[],"baseFunctions":[7876],"constant":false,"functionSelector":"c44ead3c","mutability":"mutable","name":"limboTotal","nameLocation":"2421:10:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"typeName":{"id":6188,"keyName":"token","keyNameLocation":"2389:5:22","keyType":{"id":6186,"nodeType":"UserDefinedTypeName","pathNode":{"id":6185,"name":"IERC20","nameLocations":["2382:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"2382:6:22"},"referencedDeclaration":938,"src":"2382:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"2374:39:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"amount","valueNameLocation":"2406:6:22","valueType":{"id":6187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2398:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":6193,"nodeType":"VariableDeclaration","src":"2438:50:22","nodes":[],"baseFunctions":[7883],"constant":false,"functionSelector":"d0516650","mutability":"mutable","name":"frozen","nameLocation":"2482:6:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":6192,"keyName":"user","keyNameLocation":"2454:4:22","keyType":{"id":6190,"name":"address","nodeType":"ElementaryTypeName","src":"2446:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2438:36:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"frozen","valueNameLocation":"2467:6:22","valueType":{"id":6191,"name":"bool","nodeType":"ElementaryTypeName","src":"2462:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"id":6197,"nodeType":"VariableDeclaration","src":"2495:39:22","nodes":[],"baseFunctions":[7890],"constant":false,"functionSelector":"c08ea6e6","mutability":"mutable","name":"topUpIds","nameLocation":"2526:8:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string => bool)"},"typeName":{"id":6196,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6194,"name":"string","nodeType":"ElementaryTypeName","src":"2503:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"2495:23:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6195,"name":"bool","nodeType":"ElementaryTypeName","src":"2513:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"id":6200,"nodeType":"VariableDeclaration","src":"2541:41:22","nodes":[],"baseFunctions":[7829],"constant":false,"functionSelector":"1e4343ec","mutability":"mutable","name":"manualWithdrawEnabled","nameLocation":"2553:21:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6198,"name":"bool","nodeType":"ElementaryTypeName","src":"2541:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":6199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2577:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"public"},{"id":6204,"nodeType":"VariableDeclaration","src":"2589:38:22","nodes":[],"constant":false,"mutability":"mutable","name":"dealDeposits","nameLocation":"2615:12:22","scope":7556,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo[]"},"typeName":{"baseType":{"id":6202,"nodeType":"UserDefinedTypeName","pathNode":{"id":6201,"name":"DealDepositInfo","nameLocations":["2589:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":7594,"src":"2589:15:22"},"referencedDeclaration":7594,"src":"2589:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"}},"id":6203,"nodeType":"ArrayTypeName","src":"2589:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"}},"visibility":"private"},{"id":6216,"nodeType":"FunctionDefinition","src":"2634:96:22","nodes":[],"body":{"id":6215,"nodeType":"Block","src":"2682:48:22","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6210,"name":"diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6139,"src":"2707:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6209,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12728,"src":"2699:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$12728_$","typeString":"type(contract IERC173)"}},"id":6211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$12728","typeString":"contract IERC173"}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2716:5:22","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":12721,"src":"2699:22:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6208,"id":6214,"nodeType":"Return","src":"2692:31:22"}]},"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"2643:5:22","parameters":{"id":6205,"nodeType":"ParameterList","parameters":[],"src":"2648:2:22"},"returnParameters":{"id":6208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6216,"src":"2673:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6206,"name":"address","nodeType":"ElementaryTypeName","src":"2673:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2672:9:22"},"scope":7556,"stateMutability":"view","virtual":false,"visibility":"private"},{"id":6229,"nodeType":"ModifierDefinition","src":"2736:136:22","nodes":[],"body":{"id":6228,"nodeType":"Block","src":"2762:110:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6219,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2780:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2784:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2780:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6221,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"2794:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2780:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a204f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6e","id":6224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2803:50:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_0a1b240068f85683176a2122277cb9cc4ac7ba2e59c71164c5a14ae2ffa82eb1","typeString":"literal_string \"BalanceKeeper: Only owner can call this function\""},"value":"BalanceKeeper: Only owner can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0a1b240068f85683176a2122277cb9cc4ac7ba2e59c71164c5a14ae2ffa82eb1","typeString":"literal_string \"BalanceKeeper: Only owner can call this function\""}],"id":6218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2772:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:82:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6226,"nodeType":"ExpressionStatement","src":"2772:82:22"},{"id":6227,"nodeType":"PlaceholderStatement","src":"2864:1:22"}]},"name":"onlyDiamondOwner","nameLocation":"2745:16:22","parameters":{"id":6217,"nodeType":"ParameterList","parameters":[],"src":"2762:0:22"},"virtual":false,"visibility":"internal"},{"id":6244,"nodeType":"ModifierDefinition","src":"2878:149:22","nodes":[],"body":{"id":6243,"nodeType":"Block","src":"2898:129:22","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":6236,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2946:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2950:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2946:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":6233,"name":"diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6139,"src":"2929:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6232,"name":"IDealFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10775,"src":"2916:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDealFactory_$10775_$","typeString":"type(contract IDealFactory)"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IDealFactory_$10775","typeString":"contract IDealFactory"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:7:22","memberName":"hasDeal","nodeType":"MemberAccess","referencedDeclaration":10641,"src":"2916:29:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":6238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a204f6e6c79206465616c2063616e2063616c6c20746869732066756e6374696f6e","id":6239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2959:49:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ec0e3265af6e663db91dff9135333c4f3ee99a893e42ea704cc6b2cdc298cdf","typeString":"literal_string \"BalanceKeeper: Only deal can call this function\""},"value":"BalanceKeeper: Only deal can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ec0e3265af6e663db91dff9135333c4f3ee99a893e42ea704cc6b2cdc298cdf","typeString":"literal_string \"BalanceKeeper: Only deal can call this function\""}],"id":6231,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2908:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2908:101:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6241,"nodeType":"ExpressionStatement","src":"2908:101:22"},{"id":6242,"nodeType":"PlaceholderStatement","src":"3019:1:22"}]},"name":"onlyDeal","nameLocation":"2887:8:22","parameters":{"id":6230,"nodeType":"ParameterList","parameters":[],"src":"2895:2:22"},"virtual":false,"visibility":"internal"},{"id":6260,"nodeType":"ModifierDefinition","src":"3033:159:22","nodes":[],"body":{"id":6259,"nodeType":"Block","src":"3056:136:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6247,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3074:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3078:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3074:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6250,"name":"diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6139,"src":"3101:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6249,"name":"IDealFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10775,"src":"3088:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDealFactory_$10775_$","typeString":"type(contract IDealFactory)"}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3088:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IDealFactory_$10775","typeString":"contract IDealFactory"}},"id":6252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3110:7:22","memberName":"vodopad","nodeType":"MemberAccess","referencedDeclaration":10753,"src":"3088:29:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3088:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3074:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a204f6e6c7920766f646f7061642063616e2063616c6c20746869732066756e6374696f6e","id":6255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3121:52:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_58c573f70cba327939a06122ad9c59d8d5052f0fc1392150e70f346952d45cce","typeString":"literal_string \"BalanceKeeper: Only vodopad can call this function\""},"value":"BalanceKeeper: Only vodopad can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_58c573f70cba327939a06122ad9c59d8d5052f0fc1392150e70f346952d45cce","typeString":"literal_string \"BalanceKeeper: Only vodopad can call this function\""}],"id":6246,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3066:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3066:108:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6257,"nodeType":"ExpressionStatement","src":"3066:108:22"},{"id":6258,"nodeType":"PlaceholderStatement","src":"3184:1:22"}]},"name":"onlyVodopad","nameLocation":"3042:11:22","parameters":{"id":6245,"nodeType":"ParameterList","parameters":[],"src":"3053:2:22"},"virtual":false,"visibility":"internal"},{"id":6272,"nodeType":"ModifierDefinition","src":"3198:147:22","nodes":[],"body":{"id":6271,"nodeType":"Block","src":"3225:120:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3243:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3247:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3243:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6265,"name":"coordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"3257:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3243:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a204f6e6c7920636f6f7264696e61746f722063616e2063616c6c20746869732066756e6374696f6e","id":6267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3270:56:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_527da34bde3f8b53ea44bbed8c225f1834bc448912de2f9102b7358abe9de6e6","typeString":"literal_string \"BalanceKeeper: Only coordinator can call this function\""},"value":"BalanceKeeper: Only coordinator can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_527da34bde3f8b53ea44bbed8c225f1834bc448912de2f9102b7358abe9de6e6","typeString":"literal_string \"BalanceKeeper: Only coordinator can call this function\""}],"id":6262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3235:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3235:92:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6269,"nodeType":"ExpressionStatement","src":"3235:92:22"},{"id":6270,"nodeType":"PlaceholderStatement","src":"3337:1:22"}]},"name":"onlyCoordinator","nameLocation":"3207:15:22","parameters":{"id":6261,"nodeType":"ParameterList","parameters":[],"src":"3222:2:22"},"virtual":false,"visibility":"internal"},{"id":6290,"nodeType":"ModifierDefinition","src":"3351:237:22","nodes":[],"body":{"id":6289,"nodeType":"Block","src":"3392:196:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6275,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3423:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3427:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3423:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6277,"name":"coordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"3437:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3423:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6279,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3452:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3456:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3452:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6281,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"3466:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3466:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3452:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3423:50:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a204f6e6c7920636f6f7264696e61746f72206f72206469616d6f6e64206f776e65722063616e2063616c6c20746869732066756e6374696f6e","id":6285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3487:73:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e6e98a403031993e3fcd31e099b1a1eae7c3e16e761435c6cddd85480ed13dd","typeString":"literal_string \"BalanceKeeper: Only coordinator or diamond owner can call this function\""},"value":"BalanceKeeper: Only coordinator or diamond owner can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8e6e98a403031993e3fcd31e099b1a1eae7c3e16e761435c6cddd85480ed13dd","typeString":"literal_string \"BalanceKeeper: Only coordinator or diamond owner can call this function\""}],"id":6274,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3402:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3402:168:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6287,"nodeType":"ExpressionStatement","src":"3402:168:22"},{"id":6288,"nodeType":"PlaceholderStatement","src":"3580:1:22"}]},"name":"onlyCoordinatorOrDiamondOwner","nameLocation":"3360:29:22","parameters":{"id":6273,"nodeType":"ParameterList","parameters":[],"src":"3389:2:22"},"virtual":false,"visibility":"internal"},{"id":6304,"nodeType":"ModifierDefinition","src":"3594:134:22","nodes":[],"body":{"id":6303,"nodeType":"Block","src":"3633:95:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3651:13:22","subExpression":{"baseExpression":{"id":6295,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"3652:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6297,"indexExpression":{"id":6296,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6292,"src":"3659:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3652:12:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2055736572206973207065726d616e656e746c792066726f7a656e","id":6299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3666:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b5fac5807274663e2cfc33920035b1577237ee312883cc12316f7b2911bc5d3","typeString":"literal_string \"BalanceKeeper: User is permanently frozen\""},"value":"BalanceKeeper: User is permanently frozen"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b5fac5807274663e2cfc33920035b1577237ee312883cc12316f7b2911bc5d3","typeString":"literal_string \"BalanceKeeper: User is permanently frozen\""}],"id":6294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3643:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3643:67:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6301,"nodeType":"ExpressionStatement","src":"3643:67:22"},{"id":6302,"nodeType":"PlaceholderStatement","src":"3720:1:22"}]},"name":"onlyIfNotFrozen","nameLocation":"3603:15:22","parameters":{"id":6293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6292,"mutability":"mutable","name":"user","nameLocation":"3627:4:22","nodeType":"VariableDeclaration","scope":6304,"src":"3619:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6291,"name":"address","nodeType":"ElementaryTypeName","src":"3619:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3618:14:22"},"virtual":false,"visibility":"internal"},{"id":6312,"nodeType":"FunctionDefinition","src":"3787:53:22","nodes":[],"body":{"id":6311,"nodeType":"Block","src":"3801:39:22","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6308,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3811:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3811:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6310,"nodeType":"ExpressionStatement","src":"3811:22:22"}]},"documentation":{"id":6305,"nodeType":"StructuredDocumentation","src":"3734:48:22","text":"@custom:oz-upgrades-unsafe-allow constructor"},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":6306,"nodeType":"ParameterList","parameters":[],"src":"3798:2:22"},"returnParameters":{"id":6307,"nodeType":"ParameterList","parameters":[],"src":"3801:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":6350,"nodeType":"FunctionDefinition","src":"3846:333:22","nodes":[],"body":{"id":6349,"nodeType":"Block","src":"4015:164:22","nodes":[],"statements":[{"expression":{"id":6333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6327,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"4025:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6330,"indexExpression":{"id":6328,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"4038:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4025:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6331,"indexExpression":{"id":6329,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6317,"src":"4045:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4025:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6332,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"4054:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4025:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6334,"nodeType":"ExpressionStatement","src":"4025:35:22"},{"expression":{"id":6339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6335,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"4070:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6337,"indexExpression":{"id":6336,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"4087:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4070:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6338,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"4097:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4070:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6340,"nodeType":"ExpressionStatement","src":"4070:33:22"},{"eventCall":{"arguments":[{"id":6342,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"4138:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6343,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6317,"src":"4145:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6344,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6322,"src":"4151:6:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"id":6345,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"4159:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6346,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6324,"src":"4167:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6341,"name":"FreeBalanceIncrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7608,"src":"4118:19:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_enum$_BalanceChangeReason_$7570_$_t_uint256_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,enum IBalanceKeeper.BalanceChangeReason,uint256,address)"}},"id":6347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4118:54:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6348,"nodeType":"EmitStatement","src":"4113:59:22"}]},"implemented":true,"kind":"function","modifiers":[],"name":"increaseFreeBalance","nameLocation":"3855:19:22","parameters":{"id":6325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6315,"mutability":"mutable","name":"token","nameLocation":"3891:5:22","nodeType":"VariableDeclaration","scope":6350,"src":"3884:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6314,"nodeType":"UserDefinedTypeName","pathNode":{"id":6313,"name":"IERC20","nameLocations":["3884:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"3884:6:22"},"referencedDeclaration":938,"src":"3884:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6317,"mutability":"mutable","name":"user","nameLocation":"3914:4:22","nodeType":"VariableDeclaration","scope":6350,"src":"3906:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6316,"name":"address","nodeType":"ElementaryTypeName","src":"3906:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6319,"mutability":"mutable","name":"amount","nameLocation":"3936:6:22","nodeType":"VariableDeclaration","scope":6350,"src":"3928:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6318,"name":"uint256","nodeType":"ElementaryTypeName","src":"3928:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6322,"mutability":"mutable","name":"reason","nameLocation":"3972:6:22","nodeType":"VariableDeclaration","scope":6350,"src":"3952:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},"typeName":{"id":6321,"nodeType":"UserDefinedTypeName","pathNode":{"id":6320,"name":"BalanceChangeReason","nameLocations":["3952:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":7570,"src":"3952:19:22"},"referencedDeclaration":7570,"src":"3952:19:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},"visibility":"internal"},{"constant":false,"id":6324,"mutability":"mutable","name":"info","nameLocation":"3996:4:22","nodeType":"VariableDeclaration","scope":6350,"src":"3988:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6323,"name":"address","nodeType":"ElementaryTypeName","src":"3988:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3874:132:22"},"returnParameters":{"id":6326,"nodeType":"ParameterList","parameters":[],"src":"4015:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6388,"nodeType":"FunctionDefinition","src":"4185:333:22","nodes":[],"body":{"id":6387,"nodeType":"Block","src":"4354:164:22","nodes":[],"statements":[{"expression":{"id":6371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6365,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"4364:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6368,"indexExpression":{"id":6366,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"4377:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4364:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6369,"indexExpression":{"id":6367,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6355,"src":"4384:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4364:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6370,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"4393:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4364:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6372,"nodeType":"ExpressionStatement","src":"4364:35:22"},{"expression":{"id":6377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6373,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"4409:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6375,"indexExpression":{"id":6374,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"4426:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4409:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6376,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"4436:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4409:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6378,"nodeType":"ExpressionStatement","src":"4409:33:22"},{"eventCall":{"arguments":[{"id":6380,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6353,"src":"4477:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6381,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6355,"src":"4484:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6382,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6360,"src":"4490:6:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"id":6383,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"4498:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6384,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6362,"src":"4506:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6379,"name":"FreeBalanceDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7622,"src":"4457:19:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_enum$_BalanceChangeReason_$7570_$_t_uint256_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,enum IBalanceKeeper.BalanceChangeReason,uint256,address)"}},"id":6385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4457:54:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6386,"nodeType":"EmitStatement","src":"4452:59:22"}]},"implemented":true,"kind":"function","modifiers":[],"name":"decreaseFreeBalance","nameLocation":"4194:19:22","parameters":{"id":6363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6353,"mutability":"mutable","name":"token","nameLocation":"4230:5:22","nodeType":"VariableDeclaration","scope":6388,"src":"4223:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6352,"nodeType":"UserDefinedTypeName","pathNode":{"id":6351,"name":"IERC20","nameLocations":["4223:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"4223:6:22"},"referencedDeclaration":938,"src":"4223:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6355,"mutability":"mutable","name":"user","nameLocation":"4253:4:22","nodeType":"VariableDeclaration","scope":6388,"src":"4245:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6354,"name":"address","nodeType":"ElementaryTypeName","src":"4245:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6357,"mutability":"mutable","name":"amount","nameLocation":"4275:6:22","nodeType":"VariableDeclaration","scope":6388,"src":"4267:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6356,"name":"uint256","nodeType":"ElementaryTypeName","src":"4267:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6360,"mutability":"mutable","name":"reason","nameLocation":"4311:6:22","nodeType":"VariableDeclaration","scope":6388,"src":"4291:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},"typeName":{"id":6359,"nodeType":"UserDefinedTypeName","pathNode":{"id":6358,"name":"BalanceChangeReason","nameLocations":["4291:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":7570,"src":"4291:19:22"},"referencedDeclaration":7570,"src":"4291:19:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},"visibility":"internal"},{"constant":false,"id":6362,"mutability":"mutable","name":"info","nameLocation":"4335:4:22","nodeType":"VariableDeclaration","scope":6388,"src":"4327:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6361,"name":"address","nodeType":"ElementaryTypeName","src":"4327:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4213:132:22"},"returnParameters":{"id":6364,"nodeType":"ParameterList","parameters":[],"src":"4354:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6403,"nodeType":"FunctionDefinition","src":"4524:142:22","nodes":[],"body":{"id":6402,"nodeType":"Block","src":"4597:69:22","nodes":[],"statements":[{"expression":{"id":6397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6395,"name":"diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6139,"src":"4607:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6396,"name":"_diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6390,"src":"4617:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4607:18:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6398,"nodeType":"ExpressionStatement","src":"4607:18:22"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6399,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4635:22:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4635:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6401,"nodeType":"ExpressionStatement","src":"4635:24:22"}]},"baseFunctions":[7895],"functionSelector":"c4d66de8","implemented":true,"kind":"function","modifiers":[{"id":6393,"kind":"modifierInvocation","modifierName":{"id":6392,"name":"initializer","nameLocations":["4585:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":107,"src":"4585:11:22"},"nodeType":"ModifierInvocation","src":"4585:11:22"}],"name":"initialize","nameLocation":"4533:10:22","parameters":{"id":6391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6390,"mutability":"mutable","name":"_diamond","nameLocation":"4561:8:22","nodeType":"VariableDeclaration","scope":6403,"src":"4553:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6389,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4543:32:22"},"returnParameters":{"id":6394,"nodeType":"ParameterList","parameters":[],"src":"4597:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6420,"nodeType":"FunctionDefinition","src":"4672:133:22","nodes":[],"body":{"id":6419,"nodeType":"Block","src":"4756:49:22","nodes":[],"statements":[{"expression":{"baseExpression":{"baseExpression":{"id":6413,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"4773:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6415,"indexExpression":{"id":6414,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6406,"src":"4786:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4773:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6417,"indexExpression":{"id":6416,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6408,"src":"4793:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4773:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6412,"id":6418,"nodeType":"Return","src":"4766:32:22"}]},"baseFunctions":[7905],"functionSelector":"de700da6","implemented":true,"kind":"function","modifiers":[],"name":"getFreeBalance","nameLocation":"4681:14:22","parameters":{"id":6409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6406,"mutability":"mutable","name":"token","nameLocation":"4703:5:22","nodeType":"VariableDeclaration","scope":6420,"src":"4696:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6405,"nodeType":"UserDefinedTypeName","pathNode":{"id":6404,"name":"IERC20","nameLocations":["4696:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"4696:6:22"},"referencedDeclaration":938,"src":"4696:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6408,"mutability":"mutable","name":"user","nameLocation":"4718:4:22","nodeType":"VariableDeclaration","scope":6420,"src":"4710:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6407,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4695:28:22"},"returnParameters":{"id":6412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6420,"src":"4747:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6410,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4746:9:22"},"scope":7556,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":6443,"nodeType":"FunctionDefinition","src":"4811:161:22","nodes":[],"body":{"id":6442,"nodeType":"Block","src":"4895:77:22","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6430,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"4912:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6432,"indexExpression":{"id":6431,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6423,"src":"4925:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4912:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6434,"indexExpression":{"id":6433,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6425,"src":"4932:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4912:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"baseExpression":{"id":6435,"name":"dealBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"4940:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6437,"indexExpression":{"id":6436,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6423,"src":"4953:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4940:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6439,"indexExpression":{"id":6438,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6425,"src":"4960:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4940:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4912:53:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6429,"id":6441,"nodeType":"Return","src":"4905:60:22"}]},"baseFunctions":[7915],"functionSelector":"d4f4ba48","implemented":true,"kind":"function","modifiers":[],"name":"getFullBalance","nameLocation":"4820:14:22","parameters":{"id":6426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6423,"mutability":"mutable","name":"token","nameLocation":"4842:5:22","nodeType":"VariableDeclaration","scope":6443,"src":"4835:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6422,"nodeType":"UserDefinedTypeName","pathNode":{"id":6421,"name":"IERC20","nameLocations":["4835:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"4835:6:22"},"referencedDeclaration":938,"src":"4835:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6425,"mutability":"mutable","name":"user","nameLocation":"4857:4:22","nodeType":"VariableDeclaration","scope":6443,"src":"4849:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6424,"name":"address","nodeType":"ElementaryTypeName","src":"4849:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4834:28:22"},"returnParameters":{"id":6429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6443,"src":"4886:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6427,"name":"uint256","nodeType":"ElementaryTypeName","src":"4886:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4885:9:22"},"scope":7556,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":6508,"nodeType":"FunctionDefinition","src":"5070:537:22","nodes":[],"body":{"id":6507,"nodeType":"Block","src":"5128:479:22","nodes":[],"statements":[{"assignments":[6452],"declarations":[{"constant":false,"id":6452,"mutability":"mutable","name":"amount","nameLocation":"5146:6:22","nodeType":"VariableDeclaration","scope":6507,"src":"5138:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6451,"name":"uint256","nodeType":"ElementaryTypeName","src":"5138:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6458,"initialValue":{"baseExpression":{"baseExpression":{"id":6453,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"5155:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6455,"indexExpression":{"id":6454,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5168:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5155:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6457,"indexExpression":{"id":6456,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"5175:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5155:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5138:42:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6460,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5198:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5207:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5198:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a205f73656e64546f4c696d626f3a206e6f7420656e6f7567682062616c616e6365","id":6463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5210:49:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_caa1cbc2857a35045ded9d8fc7dbea3870eafd16b9c05b6bc9461b383f18eca0","typeString":"literal_string \"BalanceKeeper: _sendToLimbo: not enough balance\""},"value":"BalanceKeeper: _sendToLimbo: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_caa1cbc2857a35045ded9d8fc7dbea3870eafd16b9c05b6bc9461b383f18eca0","typeString":"literal_string \"BalanceKeeper: _sendToLimbo: not enough balance\""}],"id":6459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5190:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5190:70:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6465,"nodeType":"ExpressionStatement","src":"5190:70:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6467,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"5278:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6469,"indexExpression":{"id":6468,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5295:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5278:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5305:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5278:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a205f73656e64546f4c696d626f3a206e6f7420656e6f75676820746f74616c2062616c616e6365","id":6472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5313:55:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_53d9efe9cfc9b7f647154e8bd803a6f19ed06b431e7f9c7426b69dbd7641eab5","typeString":"literal_string \"BalanceKeeper: _sendToLimbo: not enough total balance\""},"value":"BalanceKeeper: _sendToLimbo: not enough total balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53d9efe9cfc9b7f647154e8bd803a6f19ed06b431e7f9c7426b69dbd7641eab5","typeString":"literal_string \"BalanceKeeper: _sendToLimbo: not enough total balance\""}],"id":6466,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5270:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5270:99:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6474,"nodeType":"ExpressionStatement","src":"5270:99:22"},{"expression":{"id":6481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6475,"name":"limbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"5379:5:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6478,"indexExpression":{"id":6476,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5385:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5379:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6479,"indexExpression":{"id":6477,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"5392:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5379:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6480,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5401:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5379:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6482,"nodeType":"ExpressionStatement","src":"5379:28:22"},{"expression":{"id":6487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6483,"name":"limboTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"5417:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6485,"indexExpression":{"id":6484,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5428:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5417:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6486,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5438:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5417:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6488,"nodeType":"ExpressionStatement","src":"5417:27:22"},{"expression":{"arguments":[{"id":6490,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5474:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6491,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"5481:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6492,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5487:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6493,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"5495:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5515:13:22","memberName":"SEND_TO_LIMBO","nodeType":"MemberAccess","referencedDeclaration":7567,"src":"5495:33:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":6495,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5530:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5534:6:22","memberName":"sender","nodeType":"MemberAccess","src":"5530:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6489,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"5454:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5454:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6498,"nodeType":"ExpressionStatement","src":"5454:87:22"},{"eventCall":{"arguments":[{"id":6500,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6446,"src":"5568:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6501,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"5575:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5581:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5585:6:22","memberName":"sender","nodeType":"MemberAccess","src":"5581:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6504,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"5593:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6499,"name":"SentToLimbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"5556:11:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5556:44:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6506,"nodeType":"EmitStatement","src":"5551:49:22"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_sendToLimbo","nameLocation":"5079:12:22","parameters":{"id":6449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6446,"mutability":"mutable","name":"token","nameLocation":"5099:5:22","nodeType":"VariableDeclaration","scope":6508,"src":"5092:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6445,"nodeType":"UserDefinedTypeName","pathNode":{"id":6444,"name":"IERC20","nameLocations":["5092:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"5092:6:22"},"referencedDeclaration":938,"src":"5092:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6448,"mutability":"mutable","name":"user","nameLocation":"5114:4:22","nodeType":"VariableDeclaration","scope":6508,"src":"5106:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6447,"name":"address","nodeType":"ElementaryTypeName","src":"5106:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5091:28:22"},"returnParameters":{"id":6450,"nodeType":"ParameterList","parameters":[],"src":"5128:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6546,"nodeType":"FunctionDefinition","src":"5645:264:22","nodes":[],"body":{"id":6545,"nodeType":"Block","src":"5746:163:22","nodes":[],"statements":[{"expression":{"id":6524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6520,"name":"poolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"5756:11:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6522,"indexExpression":{"id":6521,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6511,"src":"5768:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5756:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6523,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6513,"src":"5778:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5756:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6525,"nodeType":"ExpressionStatement","src":"5756:28:22"},{"expression":{"arguments":[{"expression":{"id":6529,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5817:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5821:6:22","memberName":"sender","nodeType":"MemberAccess","src":"5817:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6533,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5837:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_BalanceKeeper_$7556","typeString":"contract BalanceKeeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalanceKeeper_$7556","typeString":"contract BalanceKeeper"}],"id":6532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5829:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6531,"name":"address","nodeType":"ElementaryTypeName","src":"5829:7:22","typeDescriptions":{}}},"id":6534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6535,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6513,"src":"5844:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6526,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6511,"src":"5794:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":6528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5800:16:22","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1012,"src":"5794:22:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5794:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6537,"nodeType":"ExpressionStatement","src":"5794:57:22"},{"eventCall":{"arguments":[{"id":6539,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6511,"src":"5876:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":6540,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5883:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5887:6:22","memberName":"sender","nodeType":"MemberAccess","src":"5883:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6542,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6513,"src":"5895:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6538,"name":"PoolTopUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"5866:9:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5866:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6544,"nodeType":"EmitStatement","src":"5861:41:22"}]},"baseFunctions":[7939],"functionSelector":"3eb026af","implemented":true,"kind":"function","modifiers":[{"id":6516,"kind":"modifierInvocation","modifierName":{"id":6515,"name":"nonReentrant","nameLocations":["5703:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"5703:12:22"},"nodeType":"ModifierInvocation","src":"5703:12:22"},{"id":6518,"kind":"modifierInvocation","modifierName":{"id":6517,"name":"onlyCoordinatorOrDiamondOwner","nameLocations":["5716:29:22"],"nodeType":"IdentifierPath","referencedDeclaration":6290,"src":"5716:29:22"},"nodeType":"ModifierInvocation","src":"5716:29:22"}],"name":"poolTopUp","nameLocation":"5654:9:22","parameters":{"id":6514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6511,"mutability":"mutable","name":"token","nameLocation":"5671:5:22","nodeType":"VariableDeclaration","scope":6546,"src":"5664:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6510,"nodeType":"UserDefinedTypeName","pathNode":{"id":6509,"name":"IERC20","nameLocations":["5664:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"5664:6:22"},"referencedDeclaration":938,"src":"5664:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6513,"mutability":"mutable","name":"amount","nameLocation":"5686:6:22","nodeType":"VariableDeclaration","scope":6546,"src":"5678:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6512,"name":"uint256","nodeType":"ElementaryTypeName","src":"5678:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5663:30:22"},"returnParameters":{"id":6519,"nodeType":"ParameterList","parameters":[],"src":"5746:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6589,"nodeType":"FunctionDefinition","src":"5915:343:22","nodes":[],"body":{"id":6588,"nodeType":"Block","src":"6006:252:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6559,"name":"poolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"6024:11:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6561,"indexExpression":{"id":6560,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"6036:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6024:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6562,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"6046:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6024:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206e6f7420656e6f75676820616d6f756e7420746f2077697468647261772066726f6d20706f6f6c","id":6564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6054:56:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_d92125f15c3d63ad49ceefce95ce78253dd372f1c5e5135dbbbebd23b4177153","typeString":"literal_string \"BalanceKeeper: not enough amount to withdraw from pool\""},"value":"BalanceKeeper: not enough amount to withdraw from pool"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d92125f15c3d63ad49ceefce95ce78253dd372f1c5e5135dbbbebd23b4177153","typeString":"literal_string \"BalanceKeeper: not enough amount to withdraw from pool\""}],"id":6558,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6016:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6016:95:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6566,"nodeType":"ExpressionStatement","src":"6016:95:22"},{"expression":{"id":6571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6567,"name":"poolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"6121:11:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6569,"indexExpression":{"id":6568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"6133:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6121:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6570,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"6143:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6121:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6572,"nodeType":"ExpressionStatement","src":"6121:28:22"},{"expression":{"arguments":[{"expression":{"id":6576,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6178:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6182:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6178:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6578,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"6190:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6573,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"6159:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":6575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6165:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":985,"src":"6159:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6159:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6580,"nodeType":"ExpressionStatement","src":"6159:38:22"},{"eventCall":{"arguments":[{"id":6582,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6549,"src":"6225:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":6583,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6232:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6236:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6232:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6585,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"6244:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6581,"name":"PoolWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7690,"src":"6212:12:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6212:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6587,"nodeType":"EmitStatement","src":"6207:44:22"}]},"baseFunctions":[7947],"functionSelector":"db2aa127","implemented":true,"kind":"function","modifiers":[{"id":6554,"kind":"modifierInvocation","modifierName":{"id":6553,"name":"nonReentrant","nameLocations":["5976:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"5976:12:22"},"nodeType":"ModifierInvocation","src":"5976:12:22"},{"id":6556,"kind":"modifierInvocation","modifierName":{"id":6555,"name":"onlyDiamondOwner","nameLocations":["5989:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"5989:16:22"},"nodeType":"ModifierInvocation","src":"5989:16:22"}],"name":"poolWithdraw","nameLocation":"5924:12:22","parameters":{"id":6552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6549,"mutability":"mutable","name":"token","nameLocation":"5944:5:22","nodeType":"VariableDeclaration","scope":6589,"src":"5937:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6548,"nodeType":"UserDefinedTypeName","pathNode":{"id":6547,"name":"IERC20","nameLocations":["5937:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"5937:6:22"},"referencedDeclaration":938,"src":"5937:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6551,"mutability":"mutable","name":"amount","nameLocation":"5959:6:22","nodeType":"VariableDeclaration","scope":6589,"src":"5951:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6550,"name":"uint256","nodeType":"ElementaryTypeName","src":"5951:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5936:30:22"},"returnParameters":{"id":6557,"nodeType":"ParameterList","parameters":[],"src":"6006:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6604,"nodeType":"FunctionDefinition","src":"6264:149:22","nodes":[],"body":{"id":6603,"nodeType":"Block","src":"6320:93:22","nodes":[],"statements":[{"expression":{"id":6596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6594,"name":"manualWithdrawEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"6330:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6354:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6330:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6597,"nodeType":"ExpressionStatement","src":"6330:28:22"},{"eventCall":{"arguments":[{"expression":{"id":6599,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6395:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6399:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6395:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6598,"name":"ManualWithdrawEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7716,"src":"6373:21:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6602,"nodeType":"EmitStatement","src":"6368:38:22"}]},"baseFunctions":[7950],"functionSelector":"3adce715","implemented":true,"kind":"function","modifiers":[{"id":6592,"kind":"modifierInvocation","modifierName":{"id":6591,"name":"onlyCoordinator","nameLocations":["6304:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"6304:15:22"},"nodeType":"ModifierInvocation","src":"6304:15:22"}],"name":"enableOnchainRefund","nameLocation":"6273:19:22","parameters":{"id":6590,"nodeType":"ParameterList","parameters":[],"src":"6292:2:22"},"returnParameters":{"id":6593,"nodeType":"ParameterList","parameters":[],"src":"6320:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6619,"nodeType":"FunctionDefinition","src":"6419:152:22","nodes":[],"body":{"id":6618,"nodeType":"Block","src":"6476:95:22","nodes":[],"statements":[{"expression":{"id":6611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6609,"name":"manualWithdrawEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"6486:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6510:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6486:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6612,"nodeType":"ExpressionStatement","src":"6486:29:22"},{"eventCall":{"arguments":[{"expression":{"id":6614,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6553:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6557:6:22","memberName":"sender","nodeType":"MemberAccess","src":"6553:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6613,"name":"ManualWithdrawDisabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7720,"src":"6530:22:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6530:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6617,"nodeType":"EmitStatement","src":"6525:39:22"}]},"baseFunctions":[7953],"functionSelector":"9cf8fc36","implemented":true,"kind":"function","modifiers":[{"id":6607,"kind":"modifierInvocation","modifierName":{"id":6606,"name":"onlyCoordinator","nameLocations":["6460:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"6460:15:22"},"nodeType":"ModifierInvocation","src":"6460:15:22"}],"name":"disableOnchainRefund","nameLocation":"6428:20:22","parameters":{"id":6605,"nodeType":"ParameterList","parameters":[],"src":"6448:2:22"},"returnParameters":{"id":6608,"nodeType":"ParameterList","parameters":[],"src":"6476:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6680,"nodeType":"FunctionDefinition","src":"6641:513:22","nodes":[],"body":{"id":6679,"nodeType":"Block","src":"6739:415:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6635,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"6757:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6637,"indexExpression":{"id":6636,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6623,"src":"6774:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6757:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6638,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6627,"src":"6784:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6757:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20766f646f70616457697468647261773a206e6f7420656e6f75676820746f74616c2062616c616e6365","id":6640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6792:58:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_efd1d0f779dade6a376f81e11f5320020b51c7e24a2ee60a548ad109fff4994a","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: not enough total balance\""},"value":"BalanceKeeper: vodopadWithdraw: not enough total balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_efd1d0f779dade6a376f81e11f5320020b51c7e24a2ee60a548ad109fff4994a","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: not enough total balance\""}],"id":6634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6749:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6749:102:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6642,"nodeType":"ExpressionStatement","src":"6749:102:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6644,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"6869:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6646,"indexExpression":{"id":6645,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6623,"src":"6882:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6869:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6648,"indexExpression":{"id":6647,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6625,"src":"6889:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6869:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6649,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6627,"src":"6898:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6869:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20766f646f70616457697468647261773a206e6f7420656e6f7567682062616c616e6365","id":6651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6906:52:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_eecbf76b793dd02dbf0f3aa6256ca3bd0e014ef2d0dc0745e52aa4e088c70dc7","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: not enough balance\""},"value":"BalanceKeeper: vodopadWithdraw: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eecbf76b793dd02dbf0f3aa6256ca3bd0e014ef2d0dc0745e52aa4e088c70dc7","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: not enough balance\""}],"id":6643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6861:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6861:98:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6653,"nodeType":"ExpressionStatement","src":"6861:98:22"},{"expression":{"arguments":[{"id":6655,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6623,"src":"6989:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6656,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6625,"src":"6996:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6657,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6627,"src":"7002:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6658,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"7010:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7030:6:22","memberName":"REFUND","nodeType":"MemberAccess","referencedDeclaration":7569,"src":"7010:26:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":6660,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7038:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7042:6:22","memberName":"sender","nodeType":"MemberAccess","src":"7038:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6654,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"6969:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6969:80:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6663,"nodeType":"ExpressionStatement","src":"6969:80:22"},{"expression":{"arguments":[{"id":6667,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6625,"src":"7078:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6668,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6627,"src":"7084:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6664,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6623,"src":"7059:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":6666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":985,"src":"7059:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7059:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6670,"nodeType":"ExpressionStatement","src":"7059:32:22"},{"eventCall":{"arguments":[{"id":6672,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6623,"src":"7115:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6673,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6625,"src":"7122:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6674,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6627,"src":"7128:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6675,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7136:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7140:6:22","memberName":"sender","nodeType":"MemberAccess","src":"7136:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6671,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7731,"src":"7106:8:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,address)"}},"id":6677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7106:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6678,"nodeType":"EmitStatement","src":"7101:46:22"}]},"baseFunctions":[7963],"documentation":{"id":6620,"nodeType":"StructuredDocumentation","src":"6577:59:22","text":"@dev Refunds the specified amount of tokens to the user"},"functionSelector":"82ad6f35","implemented":true,"kind":"function","modifiers":[{"id":6630,"kind":"modifierInvocation","modifierName":{"id":6629,"name":"nonReentrant","nameLocations":["6710:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"6710:12:22"},"nodeType":"ModifierInvocation","src":"6710:12:22"},{"id":6632,"kind":"modifierInvocation","modifierName":{"id":6631,"name":"onlyCoordinator","nameLocations":["6723:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"6723:15:22"},"nodeType":"ModifierInvocation","src":"6723:15:22"}],"name":"refund","nameLocation":"6650:6:22","parameters":{"id":6628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6623,"mutability":"mutable","name":"token","nameLocation":"6664:5:22","nodeType":"VariableDeclaration","scope":6680,"src":"6657:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6622,"nodeType":"UserDefinedTypeName","pathNode":{"id":6621,"name":"IERC20","nameLocations":["6657:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"6657:6:22"},"referencedDeclaration":938,"src":"6657:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6625,"mutability":"mutable","name":"user","nameLocation":"6679:4:22","nodeType":"VariableDeclaration","scope":6680,"src":"6671:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6624,"name":"address","nodeType":"ElementaryTypeName","src":"6671:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6627,"mutability":"mutable","name":"amount","nameLocation":"6693:6:22","nodeType":"VariableDeclaration","scope":6680,"src":"6685:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6626,"name":"uint256","nodeType":"ElementaryTypeName","src":"6685:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6656:44:22"},"returnParameters":{"id":6633,"nodeType":"ParameterList","parameters":[],"src":"6739:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6701,"nodeType":"FunctionDefinition","src":"7160:163:22","nodes":[],"body":{"id":6700,"nodeType":"Block","src":"7219:104:22","nodes":[],"statements":[{"expression":{"id":6691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6687,"name":"frozen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"7229:6:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6689,"indexExpression":{"id":6688,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6682,"src":"7236:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7229:12:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6690,"name":"freeze","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"7244:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7229:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6692,"nodeType":"ExpressionStatement","src":"7229:21:22"},{"eventCall":{"arguments":[{"id":6694,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6682,"src":"7291:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6695,"name":"freeze","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"7297:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":6696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7305:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7309:6:22","memberName":"sender","nodeType":"MemberAccess","src":"7305:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6693,"name":"AccountFreezeStateChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7750,"src":"7265:25:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$_t_address_$returns$__$","typeString":"function (address,bool,address)"}},"id":6698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:51:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6699,"nodeType":"EmitStatement","src":"7260:56:22"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_freezeAccount","nameLocation":"7169:14:22","parameters":{"id":6685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6682,"mutability":"mutable","name":"user","nameLocation":"7192:4:22","nodeType":"VariableDeclaration","scope":6701,"src":"7184:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6681,"name":"address","nodeType":"ElementaryTypeName","src":"7184:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6684,"mutability":"mutable","name":"freeze","nameLocation":"7203:6:22","nodeType":"VariableDeclaration","scope":6701,"src":"7198:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6683,"name":"bool","nodeType":"ElementaryTypeName","src":"7198:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7183:27:22"},"returnParameters":{"id":6686,"nodeType":"ParameterList","parameters":[],"src":"7219:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6714,"nodeType":"FunctionDefinition","src":"7329:105:22","nodes":[],"body":{"id":6713,"nodeType":"Block","src":"7391:43:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6709,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6703,"src":"7416:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":6710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7422:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6708,"name":"_freezeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6701,"src":"7401:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":6711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7401:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6712,"nodeType":"ExpressionStatement","src":"7401:26:22"}]},"baseFunctions":[7968],"functionSelector":"f26c159f","implemented":true,"kind":"function","modifiers":[{"id":6706,"kind":"modifierInvocation","modifierName":{"id":6705,"name":"onlyCoordinator","nameLocations":["7375:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"7375:15:22"},"nodeType":"ModifierInvocation","src":"7375:15:22"}],"name":"freezeAccount","nameLocation":"7338:13:22","parameters":{"id":6704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6703,"mutability":"mutable","name":"user","nameLocation":"7360:4:22","nodeType":"VariableDeclaration","scope":6714,"src":"7352:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6702,"name":"address","nodeType":"ElementaryTypeName","src":"7352:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7351:14:22"},"returnParameters":{"id":6707,"nodeType":"ParameterList","parameters":[],"src":"7391:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6727,"nodeType":"FunctionDefinition","src":"7440:108:22","nodes":[],"body":{"id":6726,"nodeType":"Block","src":"7504:44:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6722,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6716,"src":"7529:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":6723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7535:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6721,"name":"_freezeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6701,"src":"7514:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":6724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7514:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6725,"nodeType":"ExpressionStatement","src":"7514:27:22"}]},"baseFunctions":[7973],"functionSelector":"788649ea","implemented":true,"kind":"function","modifiers":[{"id":6719,"kind":"modifierInvocation","modifierName":{"id":6718,"name":"onlyCoordinator","nameLocations":["7488:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"7488:15:22"},"nodeType":"ModifierInvocation","src":"7488:15:22"}],"name":"unfreezeAccount","nameLocation":"7449:15:22","parameters":{"id":6717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6716,"mutability":"mutable","name":"user","nameLocation":"7473:4:22","nodeType":"VariableDeclaration","scope":6727,"src":"7465:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6715,"name":"address","nodeType":"ElementaryTypeName","src":"7465:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7464:14:22"},"returnParameters":{"id":6720,"nodeType":"ParameterList","parameters":[],"src":"7504:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6743,"nodeType":"FunctionDefinition","src":"7554:116:22","nodes":[],"body":{"id":6742,"nodeType":"Block","src":"7628:42:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6738,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6730,"src":"7651:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6739,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6732,"src":"7658:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6737,"name":"_sendToLimbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6508,"src":"7638:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$returns$__$","typeString":"function (contract IERC20,address)"}},"id":6740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7638:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6741,"nodeType":"ExpressionStatement","src":"7638:25:22"}]},"baseFunctions":[7981],"functionSelector":"ec178c13","implemented":true,"kind":"function","modifiers":[{"id":6735,"kind":"modifierInvocation","modifierName":{"id":6734,"name":"onlyCoordinator","nameLocations":["7612:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"7612:15:22"},"nodeType":"ModifierInvocation","src":"7612:15:22"}],"name":"sendToLimbo","nameLocation":"7563:11:22","parameters":{"id":6733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6730,"mutability":"mutable","name":"token","nameLocation":"7582:5:22","nodeType":"VariableDeclaration","scope":6743,"src":"7575:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6729,"nodeType":"UserDefinedTypeName","pathNode":{"id":6728,"name":"IERC20","nameLocations":["7575:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"7575:6:22"},"referencedDeclaration":938,"src":"7575:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6732,"mutability":"mutable","name":"user","nameLocation":"7597:4:22","nodeType":"VariableDeclaration","scope":6743,"src":"7589:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6731,"name":"address","nodeType":"ElementaryTypeName","src":"7589:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7574:28:22"},"returnParameters":{"id":6736,"nodeType":"ParameterList","parameters":[],"src":"7628:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6790,"nodeType":"FunctionDefinition","src":"7676:347:22","nodes":[],"body":{"id":6789,"nodeType":"Block","src":"7754:269:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6754,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"7772:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6756,"indexExpression":{"id":6755,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"7792:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7772:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6758,"indexExpression":{"id":6757,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"7799:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7772:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7807:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7772:36:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a207665746f3a206e6f2072657175657374","id":6761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7810:33:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ac6b0762065572c6507f222317bdb362aa46e494ad1bf4dfe3cb8b22400bf3b","typeString":"literal_string \"BalanceKeeper: veto: no request\""},"value":"BalanceKeeper: veto: no request"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ac6b0762065572c6507f222317bdb362aa46e494ad1bf4dfe3cb8b22400bf3b","typeString":"literal_string \"BalanceKeeper: veto: no request\""}],"id":6753,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7764:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7764:80:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6763,"nodeType":"ExpressionStatement","src":"7764:80:22"},{"expression":{"id":6770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6764,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"7854:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6767,"indexExpression":{"id":6765,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"7874:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7854:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6768,"indexExpression":{"id":6766,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"7881:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7854:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7889:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7854:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6771,"nodeType":"ExpressionStatement","src":"7854:36:22"},{"expression":{"arguments":[{"id":6773,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"7913:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6774,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"7920:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6772,"name":"_sendToLimbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6508,"src":"7900:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$returns$__$","typeString":"function (contract IERC20,address)"}},"id":6775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7900:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6776,"nodeType":"ExpressionStatement","src":"7900:25:22"},{"expression":{"arguments":[{"id":6778,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"7950:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":6779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7956:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6777,"name":"_freezeAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6701,"src":"7935:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":6780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7935:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6781,"nodeType":"ExpressionStatement","src":"7935:26:22"},{"eventCall":{"arguments":[{"id":6783,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"7992:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6784,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"7999:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6785,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8005:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8009:6:22","memberName":"sender","nodeType":"MemberAccess","src":"8005:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6782,"name":"TerminationVeto","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7772,"src":"7976:15:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,address)"}},"id":6787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7976:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6788,"nodeType":"EmitStatement","src":"7971:45:22"}]},"baseFunctions":[7989],"functionSelector":"7df5070f","implemented":true,"kind":"function","modifiers":[{"id":6751,"kind":"modifierInvocation","modifierName":{"id":6750,"name":"onlyCoordinator","nameLocations":["7738:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"7738:15:22"},"nodeType":"ModifierInvocation","src":"7738:15:22"}],"name":"terminationVeto","nameLocation":"7685:15:22","parameters":{"id":6749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6746,"mutability":"mutable","name":"token","nameLocation":"7708:5:22","nodeType":"VariableDeclaration","scope":6790,"src":"7701:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6745,"nodeType":"UserDefinedTypeName","pathNode":{"id":6744,"name":"IERC20","nameLocations":["7701:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"7701:6:22"},"referencedDeclaration":938,"src":"7701:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6748,"mutability":"mutable","name":"user","nameLocation":"7723:4:22","nodeType":"VariableDeclaration","scope":6790,"src":"7715:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6747,"name":"address","nodeType":"ElementaryTypeName","src":"7715:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7700:28:22"},"returnParameters":{"id":6752,"nodeType":"ParameterList","parameters":[],"src":"7754:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6857,"nodeType":"FunctionDefinition","src":"8057:579:22","nodes":[],"body":{"id":6856,"nodeType":"Block","src":"8186:450:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6808,"name":"topUpIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6197,"src":"8204:8:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string memory => bool)"}},"id":6810,"indexExpression":{"id":6809,"name":"topUpId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6799,"src":"8213:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8204:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":6811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8225:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8204:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2075736572546f7055703a20746f702d757020696420616c72656164792075736564","id":6813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8232:50:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_4bc9d07c1e4ec0ad340c9a3963eb11b4f63ae3187a54d674ace45002fda12625","typeString":"literal_string \"BalanceKeeper: userTopUp: top-up id already used\""},"value":"BalanceKeeper: userTopUp: top-up id already used"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bc9d07c1e4ec0ad340c9a3963eb11b4f63ae3187a54d674ace45002fda12625","typeString":"literal_string \"BalanceKeeper: userTopUp: top-up id already used\""}],"id":6807,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8196:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8196:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6815,"nodeType":"ExpressionStatement","src":"8196:87:22"},{"expression":{"id":6820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6816,"name":"topUpIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6197,"src":"8293:8:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string memory => bool)"}},"id":6818,"indexExpression":{"id":6817,"name":"topUpId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6799,"src":"8302:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8293:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8313:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8293:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6821,"nodeType":"ExpressionStatement","src":"8293:24:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6823,"name":"poolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"8335:11:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6825,"indexExpression":{"id":6824,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"8347:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8335:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6826,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"8357:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8335:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2075736572546f7055703a206e6f7420656e6f75676820676174657761792062616c616e6365","id":6828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8365:54:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_cabbe46b9782a0643b3aa0fbd1de517abf943e7d582f43db1ce4cd44798c5ad9","typeString":"literal_string \"BalanceKeeper: userTopUp: not enough gateway balance\""},"value":"BalanceKeeper: userTopUp: not enough gateway balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cabbe46b9782a0643b3aa0fbd1de517abf943e7d582f43db1ce4cd44798c5ad9","typeString":"literal_string \"BalanceKeeper: userTopUp: not enough gateway balance\""}],"id":6822,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8327:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8327:93:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6830,"nodeType":"ExpressionStatement","src":"8327:93:22"},{"expression":{"id":6835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6831,"name":"poolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"8430:11:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6833,"indexExpression":{"id":6832,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"8442:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8430:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6834,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"8452:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8430:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6836,"nodeType":"ExpressionStatement","src":"8430:28:22"},{"expression":{"arguments":[{"id":6838,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"8488:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6839,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"8495:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6840,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"8501:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6841,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"8509:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8529:11:22","memberName":"USER_TOP_UP","nodeType":"MemberAccess","referencedDeclaration":7561,"src":"8509:31:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":6843,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8542:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8546:6:22","memberName":"sender","nodeType":"MemberAccess","src":"8542:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6837,"name":"increaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"8468:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8468:85:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6846,"nodeType":"ExpressionStatement","src":"8468:85:22"},{"eventCall":{"arguments":[{"id":6848,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"8588:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6849,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"8595:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6850,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8601:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8605:6:22","memberName":"sender","nodeType":"MemberAccess","src":"8601:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6852,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"8613:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6853,"name":"topUpId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6799,"src":"8621:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6847,"name":"UserBalanceIncrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7703,"src":"8568:19:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,string memory)"}},"id":6854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8568:61:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6855,"nodeType":"EmitStatement","src":"8563:66:22"}]},"baseFunctions":[8001],"functionSelector":"31acc942","implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6802,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"8168:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6803,"kind":"modifierInvocation","modifierName":{"id":6801,"name":"onlyIfNotFrozen","nameLocations":["8152:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"8152:15:22"},"nodeType":"ModifierInvocation","src":"8152:21:22"},{"id":6805,"kind":"modifierInvocation","modifierName":{"id":6804,"name":"onlyVodopad","nameLocations":["8174:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":6260,"src":"8174:11:22"},"nodeType":"ModifierInvocation","src":"8174:11:22"}],"name":"userTopUp","nameLocation":"8066:9:22","parameters":{"id":6800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6793,"mutability":"mutable","name":"token","nameLocation":"8083:5:22","nodeType":"VariableDeclaration","scope":6857,"src":"8076:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6792,"nodeType":"UserDefinedTypeName","pathNode":{"id":6791,"name":"IERC20","nameLocations":["8076:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"8076:6:22"},"referencedDeclaration":938,"src":"8076:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6795,"mutability":"mutable","name":"user","nameLocation":"8098:4:22","nodeType":"VariableDeclaration","scope":6857,"src":"8090:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6794,"name":"address","nodeType":"ElementaryTypeName","src":"8090:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6797,"mutability":"mutable","name":"amount","nameLocation":"8112:6:22","nodeType":"VariableDeclaration","scope":6857,"src":"8104:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6796,"name":"uint256","nodeType":"ElementaryTypeName","src":"8104:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6799,"mutability":"mutable","name":"topUpId","nameLocation":"8134:7:22","nodeType":"VariableDeclaration","scope":6857,"src":"8120:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6798,"name":"string","nodeType":"ElementaryTypeName","src":"8120:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8075:67:22"},"returnParameters":{"id":6806,"nodeType":"ParameterList","parameters":[],"src":"8186:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6930,"nodeType":"FunctionDefinition","src":"8667:649:22","nodes":[],"body":{"id":6929,"nodeType":"Block","src":"8821:495:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6877,"name":"dealBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"8839:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6879,"indexExpression":{"id":6878,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"8852:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8839:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6881,"indexExpression":{"id":6880,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6862,"src":"8859:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8839:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6882,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"8868:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8839:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206d6f766542616c616e636546726f6d4465616c3a206e6f7420656e6f7567682062616c616e6365","id":6884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8876:56:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8669a0fa6dea78278bad2f40c2a28a41d9dc78d6ac471bd8b26b32e2816aed93","typeString":"literal_string \"BalanceKeeper: moveBalanceFromDeal: not enough balance\""},"value":"BalanceKeeper: moveBalanceFromDeal: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8669a0fa6dea78278bad2f40c2a28a41d9dc78d6ac471bd8b26b32e2816aed93","typeString":"literal_string \"BalanceKeeper: moveBalanceFromDeal: not enough balance\""}],"id":6876,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8831:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8831:102:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6886,"nodeType":"ExpressionStatement","src":"8831:102:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6888,"name":"dealBalancesTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6172,"src":"8951:17:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6890,"indexExpression":{"id":6889,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"8969:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8951:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6891,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"8979:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8951:34:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206d6f766542616c616e636546726f6d4465616c3a206e6f7420656e6f75676820746f74616c2062616c616e6365","id":6893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8987:62:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_345a8dc139820cc868c51ce4441d56d62542afe1cf188703ed25a9024119f1df","typeString":"literal_string \"BalanceKeeper: moveBalanceFromDeal: not enough total balance\""},"value":"BalanceKeeper: moveBalanceFromDeal: not enough total balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_345a8dc139820cc868c51ce4441d56d62542afe1cf188703ed25a9024119f1df","typeString":"literal_string \"BalanceKeeper: moveBalanceFromDeal: not enough total balance\""}],"id":6887,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8943:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8943:107:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6895,"nodeType":"ExpressionStatement","src":"8943:107:22"},{"expression":{"id":6902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6896,"name":"dealBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"9060:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6899,"indexExpression":{"id":6897,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"9073:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9060:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6900,"indexExpression":{"id":6898,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6862,"src":"9080:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9060:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6901,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"9089:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9060:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6903,"nodeType":"ExpressionStatement","src":"9060:35:22"},{"expression":{"id":6908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6904,"name":"dealBalancesTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6172,"src":"9105:17:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6906,"indexExpression":{"id":6905,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"9123:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9105:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6907,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"9133:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9105:34:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6909,"nodeType":"ExpressionStatement","src":"9105:34:22"},{"expression":{"arguments":[{"id":6911,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"9169:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6912,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6862,"src":"9176:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6913,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"9182:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6914,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"9190:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9210:14:22","memberName":"MOVE_FROM_DEAL","nodeType":"MemberAccess","referencedDeclaration":7562,"src":"9190:34:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":6916,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9226:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9230:6:22","memberName":"sender","nodeType":"MemberAccess","src":"9226:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6910,"name":"increaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"9149:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9149:88:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6919,"nodeType":"ExpressionStatement","src":"9149:88:22"},{"eventCall":{"arguments":[{"id":6921,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"9267:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":6922,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9274:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9278:6:22","memberName":"sender","nodeType":"MemberAccess","src":"9274:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6924,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6862,"src":"9286:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6925,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"9292:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6926,"name":"reserved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6866,"src":"9300:8:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6920,"name":"DealWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7666,"src":"9254:12:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$_t_uint8_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,uint8)"}},"id":6927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9254:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6928,"nodeType":"EmitStatement","src":"9249:60:22"}]},"baseFunctions":[8013],"functionSelector":"88081fcb","implemented":true,"kind":"function","modifiers":[{"id":6869,"kind":"modifierInvocation","modifierName":{"id":6868,"name":"onlyDeal","nameLocations":["8773:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":6244,"src":"8773:8:22"},"nodeType":"ModifierInvocation","src":"8773:8:22"},{"arguments":[{"id":6871,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6862,"src":"8798:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6872,"kind":"modifierInvocation","modifierName":{"id":6870,"name":"onlyIfNotFrozen","nameLocations":["8782:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"8782:15:22"},"nodeType":"ModifierInvocation","src":"8782:21:22"},{"id":6874,"kind":"modifierInvocation","modifierName":{"id":6873,"name":"nonReentrant","nameLocations":["8804:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"8804:12:22"},"nodeType":"ModifierInvocation","src":"8804:12:22"}],"name":"moveBalanceFromDeal","nameLocation":"8676:19:22","parameters":{"id":6867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6860,"mutability":"mutable","name":"token","nameLocation":"8703:5:22","nodeType":"VariableDeclaration","scope":6930,"src":"8696:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6859,"nodeType":"UserDefinedTypeName","pathNode":{"id":6858,"name":"IERC20","nameLocations":["8696:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"8696:6:22"},"referencedDeclaration":938,"src":"8696:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6862,"mutability":"mutable","name":"user","nameLocation":"8718:4:22","nodeType":"VariableDeclaration","scope":6930,"src":"8710:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6861,"name":"address","nodeType":"ElementaryTypeName","src":"8710:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6864,"mutability":"mutable","name":"amount","nameLocation":"8732:6:22","nodeType":"VariableDeclaration","scope":6930,"src":"8724:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6863,"name":"uint256","nodeType":"ElementaryTypeName","src":"8724:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6866,"mutability":"mutable","name":"reserved","nameLocation":"8746:8:22","nodeType":"VariableDeclaration","scope":6930,"src":"8740:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6865,"name":"uint8","nodeType":"ElementaryTypeName","src":"8740:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"8695:60:22"},"returnParameters":{"id":6875,"nodeType":"ParameterList","parameters":[],"src":"8821:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6992,"nodeType":"FunctionDefinition","src":"9322:546:22","nodes":[],"body":{"id":6991,"nodeType":"Block","src":"9504:364:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6955,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"9522:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":6957,"indexExpression":{"id":6956,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"9535:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9522:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6959,"indexExpression":{"id":6958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6935,"src":"9542:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9522:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6960,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6939,"src":"9551:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9522:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206d6f76654672656542616c616e63653a206e6f7420656e6f7567682062616c616e6365","id":6962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9559:52:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f2048d956cc7e4fb7899c2f4870c41743110156da216d0cf5eeb390c088e786","typeString":"literal_string \"BalanceKeeper: moveFreeBalance: not enough balance\""},"value":"BalanceKeeper: moveFreeBalance: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f2048d956cc7e4fb7899c2f4870c41743110156da216d0cf5eeb390c088e786","typeString":"literal_string \"BalanceKeeper: moveFreeBalance: not enough balance\""}],"id":6954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9514:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9514:98:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6964,"nodeType":"ExpressionStatement","src":"9514:98:22"},{"expression":{"arguments":[{"id":6966,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"9642:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6967,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6935,"src":"9649:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6968,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6939,"src":"9655:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6969,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"9663:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9683:17:22","memberName":"MOVE_FREE_BALANCE","nodeType":"MemberAccess","referencedDeclaration":7563,"src":"9663:37:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"id":6971,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6937,"src":"9702:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6965,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"9622:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9622:83:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6973,"nodeType":"ExpressionStatement","src":"9622:83:22"},{"expression":{"arguments":[{"id":6975,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"9735:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6976,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6937,"src":"9742:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6977,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6939,"src":"9746:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6978,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"9754:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":6979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9774:17:22","memberName":"MOVE_FREE_BALANCE","nodeType":"MemberAccess","referencedDeclaration":7563,"src":"9754:37:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"id":6980,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6935,"src":"9793:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6974,"name":"increaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"9715:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":6981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9715:83:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6982,"nodeType":"ExpressionStatement","src":"9715:83:22"},{"eventCall":{"arguments":[{"id":6984,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6933,"src":"9827:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":6985,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6935,"src":"9834:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6986,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6937,"src":"9840:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6987,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6939,"src":"9844:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6988,"name":"reserved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6941,"src":"9852:8:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6983,"name":"BalanceMoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7635,"src":"9814:12:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$_t_uint8_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,uint8)"}},"id":6989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9814:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6990,"nodeType":"EmitStatement","src":"9809:52:22"}]},"baseFunctions":[8040],"functionSelector":"95e1b418","implemented":true,"kind":"function","modifiers":[{"id":6944,"kind":"modifierInvocation","modifierName":{"id":6943,"name":"onlyDeal","nameLocations":["9436:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":6244,"src":"9436:8:22"},"nodeType":"ModifierInvocation","src":"9436:8:22"},{"arguments":[{"id":6946,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6935,"src":"9461:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6947,"kind":"modifierInvocation","modifierName":{"id":6945,"name":"onlyIfNotFrozen","nameLocations":["9445:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"9445:15:22"},"nodeType":"ModifierInvocation","src":"9445:21:22"},{"arguments":[{"id":6949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6937,"src":"9483:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6950,"kind":"modifierInvocation","modifierName":{"id":6948,"name":"onlyIfNotFrozen","nameLocations":["9467:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"9467:15:22"},"nodeType":"ModifierInvocation","src":"9467:19:22"},{"id":6952,"kind":"modifierInvocation","modifierName":{"id":6951,"name":"nonReentrant","nameLocations":["9487:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"9487:12:22"},"nodeType":"ModifierInvocation","src":"9487:12:22"}],"name":"moveFreeBalance","nameLocation":"9331:15:22","parameters":{"id":6942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6933,"mutability":"mutable","name":"token","nameLocation":"9354:5:22","nodeType":"VariableDeclaration","scope":6992,"src":"9347:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6932,"nodeType":"UserDefinedTypeName","pathNode":{"id":6931,"name":"IERC20","nameLocations":["9347:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"9347:6:22"},"referencedDeclaration":938,"src":"9347:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6935,"mutability":"mutable","name":"from","nameLocation":"9369:4:22","nodeType":"VariableDeclaration","scope":6992,"src":"9361:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6934,"name":"address","nodeType":"ElementaryTypeName","src":"9361:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6937,"mutability":"mutable","name":"to","nameLocation":"9383:2:22","nodeType":"VariableDeclaration","scope":6992,"src":"9375:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6936,"name":"address","nodeType":"ElementaryTypeName","src":"9375:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6939,"mutability":"mutable","name":"amount","nameLocation":"9395:6:22","nodeType":"VariableDeclaration","scope":6992,"src":"9387:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6938,"name":"uint256","nodeType":"ElementaryTypeName","src":"9387:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6941,"mutability":"mutable","name":"reserved","nameLocation":"9409:8:22","nodeType":"VariableDeclaration","scope":6992,"src":"9403:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6940,"name":"uint8","nodeType":"ElementaryTypeName","src":"9403:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"9346:72:22"},"returnParameters":{"id":6953,"nodeType":"ParameterList","parameters":[],"src":"9504:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7098,"nodeType":"FunctionDefinition","src":"9919:1101:22","nodes":[],"body":{"id":7097,"nodeType":"Block","src":"10081:939:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7013,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"10099:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7015,"indexExpression":{"id":7014,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10112:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10099:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7017,"indexExpression":{"id":7016,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10119:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10099:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7018,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10128:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10099:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206d6f766542616c616e6365546f4465616c3a206e6f7420656e6f7567682062616c616e6365","id":7020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10136:54:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_7374015ce7f86de228020f59ef47705b2f6fead2807ff3f8a04c8a1a1ce20e47","typeString":"literal_string \"BalanceKeeper: moveBalanceToDeal: not enough balance\""},"value":"BalanceKeeper: moveBalanceToDeal: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7374015ce7f86de228020f59ef47705b2f6fead2807ff3f8a04c8a1a1ce20e47","typeString":"literal_string \"BalanceKeeper: moveBalanceToDeal: not enough balance\""}],"id":7012,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10091:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10091:100:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7022,"nodeType":"ExpressionStatement","src":"10091:100:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":7024,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"10209:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":7026,"indexExpression":{"id":7025,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10226:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10209:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7027,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10236:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10209:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a206d6f766542616c616e6365546f4465616c3a206e6f7420656e6f75676820746f74616c2062616c616e6365","id":7029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10244:60:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8f96af20a6ad79fb88dcd08c2f3fffdb706c99b962cd31b154edc7cdaacf2677","typeString":"literal_string \"BalanceKeeper: moveBalanceToDeal: not enough total balance\""},"value":"BalanceKeeper: moveBalanceToDeal: not enough total balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8f96af20a6ad79fb88dcd08c2f3fffdb706c99b962cd31b154edc7cdaacf2677","typeString":"literal_string \"BalanceKeeper: moveBalanceToDeal: not enough total balance\""}],"id":7023,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10201:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:104:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7031,"nodeType":"ExpressionStatement","src":"10201:104:22"},{"expression":{"id":7038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":7032,"name":"dealBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"10315:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7035,"indexExpression":{"id":7033,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10328:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10315:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7036,"indexExpression":{"id":7034,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10335:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10315:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7037,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10344:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10315:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7039,"nodeType":"ExpressionStatement","src":"10315:35:22"},{"expression":{"id":7044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7040,"name":"dealBalancesTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6172,"src":"10360:17:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":7042,"indexExpression":{"id":7041,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10378:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10360:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7043,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10388:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10360:34:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7045,"nodeType":"ExpressionStatement","src":"10360:34:22"},{"expression":{"arguments":[{"id":7047,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10424:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7048,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10431:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7049,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10437:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7050,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"10445:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":7051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10465:12:22","memberName":"MOVE_TO_DEAL","nodeType":"MemberAccess","referencedDeclaration":7564,"src":"10445:32:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":7052,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10479:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10483:6:22","memberName":"sender","nodeType":"MemberAccess","src":"10479:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7046,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"10404:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":7054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10404:86:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7055,"nodeType":"ExpressionStatement","src":"10404:86:22"},{"assignments":[7057],"declarations":[{"constant":false,"id":7057,"mutability":"mutable","name":"blockNumber","nameLocation":"10509:11:22","nodeType":"VariableDeclaration","scope":7097,"src":"10501:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7056,"name":"uint256","nodeType":"ElementaryTypeName","src":"10501:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7060,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":7058,"name":"getL2BlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6100,"src":"10523:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":7059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10523:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10501:40:22"},{"assignments":[7063],"declarations":[{"constant":false,"id":7063,"mutability":"mutable","name":"depositInfo","nameLocation":"10574:11:22","nodeType":"VariableDeclaration","scope":7097,"src":"10551:34:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"},"typeName":{"id":7062,"nodeType":"UserDefinedTypeName","pathNode":{"id":7061,"name":"DealDepositInfo","nameLocations":["10551:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":7594,"src":"10551:15:22"},"referencedDeclaration":7594,"src":"10551:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"}},"visibility":"internal"}],"id":7076,"initialValue":{"arguments":[{"id":7065,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10625:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":7066,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10650:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10654:6:22","memberName":"sender","nodeType":"MemberAccess","src":"10650:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7068,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10680:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7069,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10706:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7070,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7002,"src":"10734:6:22","typeDescriptions":{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"}},{"id":7071,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7057,"src":"10767:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":7072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10803:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":7073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10829:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":7074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10855:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7064,"name":"DealDepositInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7594,"src":"10588:15:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_DealDepositInfo_$7594_storage_ptr_$","typeString":"type(struct IBalanceKeeper.DealDepositInfo storage pointer)"}},"id":7075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["10618:5:22","10644:4:22","10674:4:22","10698:6:22","10726:6:22","10754:11:22","10792:9:22","10818:9:22","10844:9:22"],"names":["token","deal","user","amount","reason","blockNumber","reserved1","reserved2","reserved3"],"nodeType":"FunctionCall","src":"10588:279:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory"}},"nodeType":"VariableDeclarationStatement","src":"10551:316:22"},{"expression":{"arguments":[{"id":7080,"name":"depositInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7063,"src":"10895:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory"}],"expression":{"id":7077,"name":"dealDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"10877:12:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref[] storage ref"}},"id":7079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10890:4:22","memberName":"push","nodeType":"MemberAccess","src":"10877:17:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr_$_t_struct$_DealDepositInfo_$7594_storage_$returns$__$attached_to$_t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr_$","typeString":"function (struct IBalanceKeeper.DealDepositInfo storage ref[] storage pointer,struct IBalanceKeeper.DealDepositInfo storage ref)"}},"id":7081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10877:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7082,"nodeType":"ExpressionStatement","src":"10877:30:22"},{"eventCall":{"arguments":[{"id":7084,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6995,"src":"10935:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":7085,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10942:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10946:6:22","memberName":"sender","nodeType":"MemberAccess","src":"10942:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7087,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10954:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7088,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"10960:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7089,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7002,"src":"10968:6:22","typeDescriptions":{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"}},{"id":7090,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7057,"src":"10976:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7091,"name":"dealDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"10989:12:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref[] storage ref"}},"id":7092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11002:6:22","memberName":"length","nodeType":"MemberAccess","src":"10989:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10989:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7083,"name":"DealDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7653,"src":"10923:11:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$_t_enum$_DealDepositReason_$7573_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,enum IBalanceKeeper.DealDepositReason,uint256,uint256)"}},"id":7095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10923:90:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7096,"nodeType":"EmitStatement","src":"10918:95:22"}]},"baseFunctions":[8026],"functionSelector":"116424cc","implemented":true,"kind":"function","modifiers":[{"id":7005,"kind":"modifierInvocation","modifierName":{"id":7004,"name":"onlyDeal","nameLocations":["10033:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":6244,"src":"10033:8:22"},"nodeType":"ModifierInvocation","src":"10033:8:22"},{"arguments":[{"id":7007,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6997,"src":"10058:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7008,"kind":"modifierInvocation","modifierName":{"id":7006,"name":"onlyIfNotFrozen","nameLocations":["10042:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"10042:15:22"},"nodeType":"ModifierInvocation","src":"10042:21:22"},{"id":7010,"kind":"modifierInvocation","modifierName":{"id":7009,"name":"nonReentrant","nameLocations":["10064:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"10064:12:22"},"nodeType":"ModifierInvocation","src":"10064:12:22"}],"name":"moveBalanceToDeal","nameLocation":"9928:17:22","parameters":{"id":7003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6995,"mutability":"mutable","name":"token","nameLocation":"9953:5:22","nodeType":"VariableDeclaration","scope":7098,"src":"9946:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":6994,"nodeType":"UserDefinedTypeName","pathNode":{"id":6993,"name":"IERC20","nameLocations":["9946:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"9946:6:22"},"referencedDeclaration":938,"src":"9946:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6997,"mutability":"mutable","name":"user","nameLocation":"9968:4:22","nodeType":"VariableDeclaration","scope":7098,"src":"9960:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6996,"name":"address","nodeType":"ElementaryTypeName","src":"9960:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6999,"mutability":"mutable","name":"amount","nameLocation":"9982:6:22","nodeType":"VariableDeclaration","scope":7098,"src":"9974:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6998,"name":"uint256","nodeType":"ElementaryTypeName","src":"9974:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7002,"mutability":"mutable","name":"reason","nameLocation":"10008:6:22","nodeType":"VariableDeclaration","scope":7098,"src":"9990:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"},"typeName":{"id":7001,"nodeType":"UserDefinedTypeName","pathNode":{"id":7000,"name":"DealDepositReason","nameLocations":["9990:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":7573,"src":"9990:17:22"},"referencedDeclaration":7573,"src":"9990:17:22","typeDescriptions":{"typeIdentifier":"t_enum$_DealDepositReason_$7573","typeString":"enum IBalanceKeeper.DealDepositReason"}},"visibility":"internal"}],"src":"9945:70:22"},"returnParameters":{"id":7011,"nodeType":"ParameterList","parameters":[],"src":"10081:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7107,"nodeType":"FunctionDefinition","src":"11026:107:22","nodes":[],"body":{"id":7106,"nodeType":"Block","src":"11090:43:22","nodes":[],"statements":[{"expression":{"expression":{"id":7103,"name":"dealDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"11107:12:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref[] storage ref"}},"id":7104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11120:6:22","memberName":"length","nodeType":"MemberAccess","src":"11107:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7102,"id":7105,"nodeType":"Return","src":"11100:26:22"}]},"baseFunctions":[7920],"functionSelector":"04930575","implemented":true,"kind":"function","modifiers":[],"name":"getDepositInfoLength","nameLocation":"11035:20:22","parameters":{"id":7099,"nodeType":"ParameterList","parameters":[],"src":"11055:2:22"},"returnParameters":{"id":7102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7107,"src":"11081:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7100,"name":"uint256","nodeType":"ElementaryTypeName","src":"11081:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11080:9:22"},"scope":7556,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7174,"nodeType":"FunctionDefinition","src":"11139:457:22","nodes":[],"body":{"id":7173,"nodeType":"Block","src":"11238:358:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7119,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"11256:2:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7120,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7109,"src":"11262:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11256:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"73746f7265644465616c733a20746f203c2066726f6d","id":7122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11268:24:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_801f8b3b5e19c17f5c58366d97bb58241482e42fdd15dd005cb4487063f58691","typeString":"literal_string \"storedDeals: to < from\""},"value":"storedDeals: to < from"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_801f8b3b5e19c17f5c58366d97bb58241482e42fdd15dd005cb4487063f58691","typeString":"literal_string \"storedDeals: to < from\""}],"id":7118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11248:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11248:45:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7124,"nodeType":"ExpressionStatement","src":"11248:45:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7126,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"11311:2:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7127,"name":"dealDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"11316:12:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref[] storage ref"}},"id":7128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11329:6:22","memberName":"length","nodeType":"MemberAccess","src":"11316:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11311:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6765744465706f736974496e666f3a206f766572666c6f77","id":7130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11337:26:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_82e2d5406013b81f1fa859ef47dc1d028bce524013765dfe3c6a8595b61acde6","typeString":"literal_string \"getDepositInfo: overflow\""},"value":"getDepositInfo: overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_82e2d5406013b81f1fa859ef47dc1d028bce524013765dfe3c6a8595b61acde6","typeString":"literal_string \"getDepositInfo: overflow\""}],"id":7125,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11303:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11303:61:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7132,"nodeType":"ExpressionStatement","src":"11303:61:22"},{"assignments":[7137],"declarations":[{"constant":false,"id":7137,"mutability":"mutable","name":"result","nameLocation":"11399:6:22","nodeType":"VariableDeclaration","scope":7173,"src":"11374:31:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"},"typeName":{"baseType":{"id":7135,"nodeType":"UserDefinedTypeName","pathNode":{"id":7134,"name":"DealDepositInfo","nameLocations":["11374:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":7594,"src":"11374:15:22"},"referencedDeclaration":7594,"src":"11374:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"}},"id":7136,"nodeType":"ArrayTypeName","src":"11374:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"}},"visibility":"internal"}],"id":7148,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7142,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"11430:2:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7143,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7109,"src":"11435:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11430:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":7145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11442:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11430:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"11408:21:22","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct IBalanceKeeper.DealDepositInfo memory[] memory)"},"typeName":{"baseType":{"id":7139,"nodeType":"UserDefinedTypeName","pathNode":{"id":7138,"name":"DealDepositInfo","nameLocations":["11412:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":7594,"src":"11412:15:22"},"referencedDeclaration":7594,"src":"11412:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"}},"id":7140,"nodeType":"ArrayTypeName","src":"11412:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"}}},"id":7147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11408:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11374:70:22"},{"body":{"id":7169,"nodeType":"Block","src":"11500:67:22","statements":[{"expression":{"id":7167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7137,"src":"11514:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory[] memory"}},"id":7163,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7160,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7150,"src":"11521:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7161,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7109,"src":"11529:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11521:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11514:20:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7164,"name":"dealDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"11537:12:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref[] storage ref"}},"id":7166,"indexExpression":{"id":7165,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7150,"src":"11550:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11537:19:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage","typeString":"struct IBalanceKeeper.DealDepositInfo storage ref"}},"src":"11514:42:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory"}},"id":7168,"nodeType":"ExpressionStatement","src":"11514:42:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7153,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7150,"src":"11478:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7154,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"11487:2:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11478:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7170,"initializationExpression":{"assignments":[7150],"declarations":[{"constant":false,"id":7150,"mutability":"mutable","name":"index","nameLocation":"11464:5:22","nodeType":"VariableDeclaration","scope":7170,"src":"11459:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7149,"name":"uint","nodeType":"ElementaryTypeName","src":"11459:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7152,"initialValue":{"id":7151,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7109,"src":"11472:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11459:17:22"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":7157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"11491:7:22","subExpression":{"id":7156,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7150,"src":"11493:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7158,"nodeType":"ExpressionStatement","src":"11491:7:22"},"nodeType":"ForStatement","src":"11454:113:22"},{"expression":{"id":7171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7137,"src":"11583:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo memory[] memory"}},"functionReturnParameters":7117,"id":7172,"nodeType":"Return","src":"11576:13:22"}]},"baseFunctions":[7931],"functionSelector":"3bf9bb0b","implemented":true,"kind":"function","modifiers":[],"name":"getDepositInfo","nameLocation":"11148:14:22","parameters":{"id":7112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7109,"mutability":"mutable","name":"from","nameLocation":"11171:4:22","nodeType":"VariableDeclaration","scope":7174,"src":"11163:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7108,"name":"uint256","nodeType":"ElementaryTypeName","src":"11163:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7111,"mutability":"mutable","name":"to","nameLocation":"11185:2:22","nodeType":"VariableDeclaration","scope":7174,"src":"11177:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7110,"name":"uint256","nodeType":"ElementaryTypeName","src":"11177:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11162:26:22"},"returnParameters":{"id":7117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7174,"src":"11212:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_memory_ptr_$dyn_memory_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"},"typeName":{"baseType":{"id":7114,"nodeType":"UserDefinedTypeName","pathNode":{"id":7113,"name":"DealDepositInfo","nameLocations":["11212:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":7594,"src":"11212:15:22"},"referencedDeclaration":7594,"src":"11212:15:22","typeDescriptions":{"typeIdentifier":"t_struct$_DealDepositInfo_$7594_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo"}},"id":7115,"nodeType":"ArrayTypeName","src":"11212:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_DealDepositInfo_$7594_storage_$dyn_storage_ptr","typeString":"struct IBalanceKeeper.DealDepositInfo[]"}},"visibility":"internal"}],"src":"11211:26:22"},"scope":7556,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7240,"nodeType":"FunctionDefinition","src":"11602:571:22","nodes":[],"body":{"id":7239,"nodeType":"Block","src":"11739:434:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7194,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"11757:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7196,"indexExpression":{"id":7195,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"11770:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11757:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7198,"indexExpression":{"id":7197,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7179,"src":"11777:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11757:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7199,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"11786:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11757:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20776974686472617742794465616c3a206e6f7420656e6f7567682062616c616e6365","id":7201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11794:51:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_07691aa1da9c07c652f3857464e10d391cf858004767271029f6accf7a5ed2be","typeString":"literal_string \"BalanceKeeper: withdrawByDeal: not enough balance\""},"value":"BalanceKeeper: withdrawByDeal: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_07691aa1da9c07c652f3857464e10d391cf858004767271029f6accf7a5ed2be","typeString":"literal_string \"BalanceKeeper: withdrawByDeal: not enough balance\""}],"id":7193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11749:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11749:97:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7203,"nodeType":"ExpressionStatement","src":"11749:97:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":7205,"name":"freeBalanceTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"11864:16:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":7207,"indexExpression":{"id":7206,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"11881:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11864:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7208,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"11891:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11864:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20776974686472617742794465616c3a206e6f7420656e6f75676820746f74616c2062616c616e6365","id":7210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11899:57:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_a2cba9c6ffe9be9f2eaa03432fce57cdc28052a4d56a362eb1a8ac99b110b4f1","typeString":"literal_string \"BalanceKeeper: withdrawByDeal: not enough total balance\""},"value":"BalanceKeeper: withdrawByDeal: not enough total balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a2cba9c6ffe9be9f2eaa03432fce57cdc28052a4d56a362eb1a8ac99b110b4f1","typeString":"literal_string \"BalanceKeeper: withdrawByDeal: not enough total balance\""}],"id":7204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11856:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11856:101:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7212,"nodeType":"ExpressionStatement","src":"11856:101:22"},{"expression":{"arguments":[{"id":7214,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"11987:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7215,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7179,"src":"11994:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7216,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"12000:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7217,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"12008:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":7218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12028:16:22","memberName":"WITHDRAW_BY_DEAL","nodeType":"MemberAccess","referencedDeclaration":7565,"src":"12008:36:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":7219,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12046:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12050:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12046:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7213,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"11967:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":7221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11967:90:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7222,"nodeType":"ExpressionStatement","src":"11967:90:22"},{"expression":{"arguments":[{"id":7226,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7179,"src":"12086:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7227,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"12092:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7223,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"12067:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":7225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12073:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":985,"src":"12067:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12067:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7229,"nodeType":"ExpressionStatement","src":"12067:32:22"},{"eventCall":{"arguments":[{"id":7231,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"12124:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7232,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7179,"src":"12131:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7233,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"12137:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7234,"name":"reserved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"12145:8:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":7235,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12155:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12159:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12155:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7230,"name":"Withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7763,"src":"12114:9:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_uint8_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,uint8,address)"}},"id":7237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12114:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7238,"nodeType":"EmitStatement","src":"12109:57:22"}]},"baseFunctions":[8052],"functionSelector":"01627f56","implemented":true,"kind":"function","modifiers":[{"id":7186,"kind":"modifierInvocation","modifierName":{"id":7185,"name":"onlyDeal","nameLocations":["11695:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":6244,"src":"11695:8:22"},"nodeType":"ModifierInvocation","src":"11695:8:22"},{"arguments":[{"id":7188,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7179,"src":"11720:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7189,"kind":"modifierInvocation","modifierName":{"id":7187,"name":"onlyIfNotFrozen","nameLocations":["11704:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"11704:15:22"},"nodeType":"ModifierInvocation","src":"11704:21:22"},{"id":7191,"kind":"modifierInvocation","modifierName":{"id":7190,"name":"nonReentrant","nameLocations":["11726:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"11726:12:22"},"nodeType":"ModifierInvocation","src":"11726:12:22"}],"name":"withdrawByDeal","nameLocation":"11611:14:22","parameters":{"id":7184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7177,"mutability":"mutable","name":"token","nameLocation":"11633:5:22","nodeType":"VariableDeclaration","scope":7240,"src":"11626:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":7176,"nodeType":"UserDefinedTypeName","pathNode":{"id":7175,"name":"IERC20","nameLocations":["11626:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"11626:6:22"},"referencedDeclaration":938,"src":"11626:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":7179,"mutability":"mutable","name":"user","nameLocation":"11648:4:22","nodeType":"VariableDeclaration","scope":7240,"src":"11640:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7178,"name":"address","nodeType":"ElementaryTypeName","src":"11640:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7181,"mutability":"mutable","name":"amount","nameLocation":"11662:6:22","nodeType":"VariableDeclaration","scope":7240,"src":"11654:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7180,"name":"uint256","nodeType":"ElementaryTypeName","src":"11654:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7183,"mutability":"mutable","name":"reserved","nameLocation":"11676:8:22","nodeType":"VariableDeclaration","scope":7240,"src":"11670:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7182,"name":"uint8","nodeType":"ElementaryTypeName","src":"11670:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11625:60:22"},"returnParameters":{"id":7192,"nodeType":"ParameterList","parameters":[],"src":"11739:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7310,"nodeType":"FunctionDefinition","src":"12204:662:22","nodes":[],"body":{"id":7309,"nodeType":"Block","src":"12283:583:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7251,"name":"dealBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"12301:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7253,"indexExpression":{"id":7252,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"12314:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12301:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7256,"indexExpression":{"expression":{"id":7254,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12321:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12325:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12321:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12301:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12336:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12301:36:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20766f646f70616457697468647261773a206465616c2062616c616e6365206973206e6f7420656d707479","id":7259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12339:59:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_10051a92506cf9bd93a6d058d71d6828924ccf1d1276b419dbb6b9eb5d32d3ae","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: deal balance is not empty\""},"value":"BalanceKeeper: vodopadWithdraw: deal balance is not empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_10051a92506cf9bd93a6d058d71d6828924ccf1d1276b419dbb6b9eb5d32d3ae","typeString":"literal_string \"BalanceKeeper: vodopadWithdraw: deal balance is not empty\""}],"id":7250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12293:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12293:106:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7261,"nodeType":"ExpressionStatement","src":"12293:106:22"},{"expression":{"arguments":[{"id":7263,"name":"manualWithdrawEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"12417:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a207769746864726177526571756573743a206d616e75616c2077697468647261772064697361626c6564","id":7264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12440:58:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8524d040103591584315fa1b128fe658a711b5bb1ba4a2dd3c13706478a66e90","typeString":"literal_string \"BalanceKeeper: withdrawRequest: manual withdraw disabled\""},"value":"BalanceKeeper: withdrawRequest: manual withdraw disabled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8524d040103591584315fa1b128fe658a711b5bb1ba4a2dd3c13706478a66e90","typeString":"literal_string \"BalanceKeeper: withdrawRequest: manual withdraw disabled\""}],"id":7262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12409:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12409:90:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7266,"nodeType":"ExpressionStatement","src":"12409:90:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7268,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"12517:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7270,"indexExpression":{"id":7269,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"12530:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12517:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7273,"indexExpression":{"expression":{"id":7271,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12537:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12541:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12537:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12517:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12551:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12517:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a207769746864726177526571756573743a206e6f7420656e6f7567682062616c616e6365","id":7276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12554:52:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_012c0cfee62c785daa859a9d192c2ce5f4fdc8e7e504ea37c2b7bbc782a9c273","typeString":"literal_string \"BalanceKeeper: withdrawRequest: not enough balance\""},"value":"BalanceKeeper: withdrawRequest: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_012c0cfee62c785daa859a9d192c2ce5f4fdc8e7e504ea37c2b7bbc782a9c273","typeString":"literal_string \"BalanceKeeper: withdrawRequest: not enough balance\""}],"id":7267,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12509:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12509:98:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7278,"nodeType":"ExpressionStatement","src":"12509:98:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7280,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"12625:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7282,"indexExpression":{"id":7281,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"12645:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12625:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7285,"indexExpression":{"expression":{"id":7283,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12652:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12656:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12652:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12625:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12667:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12625:43:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a207769746864726177526571756573743a20616c726561647920726571756573746564","id":7288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12670:51:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_501da8cb86377a22e40991545f2fe20491a27cba5ee587459f55ea392294dddc","typeString":"literal_string \"BalanceKeeper: withdrawRequest: already requested\""},"value":"BalanceKeeper: withdrawRequest: already requested"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_501da8cb86377a22e40991545f2fe20491a27cba5ee587459f55ea392294dddc","typeString":"literal_string \"BalanceKeeper: withdrawRequest: already requested\""}],"id":7279,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12617:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12617:105:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7290,"nodeType":"ExpressionStatement","src":"12617:105:22"},{"expression":{"id":7299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":7291,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"12732:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7295,"indexExpression":{"id":7292,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"12752:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12732:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7296,"indexExpression":{"expression":{"id":7293,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12759:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12763:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12759:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12732:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7297,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12773:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12779:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"12773:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12732:56:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7300,"nodeType":"ExpressionStatement","src":"12732:56:22"},{"eventCall":{"arguments":[{"id":7302,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"12829:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":7303,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12836:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12840:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12836:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7305,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12848:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12852:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12848:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7301,"name":"TerminationRequestCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7781,"src":"12803:25:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,address)"}},"id":7307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12803:56:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7308,"nodeType":"EmitStatement","src":"12798:61:22"}]},"baseFunctions":[8058],"functionSelector":"301aaac9","implemented":true,"kind":"function","modifiers":[{"arguments":[{"expression":{"id":7246,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12271:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12275:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12271:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7248,"kind":"modifierInvocation","modifierName":{"id":7245,"name":"onlyIfNotFrozen","nameLocations":["12255:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"12255:15:22"},"nodeType":"ModifierInvocation","src":"12255:27:22"}],"name":"terminationRequest","nameLocation":"12213:18:22","parameters":{"id":7244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7243,"mutability":"mutable","name":"token","nameLocation":"12239:5:22","nodeType":"VariableDeclaration","scope":7310,"src":"12232:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":7242,"nodeType":"UserDefinedTypeName","pathNode":{"id":7241,"name":"IERC20","nameLocations":["12232:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"12232:6:22"},"referencedDeclaration":938,"src":"12232:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"12231:14:22"},"returnParameters":{"id":7249,"nodeType":"ParameterList","parameters":[],"src":"12283:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7414,"nodeType":"FunctionDefinition","src":"12872:845:22","nodes":[],"body":{"id":7413,"nodeType":"Block","src":"12955:762:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":7323,"name":"manualWithdrawEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"12973:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2077697468647261773a206d616e75616c2077697468647261772064697361626c6564","id":7324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12996:51:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fa55e833e0ff363b632256b1dd5f910f89daf17e09a37824ee2e3cf82840fc3","typeString":"literal_string \"BalanceKeeper: withdraw: manual withdraw disabled\""},"value":"BalanceKeeper: withdraw: manual withdraw disabled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9fa55e833e0ff363b632256b1dd5f910f89daf17e09a37824ee2e3cf82840fc3","typeString":"literal_string \"BalanceKeeper: withdraw: manual withdraw disabled\""}],"id":7322,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12965:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12965:83:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7326,"nodeType":"ExpressionStatement","src":"12965:83:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7328,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"13066:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7330,"indexExpression":{"id":7329,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13086:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13066:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7333,"indexExpression":{"expression":{"id":7331,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13093:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13097:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13093:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13066:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13107:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13066:42:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2077697468647261773a206e6f2072657175657374","id":7336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13110:37:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_f0201aa42ce5810da291e3aac531f8c5abadeb4d71c64f934b33ba6491fae540","typeString":"literal_string \"BalanceKeeper: withdraw: no request\""},"value":"BalanceKeeper: withdraw: no request"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f0201aa42ce5810da291e3aac531f8c5abadeb4d71c64f934b33ba6491fae540","typeString":"literal_string \"BalanceKeeper: withdraw: no request\""}],"id":7327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13058:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13058:90:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7338,"nodeType":"ExpressionStatement","src":"13058:90:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7340,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13166:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13172:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"13166:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"baseExpression":{"id":7342,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"13184:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7344,"indexExpression":{"id":7343,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13204:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13184:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7347,"indexExpression":{"expression":{"id":7345,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13211:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13215:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13211:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13184:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13166:56:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7349,"name":"WITHDRAW_REQUEST_DELAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6137,"src":"13226:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13166:82:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2077697468647261773a20746f6f206561726c79","id":7351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13250:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_95b85b2d1ea44673ac22dd60fa04f4138d475828661b9fc3a2d8b66d27560736","typeString":"literal_string \"BalanceKeeper: withdraw: too early\""},"value":"BalanceKeeper: withdraw: too early"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95b85b2d1ea44673ac22dd60fa04f4138d475828661b9fc3a2d8b66d27560736","typeString":"literal_string \"BalanceKeeper: withdraw: too early\""}],"id":7339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13158:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13158:129:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7353,"nodeType":"ExpressionStatement","src":"13158:129:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7355,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"13305:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7357,"indexExpression":{"id":7356,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13318:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13305:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7360,"indexExpression":{"expression":{"id":7358,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13325:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13329:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13325:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13305:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13339:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13305:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2077697468647261773a206e6f7420656e6f7567682062616c616e6365","id":7363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13342:45:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ce4ccc31fa28ba042252180d112590bbfb1a66baad7a97dc452b15d20139e77","typeString":"literal_string \"BalanceKeeper: withdraw: not enough balance\""},"value":"BalanceKeeper: withdraw: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ce4ccc31fa28ba042252180d112590bbfb1a66baad7a97dc452b15d20139e77","typeString":"literal_string \"BalanceKeeper: withdraw: not enough balance\""}],"id":7354,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13297:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13297:91:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7365,"nodeType":"ExpressionStatement","src":"13297:91:22"},{"assignments":[7367],"declarations":[{"constant":false,"id":7367,"mutability":"mutable","name":"amount","nameLocation":"13406:6:22","nodeType":"VariableDeclaration","scope":7413,"src":"13398:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7366,"name":"uint256","nodeType":"ElementaryTypeName","src":"13398:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7374,"initialValue":{"baseExpression":{"baseExpression":{"id":7368,"name":"freeBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"13415:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7370,"indexExpression":{"id":7369,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13428:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13415:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7373,"indexExpression":{"expression":{"id":7371,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13435:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13439:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13435:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13415:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13398:48:22"},{"expression":{"arguments":[{"id":7376,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13476:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":7377,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13483:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13487:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13483:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7379,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7367,"src":"13495:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7380,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"13503:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":7381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13523:9:22","memberName":"TERMINATE","nodeType":"MemberAccess","referencedDeclaration":7566,"src":"13503:29:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"arguments":[{"hexValue":"30","id":7384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13542:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13534:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7382,"name":"address","nodeType":"ElementaryTypeName","src":"13534:7:22","typeDescriptions":{}}},"id":7385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13534:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7375,"name":"decreaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"13456:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":7386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13456:89:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7387,"nodeType":"ExpressionStatement","src":"13456:89:22"},{"expression":{"id":7395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":7388,"name":"terminationRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6162,"src":"13555:19:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7392,"indexExpression":{"id":7389,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13575:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13555:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7393,"indexExpression":{"expression":{"id":7390,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13582:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13586:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13582:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13555:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":7394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13596:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13555:42:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7396,"nodeType":"ExpressionStatement","src":"13555:42:22"},{"expression":{"arguments":[{"expression":{"id":7400,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13626:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13630:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13626:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7402,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7367,"src":"13638:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7397,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13607:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":7399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13613:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":985,"src":"13607:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13607:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7404,"nodeType":"ExpressionStatement","src":"13607:38:22"},{"eventCall":{"arguments":[{"id":7406,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"13680:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"expression":{"id":7407,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13687:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13691:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13687:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7409,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13699:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13703:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13699:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7405,"name":"TerminationExecuted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7790,"src":"13660:19:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,address)"}},"id":7411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13660:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7412,"nodeType":"EmitStatement","src":"13655:55:22"}]},"baseFunctions":[8064],"functionSelector":"edb45529","implemented":true,"kind":"function","modifiers":[{"arguments":[{"expression":{"id":7316,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12930:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12934:6:22","memberName":"sender","nodeType":"MemberAccess","src":"12930:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7318,"kind":"modifierInvocation","modifierName":{"id":7315,"name":"onlyIfNotFrozen","nameLocations":["12914:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":6304,"src":"12914:15:22"},"nodeType":"ModifierInvocation","src":"12914:27:22"},{"id":7320,"kind":"modifierInvocation","modifierName":{"id":7319,"name":"nonReentrant","nameLocations":["12942:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"12942:12:22"},"nodeType":"ModifierInvocation","src":"12942:12:22"}],"name":"terminate","nameLocation":"12881:9:22","parameters":{"id":7314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7313,"mutability":"mutable","name":"token","nameLocation":"12898:5:22","nodeType":"VariableDeclaration","scope":7414,"src":"12891:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":7312,"nodeType":"UserDefinedTypeName","pathNode":{"id":7311,"name":"IERC20","nameLocations":["12891:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"12891:6:22"},"referencedDeclaration":938,"src":"12891:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"12890:14:22"},"returnParameters":{"id":7321,"nodeType":"ParameterList","parameters":[],"src":"12955:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7432,"nodeType":"FunctionDefinition","src":"13757:170:22","nodes":[],"body":{"id":7431,"nodeType":"Block","src":"13829:98:22","nodes":[],"statements":[{"expression":{"id":7423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7421,"name":"coordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"13839:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7422,"name":"_coordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7416,"src":"13853:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13839:26:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7424,"nodeType":"ExpressionStatement","src":"13839:26:22"},{"eventCall":{"arguments":[{"id":7426,"name":"_coordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7416,"src":"13895:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7427,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13909:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13913:6:22","memberName":"sender","nodeType":"MemberAccess","src":"13909:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7425,"name":"CoordinatorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7672,"src":"13880:14:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":7429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13880:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7430,"nodeType":"EmitStatement","src":"13875:45:22"}]},"baseFunctions":[8069],"functionSelector":"8ea98117","implemented":true,"kind":"function","modifiers":[{"id":7419,"kind":"modifierInvocation","modifierName":{"id":7418,"name":"onlyDiamondOwner","nameLocations":["13812:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"13812:16:22"},"nodeType":"ModifierInvocation","src":"13812:16:22"}],"name":"setCoordinator","nameLocation":"13766:14:22","parameters":{"id":7417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7416,"mutability":"mutable","name":"_coordinator","nameLocation":"13789:12:22","nodeType":"VariableDeclaration","scope":7432,"src":"13781:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7415,"name":"address","nodeType":"ElementaryTypeName","src":"13781:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13780:22:22"},"returnParameters":{"id":7420,"nodeType":"ParameterList","parameters":[],"src":"13829:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7490,"nodeType":"FunctionDefinition","src":"13933:417:22","nodes":[],"body":{"id":7489,"nodeType":"Block","src":"14055:295:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7449,"name":"limbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"14073:5:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7451,"indexExpression":{"id":7450,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"14079:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14073:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7453,"indexExpression":{"id":7452,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"14086:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14073:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7454,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7441,"src":"14095:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14073:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a20776974686472617746726f6d4c696d626f3a206e6f7420656e6f7567682062616c616e6365","id":7456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14103:54:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_979255b5eafa92c9f0ac88cada30ab03d3c5ede64ecc50e41683eae83c66ffcc","typeString":"literal_string \"BalanceKeeper: withdrawFromLimbo: not enough balance\""},"value":"BalanceKeeper: withdrawFromLimbo: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_979255b5eafa92c9f0ac88cada30ab03d3c5ede64ecc50e41683eae83c66ffcc","typeString":"literal_string \"BalanceKeeper: withdrawFromLimbo: not enough balance\""}],"id":7448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"14065:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14065:93:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7458,"nodeType":"ExpressionStatement","src":"14065:93:22"},{"expression":{"id":7465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":7459,"name":"limbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"14168:5:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7462,"indexExpression":{"id":7460,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"14174:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14168:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7463,"indexExpression":{"id":7461,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"14181:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14168:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7464,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7441,"src":"14190:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14168:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7466,"nodeType":"ExpressionStatement","src":"14168:28:22"},{"expression":{"id":7471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7467,"name":"limboTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"14206:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":7469,"indexExpression":{"id":7468,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"14217:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14206:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7441,"src":"14227:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14206:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7472,"nodeType":"ExpressionStatement","src":"14206:27:22"},{"expression":{"arguments":[{"id":7476,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"14262:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7477,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7441,"src":"14266:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7473,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"14243:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"id":7475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14249:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":985,"src":"14243:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$938_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14243:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7479,"nodeType":"ExpressionStatement","src":"14243:30:22"},{"eventCall":{"arguments":[{"id":7481,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"14307:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7482,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"14314:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7483,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"14320:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7484,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14324:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14328:6:22","memberName":"sender","nodeType":"MemberAccess","src":"14324:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7486,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7441,"src":"14336:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7480,"name":"WithdrawnFromLimbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7803,"src":"14288:18:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,address,uint256)"}},"id":7487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14288:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7488,"nodeType":"EmitStatement","src":"14283:60:22"}]},"baseFunctions":[8081],"functionSelector":"985a3e1a","implemented":true,"kind":"function","modifiers":[{"id":7444,"kind":"modifierInvocation","modifierName":{"id":7443,"name":"nonReentrant","nameLocations":["14025:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1706,"src":"14025:12:22"},"nodeType":"ModifierInvocation","src":"14025:12:22"},{"id":7446,"kind":"modifierInvocation","modifierName":{"id":7445,"name":"onlyDiamondOwner","nameLocations":["14038:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"14038:16:22"},"nodeType":"ModifierInvocation","src":"14038:16:22"}],"name":"withdrawFromLimbo","nameLocation":"13942:17:22","parameters":{"id":7442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7435,"mutability":"mutable","name":"token","nameLocation":"13967:5:22","nodeType":"VariableDeclaration","scope":7490,"src":"13960:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":7434,"nodeType":"UserDefinedTypeName","pathNode":{"id":7433,"name":"IERC20","nameLocations":["13960:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"13960:6:22"},"referencedDeclaration":938,"src":"13960:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":7437,"mutability":"mutable","name":"user","nameLocation":"13982:4:22","nodeType":"VariableDeclaration","scope":7490,"src":"13974:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7436,"name":"address","nodeType":"ElementaryTypeName","src":"13974:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7439,"mutability":"mutable","name":"to","nameLocation":"13996:2:22","nodeType":"VariableDeclaration","scope":7490,"src":"13988:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7438,"name":"address","nodeType":"ElementaryTypeName","src":"13988:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7441,"mutability":"mutable","name":"amount","nameLocation":"14008:6:22","nodeType":"VariableDeclaration","scope":7490,"src":"14000:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7440,"name":"uint256","nodeType":"ElementaryTypeName","src":"14000:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13959:56:22"},"returnParameters":{"id":7447,"nodeType":"ParameterList","parameters":[],"src":"14055:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7546,"nodeType":"FunctionDefinition","src":"14356:436:22","nodes":[],"body":{"id":7545,"nodeType":"Block","src":"14449:343:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":7503,"name":"limbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"14467:5:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7505,"indexExpression":{"id":7504,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7493,"src":"14473:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14467:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7507,"indexExpression":{"id":7506,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7495,"src":"14480:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14467:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7508,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7497,"src":"14489:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14467:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616c616e63654b65657065723a2066756e6446726f6d4c696d626f3a206e6f7420656e6f7567682062616c616e6365","id":7510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14497:50:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_e9014a0b403e677f087677cd831ddf67f302a362a63e1b5e6d6cf3e5dd575a57","typeString":"literal_string \"BalanceKeeper: fundFromLimbo: not enough balance\""},"value":"BalanceKeeper: fundFromLimbo: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e9014a0b403e677f087677cd831ddf67f302a362a63e1b5e6d6cf3e5dd575a57","typeString":"literal_string \"BalanceKeeper: fundFromLimbo: not enough balance\""}],"id":7502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"14459:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14459:89:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7512,"nodeType":"ExpressionStatement","src":"14459:89:22"},{"expression":{"id":7519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":7513,"name":"limbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6184,"src":"14558:5:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":7516,"indexExpression":{"id":7514,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7493,"src":"14564:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14558:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7517,"indexExpression":{"id":7515,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7495,"src":"14571:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14558:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7518,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7497,"src":"14580:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14558:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7520,"nodeType":"ExpressionStatement","src":"14558:28:22"},{"expression":{"id":7525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7521,"name":"limboTotal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"14596:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$938_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":7523,"indexExpression":{"id":7522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7493,"src":"14607:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14596:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":7524,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7497,"src":"14617:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14596:27:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7526,"nodeType":"ExpressionStatement","src":"14596:27:22"},{"expression":{"arguments":[{"id":7528,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7493,"src":"14653:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7529,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7495,"src":"14660:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7530,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7497,"src":"14666:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7531,"name":"BalanceChangeReason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7570,"src":"14674:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BalanceChangeReason_$7570_$","typeString":"type(enum IBalanceKeeper.BalanceChangeReason)"}},"id":7532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14694:15:22","memberName":"FUND_FROM_LIMBO","nodeType":"MemberAccess","referencedDeclaration":7568,"src":"14674:35:22","typeDescriptions":{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"}},{"expression":{"id":7533,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14711:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14715:6:22","memberName":"sender","nodeType":"MemberAccess","src":"14711:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_BalanceChangeReason_$7570","typeString":"enum IBalanceKeeper.BalanceChangeReason"},{"typeIdentifier":"t_address","typeString":"address"}],"id":7527,"name":"increaseFreeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"14633:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_uint256_$_t_enum$_BalanceChangeReason_$7570_$_t_address_$returns$__$","typeString":"function (contract IERC20,address,uint256,enum IBalanceKeeper.BalanceChangeReason,address)"}},"id":7535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14633:89:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7536,"nodeType":"ExpressionStatement","src":"14633:89:22"},{"eventCall":{"arguments":[{"id":7538,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7493,"src":"14753:5:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},{"id":7539,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7495,"src":"14760:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7540,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14766:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14770:6:22","memberName":"sender","nodeType":"MemberAccess","src":"14766:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7542,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7497,"src":"14778:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7537,"name":"FundedFromLimbo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7814,"src":"14737:15:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$938_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":7543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14737:48:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7544,"nodeType":"EmitStatement","src":"14732:53:22"}]},"baseFunctions":[8091],"functionSelector":"7fad6401","implemented":true,"kind":"function","modifiers":[{"id":7500,"kind":"modifierInvocation","modifierName":{"id":7499,"name":"onlyDiamondOwner","nameLocations":["14432:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"14432:16:22"},"nodeType":"ModifierInvocation","src":"14432:16:22"}],"name":"fundFromLimbo","nameLocation":"14365:13:22","parameters":{"id":7498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7493,"mutability":"mutable","name":"token","nameLocation":"14386:5:22","nodeType":"VariableDeclaration","scope":7546,"src":"14379:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"},"typeName":{"id":7492,"nodeType":"UserDefinedTypeName","pathNode":{"id":7491,"name":"IERC20","nameLocations":["14379:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"14379:6:22"},"referencedDeclaration":938,"src":"14379:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$938","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":7495,"mutability":"mutable","name":"user","nameLocation":"14401:4:22","nodeType":"VariableDeclaration","scope":7546,"src":"14393:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7494,"name":"address","nodeType":"ElementaryTypeName","src":"14393:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7497,"mutability":"mutable","name":"amount","nameLocation":"14415:6:22","nodeType":"VariableDeclaration","scope":7546,"src":"14407:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7496,"name":"uint256","nodeType":"ElementaryTypeName","src":"14407:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14378:44:22"},"returnParameters":{"id":7501,"nodeType":"ParameterList","parameters":[],"src":"14449:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7555,"nodeType":"FunctionDefinition","src":"14798:78:22","nodes":[],"body":{"id":7554,"nodeType":"Block","src":"14869:7:22","nodes":[],"statements":[]},"baseFunctions":[389],"implemented":true,"kind":"function","modifiers":[{"id":7552,"kind":"modifierInvocation","modifierName":{"id":7551,"name":"onlyDiamondOwner","nameLocations":["14852:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":6229,"src":"14852:16:22"},"nodeType":"ModifierInvocation","src":"14852:16:22"}],"name":"_authorizeUpgrade","nameLocation":"14807:17:22","overrides":{"id":7550,"nodeType":"OverrideSpecifier","overrides":[],"src":"14843:8:22"},"parameters":{"id":7549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7555,"src":"14825:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7547,"name":"address","nodeType":"ElementaryTypeName","src":"14825:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14824:9:22"},"returnParameters":{"id":7553,"nodeType":"ParameterList","parameters":[],"src":"14869:0:22"},"scope":7556,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":6123,"name":"UUPSUpgradeable","nameLocations":["1472:15:22"],"nodeType":"IdentifierPath","referencedDeclaration":435,"src":"1472:15:22"},"id":6124,"nodeType":"InheritanceSpecifier","src":"1472:15:22"},{"baseName":{"id":6125,"name":"IBalanceKeeper","nameLocations":["1489:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":8092,"src":"1489:14:22"},"id":6126,"nodeType":"InheritanceSpecifier","src":"1489:14:22"},{"baseName":{"id":6127,"name":"ReentrancyGuardTransient","nameLocations":["1505:24:22"],"nodeType":"IdentifierPath","referencedDeclaration":1751,"src":"1505:24:22"},"id":6128,"nodeType":"InheritanceSpecifier","src":"1505:24:22"},{"baseName":{"id":6129,"name":"ArbHelper","nameLocations":["1531:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":6101,"src":"1531:9:22"},"id":6130,"nodeType":"InheritanceSpecifier","src":"1531:9:22"}],"canonicalName":"BalanceKeeper","contractDependencies":[],"contractKind":"contract","documentation":{"id":6122,"nodeType":"StructuredDocumentation","src":"1414:32:22","text":"@custom:fluence-abi-checker"},"fullyImplemented":true,"linearizedBaseContracts":[7556,6101,1751,8092,435,556,253],"name":"BalanceKeeper","nameLocation":"1455:13:22","scope":7557,"usedErrors":[16,19,280,285,576,589,952,1359,1621,1695],"usedEvents":[24,529,7608,7622,7635,7653,7666,7672,7681,7690,7703,7712,7716,7720,7731,7742,7750,7763,7772,7781,7790,7803,7814]}]}},"src/balance-keeper/IBalanceKeeper.sol":{"id":23,"ast":{}},"src/core/DealStakerRewards.sol":{"id":24,"ast":{}},"src/core/Snapshot.sol":{"id":25,"ast":{}},"src/core/Vesting.sol":{"id":26,"ast":{}},"src/core/interfaces/IBaseOffer.sol":{"id":27,"ast":{}},"src/core/interfaces/ICapacity.sol":{"id":28,"ast":{}},"src/core/interfaces/ICapacityConst.sol":{"id":29,"ast":{}},"src/core/interfaces/ICore.sol":{"id":30,"ast":{}},"src/core/interfaces/IDealFactory.sol":{"id":31,"ast":{}},"src/core/interfaces/IEpochController.sol":{"id":32,"ast":{}},"src/core/interfaces/IGlobalConst.sol":{"id":33,"ast":{}},"src/core/interfaces/IOffer.sol":{"id":34,"ast":{}},"src/core/interfaces/IOfferV2.sol":{"id":35,"ast":{}},"src/deal/interfaces/IConfig.sol":{"id":36,"ast":{}},"src/deal/interfaces/IDeal.sol":{"id":37,"ast":{}},"src/deal/interfaces/IWorkerManager.sol":{"id":38,"ast":{}},"src/deal/v1/interfaces/IConfig.sol":{"id":39,"ast":{}},"src/deal/v1/interfaces/IDeal.sol":{"id":40,"ast":{}},"src/deal/v1/interfaces/IWorkerManager.sol":{"id":41,"ast":{}},"src/interfaces/ArbSysInterface.sol":{"id":42,"ast":{}},"src/interfaces/IDiamond.sol":{"id":43,"ast":{}},"src/interfaces/IDiamondCut.sol":{"id":44,"ast":{}},"src/interfaces/IERC173.sol":{"id":45,"ast":{}},"src/interfaces/IWhitelist.sol":{"id":46,"ast":{}},"src/lib/LibBaseOffer.sol":{"id":47,"ast":{}},"src/lib/LibCapacity.sol":{"id":48,"ast":{}},"src/lib/LibCapacityConst.sol":{"id":49,"ast":{}},"src/lib/LibDiamond.sol":{"id":50,"ast":{}},"src/lib/LibEpochController.sol":{"id":51,"ast":{}},"src/lib/LibGlobalConst.sol":{"id":52,"ast":{}},"src/lib/LibOffer.sol":{"id":53,"ast":{}},"src/lib/LibOfferV2.sol":{"id":54,"ast":{}},"src/lib/LibOraclePrice.sol":{"id":55,"ast":{}},"src/lib/LibSendValue.sol":{"id":56,"ast":{}},"src/utils/Common.sol":{"id":57,"ast":{}},"src/utils/OwnableUpgradableDiamond.sol":{"id":58,"ast":{}}}},"solcLongVersion":"0.8.26","solcVersion":"0.8.26"}