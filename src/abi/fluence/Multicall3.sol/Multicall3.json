{"abi":[{"type":"function","name":"aggregate","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"returnData","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"function","name":"aggregate3","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call3[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"allowFailure","type":"bool","internalType":"bool"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"aggregate3Value","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call3Value[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"allowFailure","type":"bool","internalType":"bool"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"blockAndAggregate","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"getBasefee","inputs":[],"outputs":[{"name":"basefee","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBlockHash","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"blockHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBlockNumber","inputs":[],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getChainId","inputs":[],"outputs":[{"name":"chainid","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockCoinbase","inputs":[],"outputs":[{"name":"coinbase","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockGasLimit","inputs":[],"outputs":[{"name":"gaslimit","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockTimestamp","inputs":[],"outputs":[{"name":"timestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getEthBalance","inputs":[{"name":"addr","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastBlockHash","inputs":[],"outputs":[{"name":"blockHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"tryAggregate","inputs":[{"name":"requireSuccess","type":"bool","internalType":"bool"},{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"tryBlockAndAggregate","inputs":[{"name":"requireSuccess","type":"bool","internalType":"bool"},{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"}],"bytecode":{"object":"0x6080806040523461001657610a96908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610107578063174dea7114610102578063252dba42146100fd57806327e86d6e146100f85780633408e470146100f3578063399542e9146100ee5780633e64a696146100e957806342cbb15c146100e45780634d2301cc146100df57806382ad56cb146100da57806386d516e8146100d5578063a8b0574e146100d0578063bce38bd7146100cb578063c3077fa9146100c65763ee82ac5e146100c157600080fd5b610747565b6106ad565b61068a565b61066f565b610654565b61058a565b610562565b610536565b61051b565b6104f7565b610488565b610468565b6103a7565b610249565b34610122576000366003190112610122576020604051428152f35b600080fd5b9181601f84011215610122578235916001600160401b038311610122576020808501948460051b01011161012257565b602060031982011261012257600435906001600160401b0382116101225761018191600401610127565b9091565b919082519283825260005b8481106101b1575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610190565b908082519081815260208091019281808460051b8301019501936000915b8483106101f35750505050505090565b9091929394958480610225600193601f198682030187528a518360409180511515845201519181858201520190610185565b98019301930191949392906101e3565b9060206102469281815201906101c5565b90565b61025236610157565b600061025d826107bc565b9160005b81811061028757610283846102778534146108f7565b60405191829182610235565b0390f35b6102918185610837565b5161029d828488610850565b60008060406102d181850135809901986102b686610872565b926102c4606088018861087c565b93909151809481936108ae565b03925af1916102de6108bc565b906102f3602094859384840152829015159052565b5191013517156103065750600101610261565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b906040820190825260206040602084015283518092526060830192602060608460051b8301019501936000915b8483106103795750505050505090565b9091929394958480610397600193605f198682030187528a51610185565b9801930193019194939290610369565b6103b036610157565b906103c26103bd836107a5565b61077b565b82815291601f196103d2826107a5565b0160005b81811061045757505060005b8181106103f8576040518061028386438361033c565b8061045160008061040c6001958789610940565b8161042461041983610872565b92602081019061087c565b9190610435604051809481936108ae565b03925af16104416108bc565b61044b8489610837565b52610962565b016103e2565b8060606020809388010152016103d6565b346101225760003660031901126101225760206040516000194301408152f35b34610122576000366003190112610122576020604051468152f35b9060406003198301126101225760043580151581036101225791602435906001600160401b0382116101225761018191600401610127565b61024693926060928252602082015281604082015201906101c5565b61028361050c610506366104a3565b916109ca565b604051918291434043846104db565b34610122576000366003190112610122576020604051488152f35b34610122576000366003190112610122576020604051438152f35b6001600160a01b0381160361012257565b3461012257602036600319011261012257602060043561058181610551565b31604051908152f35b61059336610157565b61059c816107bc565b9060005b8181106105b557604051806102838582610235565b6105bf8184610837565b516105cb8284876109a8565b6000806105d783610872565b6105e98260406102c48188018861087c565b03925af1916105f66108bc565b9061060b602094859384840152829015159052565b51910135171561061e57506001016105a0565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b34610122576000366003190112610122576020604051458152f35b34610122576000366003190112610122576020604051418152f35b610283610699610506366104a3565b6040519182916020835260208301906101c5565b6106b636610157565b6106bf816107bc565b9160005b8281106106dc57604051806102838643804090846104db565b806107416106ec60019387610837565b516106f8838787610940565b600080823561070681610551565b816107166020958681019061087c565b9190826040519384928337810182815203925af1906107336108bc565b908301521515809152610962565b016106c3565b34610122576020366003190112610122576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176107a057604052565b610765565b6001600160401b0381116107a05760051b60200190565b906107c96103bd836107a5565b82815280926107da601f19916107a5565b016000805b8281106107ec5750505050565b604080519091908083016001600160401b038111828210176107a05760209352838152826060818301528287010152016107df565b634e487b7160e01b600052603260045260246000fd5b805182101561084b5760209160051b010190565b610821565b919081101561084b5760051b81013590607e1981360301821215610122570190565b3561024681610551565b903590601e198136030182121561012257018035906001600160401b0382116101225760200191813603831361012257565b908092918237016000815290565b3d156108f2573d906001600160401b0382116107a0576108e5601f8301601f191660200161077b565b9182523d6000602084013e565b606090565b156108fe57565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fd5b919081101561084b5760051b81013590603e1981360301821215610122570190565b1561096957565b60405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606490fd5b919081101561084b5760051b81013590605e1981360301821215610122570190565b9291906109d6826107bc565b9360005b8381106109e75750505050565b806109f460019288610837565b5183610a01838888610940565b6000808235610a0f81610551565b81610a1f6020958681019061087c565b9190826040519384928337810182815203925af190610a3c6108bc565b908401521515809252610a51575b50016109da565b610a5a90610962565b38610a4a56fea264697066735822122059f78c2876a6c50ca04148dc4ebf4d57119f7bf0ff8b121dbb1e16cde4a7d07d64736f6c63430008180033","sourceMap":"675:9156:105:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610107578063174dea7114610102578063252dba42146100fd57806327e86d6e146100f85780633408e470146100f3578063399542e9146100ee5780633e64a696146100e957806342cbb15c146100e45780634d2301cc146100df57806382ad56cb146100da57806386d516e8146100d5578063a8b0574e146100d0578063bce38bd7146100cb578063c3077fa9146100c65763ee82ac5e146100c157600080fd5b610747565b6106ad565b61068a565b61066f565b610654565b61058a565b610562565b610536565b61051b565b6104f7565b610488565b610468565b6103a7565b610249565b34610122576000366003190112610122576020604051428152f35b600080fd5b9181601f84011215610122578235916001600160401b038311610122576020808501948460051b01011161012257565b602060031982011261012257600435906001600160401b0382116101225761018191600401610127565b9091565b919082519283825260005b8481106101b1575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610190565b908082519081815260208091019281808460051b8301019501936000915b8483106101f35750505050505090565b9091929394958480610225600193601f198682030187528a518360409180511515845201519181858201520190610185565b98019301930191949392906101e3565b9060206102469281815201906101c5565b90565b61025236610157565b600061025d826107bc565b9160005b81811061028757610283846102778534146108f7565b60405191829182610235565b0390f35b6102918185610837565b5161029d828488610850565b60008060406102d181850135809901986102b686610872565b926102c4606088018861087c565b93909151809481936108ae565b03925af1916102de6108bc565b906102f3602094859384840152829015159052565b5191013517156103065750600101610261565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b906040820190825260206040602084015283518092526060830192602060608460051b8301019501936000915b8483106103795750505050505090565b9091929394958480610397600193605f198682030187528a51610185565b9801930193019194939290610369565b6103b036610157565b906103c26103bd836107a5565b61077b565b82815291601f196103d2826107a5565b0160005b81811061045757505060005b8181106103f8576040518061028386438361033c565b8061045160008061040c6001958789610940565b8161042461041983610872565b92602081019061087c565b9190610435604051809481936108ae565b03925af16104416108bc565b61044b8489610837565b52610962565b016103e2565b8060606020809388010152016103d6565b346101225760003660031901126101225760206040516000194301408152f35b34610122576000366003190112610122576020604051468152f35b9060406003198301126101225760043580151581036101225791602435906001600160401b0382116101225761018191600401610127565b61024693926060928252602082015281604082015201906101c5565b61028361050c610506366104a3565b916109ca565b604051918291434043846104db565b34610122576000366003190112610122576020604051488152f35b34610122576000366003190112610122576020604051438152f35b6001600160a01b0381160361012257565b3461012257602036600319011261012257602060043561058181610551565b31604051908152f35b61059336610157565b61059c816107bc565b9060005b8181106105b557604051806102838582610235565b6105bf8184610837565b516105cb8284876109a8565b6000806105d783610872565b6105e98260406102c48188018861087c565b03925af1916105f66108bc565b9061060b602094859384840152829015159052565b51910135171561061e57506001016105a0565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b34610122576000366003190112610122576020604051458152f35b34610122576000366003190112610122576020604051418152f35b610283610699610506366104a3565b6040519182916020835260208301906101c5565b6106b636610157565b6106bf816107bc565b9160005b8281106106dc57604051806102838643804090846104db565b806107416106ec60019387610837565b516106f8838787610940565b600080823561070681610551565b816107166020958681019061087c565b9190826040519384928337810182815203925af1906107336108bc565b908301521515809152610962565b016106c3565b34610122576020366003190112610122576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176107a057604052565b610765565b6001600160401b0381116107a05760051b60200190565b906107c96103bd836107a5565b82815280926107da601f19916107a5565b016000805b8281106107ec5750505050565b604080519091908083016001600160401b038111828210176107a05760209352838152826060818301528287010152016107df565b634e487b7160e01b600052603260045260246000fd5b805182101561084b5760209160051b010190565b610821565b919081101561084b5760051b81013590607e1981360301821215610122570190565b3561024681610551565b903590601e198136030182121561012257018035906001600160401b0382116101225760200191813603831361012257565b908092918237016000815290565b3d156108f2573d906001600160401b0382116107a0576108e5601f8301601f191660200161077b565b9182523d6000602084013e565b606090565b156108fe57565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fd5b919081101561084b5760051b81013590603e1981360301821215610122570190565b1561096957565b60405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606490fd5b919081101561084b5760051b81013590605e1981360301821215610122570190565b9291906109d6826107bc565b9360005b8381106109e75750505050565b806109f460019288610837565b5183610a01838888610940565b6000808235610a0f81610551565b81610a1f6020958681019061087c565b9190826040519384928337810182815203925af190610a3c6108bc565b908401521515809252610a51575b50016109da565b610a5a90610962565b38610a4a56fea264697066735822122059f78c2876a6c50ca04148dc4ebf4d57119f7bf0ff8b121dbb1e16cde4a7d07d64736f6c63430008180033","sourceMap":"675:9156:105:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;675:9156:105;;;;;;;9016:15;675:9156;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;675:9156:105;;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;-1:-1:-1;675:9156:105;;;;;;;;;-1:-1:-1;675:9156:105;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;675:9156:105;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;-1:-1:-1;6312:20:105;;;:::i;:::-;6382:13;-1:-1:-1;6397:10:105;;;;;;675:9156;8064:9;8056:66;8064:9;;:27;8056:66;:::i;:::-;6518:11;675:9156;;;;;;:::i;:::-;;;;6382:13;6447;;;;:::i;:::-;;6482:8;;;;;:::i;:::-;-1:-1:-1;6518:11:105;;675:9156;6518:11;;;675:9156;;;;6833:12;;;;:::i;:::-;6863:14;;;;;;;:::i;:::-;675:9156;;;;;;;;;:::i;:::-;6833:45;;;;;;;:::i;:::-;6812:17;6795:83;6812:17;;;;;;;6795:83;;675:9156;;;;;;6795:83;6892:1017;;;;;;;;675:9156;;;6382:13;;6892:1017;;;;-1:-1:-1;6892:1017:105;675:9156;6892:1017;;;;;;;;;;-1:-1:-1;6892:1017:105;675:9156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;;-1:-1:-1;;675:9156:105;;;:::i;:::-;;-1:-1:-1;675:9156:105;;;;;;1613:13;;-1:-1:-1;1628:10:105;;;;;;675:9156;;;;;1477:12;675:9156;;:::i;1613:13::-;1688:8;1782:43;-1:-1:-1;1688:8:105;;675:9156;1688:8;;;;:::i;:::-;1737:11;1754:13;1737:11;;;:::i;:::-;1754:13;675:9156;1754:13;;;;:::i;:::-;675:9156;;;;;;;;;;:::i;:::-;1737:31;;;;;;:::i;:::-;1710:58;;;;:::i;:::-;;1782:43;:::i;:::-;675:9156;1613:13;;675:9156;;;;;;;;;;;;;;;;;;;-1:-1:-1;;675:9156:105;;;;;;;;;9406:12;675:9156;9396:27;675:9156;;;;;;;;;-1:-1:-1;;675:9156:105;;;;;;;9809:13;675:9156;;;;;;-1:-1:-1;;675:9156:105;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3487:35;675:9156;;;:::i;:::-;3487:35;;:::i;:::-;675:9156;;3407:12;;;;3441:23;3407:12;675:9156;;:::i;:::-;;;;;;-1:-1:-1;;675:9156:105;;;;;;;9666:13;675:9156;;;;;;;;;-1:-1:-1;;675:9156:105;;;;;;;8518:12;675:9156;;;;-1:-1:-1;;;;;675:9156:105;;;;;:::o;:::-;;;;;;-1:-1:-1;;675:9156:105;;;;;;;;;;:::i;:::-;9200:12;675:9156;;;;;;;;;;:::i;:::-;4510:20;;;:::i;:::-;4575:13;-1:-1:-1;4590:10:105;;;;;;4753:14;675:9156;;;;;;:::i;4575:13::-;4640;;;;:::i;:::-;;4675:8;;;;;:::i;:::-;-1:-1:-1;4735:12:105;;;;:::i;:::-;675:9156;4753:14;;;;;;;;:::i;675:9156::-;4735:33;;;;;;;:::i;:::-;4714:17;4697:71;4714:17;;;;;;;4697:71;;675:9156;;;;;;4697:71;4782:1017;;;;;;;;675:9156;;;4575:13;;4782:1017;6892;;;-1:-1:-1;4782:1017:105;675:9156;4782:1017;;;;6892;;;4782;;;-1:-1:-1;4782:1017:105;675:9156;;;;;;-1:-1:-1;;675:9156:105;;;;;;;8847:14;675:9156;;;;;;;;;-1:-1:-1;;675:9156:105;;;;;;;8681:14;675:9156;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;2394:20;;;:::i;:::-;2457:13;-1:-1:-1;2472:10:105;;;;;;675:9156;;;;;3407:12;3441:23;;;675:9156;;:::i;2457:13::-;2522;2681:50;2522:13;4151:4;2522:13;;;:::i;:::-;;2556:8;;;;;:::i;:::-;-1:-1:-1;675:9156:105;;;;;;:::i;:::-;2633:13;;;;;;;;;:::i;:::-;675:9156;;;;;;;;;;;;;;;2616:31;;;;;;;:::i;:::-;2595:17;;;2578:69;675:9156;;;;;2681:50;:::i;:::-;675:9156;2457:13;;675:9156;;;;;;-1:-1:-1;;675:9156:105;;;;;;;;;8350:22;675:9156;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;675:9156:105;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;;:::o;:::-;;:::i;:::-;-1:-1:-1;;;;;675:9156:105;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;675:9156:105;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;675:9156:105;;;;;;;;-1:-1:-1;;675:9156:105;;;;:::i;:::-;;;;;-1:-1:-1;675:9156:105;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;675:9156:105;;;;;;;;;;;;-1:-1:-1;;;675:9156:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;675:9156:105;;;;;;;;;;;;-1:-1:-1;;;675:9156:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2186:621::-;;;;2394:20;;;:::i;:::-;2457:13;-1:-1:-1;2472:10:105;;;;;;2186:621;;;;:::o;2457:13::-;2522;;675:9156;2522:13;;;:::i;:::-;;2556:8;;;;;;:::i;:::-;-1:-1:-1;675:9156:105;;;;;;:::i;:::-;2633:13;;;;;;;;;:::i;:::-;675:9156;;;;;;;;;;;;;;;2616:31;;;;;;;:::i;:::-;2595:17;;;2578:69;675:9156;;;;;2661:70;;2457:13;675:9156;;2457:13;;2661:70;2681:50;;;:::i;:::-;2661:70;;","linkReferences":{}},"methodIdentifiers":{"aggregate((address,bytes)[])":"252dba42","aggregate3((address,bool,bytes)[])":"82ad56cb","aggregate3Value((address,bool,uint256,bytes)[])":"174dea71","blockAndAggregate((address,bytes)[])":"c3077fa9","getBasefee()":"3e64a696","getBlockHash(uint256)":"ee82ac5e","getBlockNumber()":"42cbb15c","getChainId()":"3408e470","getCurrentBlockCoinbase()":"a8b0574e","getCurrentBlockGasLimit()":"86d516e8","getCurrentBlockTimestamp()":"0f28c97d","getEthBalance(address)":"4d2301cc","getLastBlockHash()":"27e86d6e","tryAggregate(bool,(address,bytes)[])":"bce38bd7","tryBlockAndAggregate(bool,(address,bytes)[])":"399542e9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>\",\"details\":\"In FluenceLabs it used only for batch reading from Fluence frontends, CLIs.Ref to https://github.com/mds1/multicall/blob/main/src/Multicall3.sol.Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call\",\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of bytes containing the responses\"}},\"aggregate3((address,bool,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3 structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3Value structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"blockAndAggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}},\"getBlockHash(uint256)\":{\"params\":{\"blockNumber\":\"The block number\"}},\"tryAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\",\"requireSuccess\":\"If true, require all calls to succeed\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}}},\"title\":\"Multicall3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible call aggregation with Multicall\"},\"aggregate3((address,bool,bytes)[])\":{\"notice\":\"Aggregate calls, ensuring each returns success if required\"},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"notice\":\"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values\"},\"blockAndAggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"},\"getBasefee()\":{\"notice\":\"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain\"},\"getBlockHash(uint256)\":{\"notice\":\"Returns the block hash for the given block number\"},\"getBlockNumber()\":{\"notice\":\"Returns the block number\"},\"getChainId()\":{\"notice\":\"Returns the chain id\"},\"getCurrentBlockCoinbase()\":{\"notice\":\"Returns the block coinbase\"},\"getCurrentBlockGasLimit()\":{\"notice\":\"Returns the block gas limit\"},\"getCurrentBlockTimestamp()\":{\"notice\":\"Returns the block timestamp\"},\"getEthBalance(address)\":{\"notice\":\"Returns the (ETH) balance of a given address\"},\"getLastBlockHash()\":{\"notice\":\"Returns the block hash of the last block\"},\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls without requiring success\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"}},\"notice\":\"Aggregate results from multiple function calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/Multicall3.sol\":\"Multicall3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[\":@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/\",\":@openzeppelin/contracts-upgradeable/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":buffer/=lib/filecoin-solidity/lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":filecoin-solidity/=lib/filecoin-solidity/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/\",\":solidity-cborutils/=lib/solidity-cborutils/contracts/\",\":solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/\"],\"viaIR\":true},\"sources\":{\"src/utils/Multicall3.sol\":{\"keccak256\":\"0x2f656171fbdf1b9cf2547f6a7cb162476716c81fee7f42dbab367ae3f2dfc226\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://dee8306e4c599c03d41e9330a7f540ad566a3e3349bb9f0afe4f96a61d8d00c2\",\"dweb:/ipfs/QmUD6LoXgLSdmkADXLkeNaFfBrh6dpvSwyec1JmsuiorEv\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}]},{"inputs":[{"internalType":"struct Multicall3.Call3[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate3","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"struct Multicall3.Call3Value[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate3Value","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"blockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBasefee","outputs":[{"internalType":"uint256","name":"basefee","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getChainId","outputs":[{"internalType":"uint256","name":"chainid","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockCoinbase","outputs":[{"internalType":"address","name":"coinbase","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockGasLimit","outputs":[{"internalType":"uint256","name":"gaslimit","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"stateMutability":"view","type":"function","name":"getEthBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLastBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}]},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"tryAggregate","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"tryBlockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]}],"devdoc":{"kind":"dev","methods":{"aggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockNumber":"The block number where the calls were executed","returnData":"An array of bytes containing the responses"}},"aggregate3((address,bool,bytes)[])":{"params":{"calls":"An array of Call3 structs"},"returns":{"returnData":"An array of Result structs"}},"aggregate3Value((address,bool,uint256,bytes)[])":{"params":{"calls":"An array of Call3Value structs"},"returns":{"returnData":"An array of Result structs"}},"blockAndAggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}},"getBlockHash(uint256)":{"params":{"blockNumber":"The block number"}},"tryAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs","requireSuccess":"If true, require all calls to succeed"},"returns":{"returnData":"An array of Result structs"}},"tryBlockAndAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}}},"version":1},"userdoc":{"kind":"user","methods":{"aggregate((address,bytes)[])":{"notice":"Backwards-compatible call aggregation with Multicall"},"aggregate3((address,bool,bytes)[])":{"notice":"Aggregate calls, ensuring each returns success if required"},"aggregate3Value((address,bool,uint256,bytes)[])":{"notice":"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values"},"blockAndAggregate((address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"},"getBasefee()":{"notice":"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain"},"getBlockHash(uint256)":{"notice":"Returns the block hash for the given block number"},"getBlockNumber()":{"notice":"Returns the block number"},"getChainId()":{"notice":"Returns the chain id"},"getCurrentBlockCoinbase()":{"notice":"Returns the block coinbase"},"getCurrentBlockGasLimit()":{"notice":"Returns the block gas limit"},"getCurrentBlockTimestamp()":{"notice":"Returns the block timestamp"},"getEthBalance(address)":{"notice":"Returns the (ETH) balance of a given address"},"getLastBlockHash()":{"notice":"Returns the block hash of the last block"},"tryAggregate(bool,(address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls without requiring success"},"tryBlockAndAggregate(bool,(address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"}},"version":1}},"settings":{"remappings":["@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/","@openzeppelin/contracts-upgradeable/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","buffer/=lib/filecoin-solidity/lib/buffer/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","filecoin-solidity/=lib/filecoin-solidity/contracts/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/","solidity-cborutils/=lib/solidity-cborutils/contracts/","solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/"],"optimizer":{"enabled":true,"runs":0},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/utils/Multicall3.sol":"Multicall3"},"evmVersion":"london","libraries":{},"viaIR":true},"sources":{"src/utils/Multicall3.sol":{"keccak256":"0x2f656171fbdf1b9cf2547f6a7cb162476716c81fee7f42dbab367ae3f2dfc226","urls":["bzz-raw://dee8306e4c599c03d41e9330a7f540ad566a3e3349bb9f0afe4f96a61d8d00c2","dweb:/ipfs/QmUD6LoXgLSdmkADXLkeNaFfBrh6dpvSwyec1JmsuiorEv"],"license":"Apache-2.0"}},"version":1},"storageLayout":{"storage":[],"types":{}},"devdoc":{"version":1,"kind":"dev","author":"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>","details":"In FluenceLabs it used only for batch reading from Fluence frontends, CLIs.Ref to https://github.com/mds1/multicall/blob/main/src/Multicall3.sol.Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call","methods":{"aggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockNumber":"The block number where the calls were executed","returnData":"An array of bytes containing the responses"}},"aggregate3((address,bool,bytes)[])":{"params":{"calls":"An array of Call3 structs"},"returns":{"returnData":"An array of Result structs"}},"aggregate3Value((address,bool,uint256,bytes)[])":{"params":{"calls":"An array of Call3Value structs"},"returns":{"returnData":"An array of Result structs"}},"blockAndAggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}},"getBlockHash(uint256)":{"params":{"blockNumber":"The block number"}},"tryAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs","requireSuccess":"If true, require all calls to succeed"},"returns":{"returnData":"An array of Result structs"}},"tryBlockAndAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}}},"title":"Multicall3"},"id":105}