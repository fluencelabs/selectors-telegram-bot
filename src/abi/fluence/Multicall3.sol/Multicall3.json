{"abi":[{"type":"function","name":"aggregate","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"returnData","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"function","name":"aggregate3","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call3[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"allowFailure","type":"bool","internalType":"bool"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"aggregate3Value","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call3Value[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"allowFailure","type":"bool","internalType":"bool"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"blockAndAggregate","inputs":[{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"getBasefee","inputs":[],"outputs":[{"name":"basefee","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBlockHash","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"blockHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBlockNumber","inputs":[],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getChainId","inputs":[],"outputs":[{"name":"chainid","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockCoinbase","inputs":[],"outputs":[{"name":"coinbase","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockGasLimit","inputs":[],"outputs":[{"name":"gaslimit","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBlockTimestamp","inputs":[],"outputs":[{"name":"timestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getEthBalance","inputs":[{"name":"addr","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastBlockHash","inputs":[],"outputs":[{"name":"blockHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"tryAggregate","inputs":[{"name":"requireSuccess","type":"bool","internalType":"bool"},{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"},{"type":"function","name":"tryBlockAndAggregate","inputs":[{"name":"requireSuccess","type":"bool","internalType":"bool"},{"name":"calls","type":"tuple[]","internalType":"struct Multicall3.Call[]","components":[{"name":"target","type":"address","internalType":"address"},{"name":"callData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"returnData","type":"tuple[]","internalType":"struct Multicall3.Result[]","components":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnData","type":"bytes","internalType":"bytes"}]}],"stateMutability":"payable"}],"bytecode":{"object":"0x60808060405234601557610a1b908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630f28c97d14610104578063174dea71146100ff578063252dba42146100fa57806327e86d6e146100f55780633408e470146100f0578063399542e9146100eb5780633e64a696146100e657806342cbb15c146100e15780634d2301cc146100dc57806382ad56cb146100d757806386d516e8146100d2578063a8b0574e146100cd578063bce38bd7146100c8578063c3077fa9146100c35763ee82ac5e146100be575f80fd5b6106ce565b610637565b610614565b6105fa565b6105e0565b610543565b61051b565b6104f0565b6104d6565b6104b2565b610444565b610426565b610368565b610223565b3461011e575f36600319011261011e576020604051428152f35b5f80fd5b9181601f8401121561011e578235916001600160401b03831161011e576020808501948460051b01011161011e57565b602060031982011261011e57600435906001600160401b03821161011e5761017c91600401610122565b9091565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9080602083519182815201916020808360051b8301019401925f915b8383106101cf57505050505090565b9091929394602080610200600193601f198682030187526040838b5180511515845201519181858201520190610180565b970193019301919392906101c0565b9060206102209281815201906101a4565b90565b61022c36610152565b5f9061023781610741565b925f5b8281106102605761025c85610250863414610876565b6040519182918261020f565b0390f35b61026a81866107b8565b5160206102788386866107d1565b916102c55f806040860135809a0199610290876107f3565b9061029e60608901896107fd565b91906102af6040518094819361082f565b03925af16102bb61083c565b8385015215158252565b5191013517156102d75760010161023a565b62461bcd60e51b5f908152602060045260176024525f805160206109c6833981519152604452608490fd5b90604082019082526040602083015282518091526060820191602060608360051b8301019401925f915b83831061033b57505050505090565b9091929394602080610359600193605f198682030187528951610180565b9701930193019193929061032c565b61037136610152565b9061038361037e8361072a565b610700565b82815291601f196103938261072a565b015f5b8181106104155750505f5b8181106103b7576040518061025c864383610302565b8061040f5f806103ca60019587896108bf565b816103e26103d7836107f3565b9260208101906107fd565b91906103f36040518094819361082f565b03925af16103ff61083c565b61040984896107b8565b526108e1565b016103a1565b806060602080938801015201610396565b3461011e575f36600319011261011e5760206040515f194301408152f35b3461011e575f36600319011261011e576020604051468152f35b90604060031983011261011e57600435801515810361011e5791602435906001600160401b03821161011e5761017c91600401610122565b61022093926060928252602082015281604082015201906101a4565b61025c6104c76104c13661045e565b9161093c565b60405191829143404384610496565b3461011e575f36600319011261011e576020604051488152f35b3461011e575f36600319011261011e576020604051438152f35b6001600160a01b0381160361011e57565b3461011e57602036600319011261011e57602060043561053a8161050a565b31604051908152f35b61054c36610152565b9061055682610741565b905f5b83811061056e576040518061025c858261020f565b61057881846107b8565b51602061058683878661091a565b916105a35f80610595866107f3565b8161029e60408901896107fd565b5191013517156105b557600101610559565b62461bcd60e51b5f908152602060045260176024525f805160206109c6833981519152604452606490fd5b3461011e575f36600319011261011e576020604051458152f35b3461011e575f36600319011261011e576020604051418152f35b61025c6106236104c13661045e565b6040519182916020835260208301906101a4565b61064036610152565b61064981610741565b915f5b828110610665576040518061025c864380409084610496565b806106c8610675600193876107b8565b515f806106838589896108bf565b8161069d8235926106938461050a565b60208101906107fd565b9190826040519384928337810182815203925af16106b961083c565b602083015215158091526108e1565b0161064c565b3461011e57602036600319011261011e576020604051600435408152f35b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f191682016001600160401b0381118382101761072557604052565b6106ec565b6001600160401b0381116107255760051b60200190565b9061074e61037e8361072a565b828152809261075f601f199161072a565b015f5b81811061076e57505050565b6040805190810191906001600160401b03831181841017610725576020926040525f815260608382015282828601015201610762565b634e487b7160e01b5f52603260045260245ffd5b80518210156107cc5760209160051b010190565b6107a4565b91908110156107cc5760051b81013590607e198136030182121561011e570190565b356102208161050a565b903590601e198136030182121561011e57018035906001600160401b03821161011e5760200191813603831361011e57565b908092918237015f815290565b3d15610871573d906001600160401b03821161072557610865601f8301601f1916602001610700565b9182523d5f602084013e565b606090565b1561087d57565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fd5b91908110156107cc5760051b81013590603e198136030182121561011e570190565b156108e857565b60405162461bcd60e51b815260206004820152601760248201525f805160206109c68339815191526044820152606490fd5b91908110156107cc5760051b81013590605e198136030182121561011e570190565b92919061094882610741565b935f5b8381106109585750505050565b80610965600192886107b8565b51835f80610974858a8a6108bf565b816109848235926106938461050a565b9190826040519384928337810182815203925af16109a061083c565b602084015215158092526109b6575b500161094b565b6109bf906108e1565b5f6109af56fe4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000a26469706673582212205e55c098936cce1c514a6fd4ef65f57e7e604308aa2aa8d614fe00ac3d8404b964736f6c634300081a0033","sourceMap":"1335:9156:121:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361015610011575f80fd5b5f3560e01c80630f28c97d14610104578063174dea71146100ff578063252dba42146100fa57806327e86d6e146100f55780633408e470146100f0578063399542e9146100eb5780633e64a696146100e657806342cbb15c146100e15780634d2301cc146100dc57806382ad56cb146100d757806386d516e8146100d2578063a8b0574e146100cd578063bce38bd7146100c8578063c3077fa9146100c35763ee82ac5e146100be575f80fd5b6106ce565b610637565b610614565b6105fa565b6105e0565b610543565b61051b565b6104f0565b6104d6565b6104b2565b610444565b610426565b610368565b610223565b3461011e575f36600319011261011e576020604051428152f35b5f80fd5b9181601f8401121561011e578235916001600160401b03831161011e576020808501948460051b01011161011e57565b602060031982011261011e57600435906001600160401b03821161011e5761017c91600401610122565b9091565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9080602083519182815201916020808360051b8301019401925f915b8383106101cf57505050505090565b9091929394602080610200600193601f198682030187526040838b5180511515845201519181858201520190610180565b970193019301919392906101c0565b9060206102209281815201906101a4565b90565b61022c36610152565b5f9061023781610741565b925f5b8281106102605761025c85610250863414610876565b6040519182918261020f565b0390f35b61026a81866107b8565b5160206102788386866107d1565b916102c55f806040860135809a0199610290876107f3565b9061029e60608901896107fd565b91906102af6040518094819361082f565b03925af16102bb61083c565b8385015215158252565b5191013517156102d75760010161023a565b62461bcd60e51b5f908152602060045260176024525f805160206109c6833981519152604452608490fd5b90604082019082526040602083015282518091526060820191602060608360051b8301019401925f915b83831061033b57505050505090565b9091929394602080610359600193605f198682030187528951610180565b9701930193019193929061032c565b61037136610152565b9061038361037e8361072a565b610700565b82815291601f196103938261072a565b015f5b8181106104155750505f5b8181106103b7576040518061025c864383610302565b8061040f5f806103ca60019587896108bf565b816103e26103d7836107f3565b9260208101906107fd565b91906103f36040518094819361082f565b03925af16103ff61083c565b61040984896107b8565b526108e1565b016103a1565b806060602080938801015201610396565b3461011e575f36600319011261011e5760206040515f194301408152f35b3461011e575f36600319011261011e576020604051468152f35b90604060031983011261011e57600435801515810361011e5791602435906001600160401b03821161011e5761017c91600401610122565b61022093926060928252602082015281604082015201906101a4565b61025c6104c76104c13661045e565b9161093c565b60405191829143404384610496565b3461011e575f36600319011261011e576020604051488152f35b3461011e575f36600319011261011e576020604051438152f35b6001600160a01b0381160361011e57565b3461011e57602036600319011261011e57602060043561053a8161050a565b31604051908152f35b61054c36610152565b9061055682610741565b905f5b83811061056e576040518061025c858261020f565b61057881846107b8565b51602061058683878661091a565b916105a35f80610595866107f3565b8161029e60408901896107fd565b5191013517156105b557600101610559565b62461bcd60e51b5f908152602060045260176024525f805160206109c6833981519152604452606490fd5b3461011e575f36600319011261011e576020604051458152f35b3461011e575f36600319011261011e576020604051418152f35b61025c6106236104c13661045e565b6040519182916020835260208301906101a4565b61064036610152565b61064981610741565b915f5b828110610665576040518061025c864380409084610496565b806106c8610675600193876107b8565b515f806106838589896108bf565b8161069d8235926106938461050a565b60208101906107fd565b9190826040519384928337810182815203925af16106b961083c565b602083015215158091526108e1565b0161064c565b3461011e57602036600319011261011e576020604051600435408152f35b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f191682016001600160401b0381118382101761072557604052565b6106ec565b6001600160401b0381116107255760051b60200190565b9061074e61037e8361072a565b828152809261075f601f199161072a565b015f5b81811061076e57505050565b6040805190810191906001600160401b03831181841017610725576020926040525f815260608382015282828601015201610762565b634e487b7160e01b5f52603260045260245ffd5b80518210156107cc5760209160051b010190565b6107a4565b91908110156107cc5760051b81013590607e198136030182121561011e570190565b356102208161050a565b903590601e198136030182121561011e57018035906001600160401b03821161011e5760200191813603831361011e57565b908092918237015f815290565b3d15610871573d906001600160401b03821161072557610865601f8301601f1916602001610700565b9182523d5f602084013e565b606090565b1561087d57565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fd5b91908110156107cc5760051b81013590603e198136030182121561011e570190565b156108e857565b60405162461bcd60e51b815260206004820152601760248201525f805160206109c68339815191526044820152606490fd5b91908110156107cc5760051b81013590605e198136030182121561011e570190565b92919061094882610741565b935f5b8381106109585750505050565b80610965600192886107b8565b51835f80610974858a8a6108bf565b816109848235926106938461050a565b9190826040519384928337810182815203925af16109a061083c565b602084015215158092526109b6575b500161094b565b6109bf906108e1565b5f6109af56fe4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000a26469706673582212205e55c098936cce1c514a6fd4ef65f57e7e604308aa2aa8d614fe00ac3d8404b964736f6c634300081a0033","sourceMap":"1335:9156:121:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;9676:15;1335:9156;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;1335:9156:121;;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1335:9156:121;;;;;;;;-1:-1:-1;;1335:9156:121;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1335:9156:121;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;-1:-1:-1;6972:20:121;;;;:::i;:::-;7042:13;-1:-1:-1;7057:10:121;;;;;;1335:9156;8724:9;8716:66;8724:9;;:27;8716:66;:::i;:::-;7178:11;1335:9156;;;;;;:::i;:::-;;;;7042:13;7107;;;;:::i;:::-;;7472:17;7142:8;;;;;:::i;:::-;7178:11;7455:83;-1:-1:-1;7178:11:121;;;;1335:9156;;;;7493:12;;;;:::i;:::-;7523:14;;;;;;;:::i;:::-;1335:9156;;;7178:11;1335:9156;;;;;;:::i;:::-;7493:45;;;;;;:::i;:::-;7472:17;;;7455:83;1335:9156;;;;;7455:83;7552:1017;;;;;;;;1335:9156;;7042:13;;7552:1017;-1:-1:-1;;;;7552:1017:121;;;7472:17;1335:9156;7552:1017;;;;-1:-1:-1;;;;;;;;;;;7552:1017:121;;;;;1335:9156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;;-1:-1:-1;;1335:9156:121;;;:::i;:::-;;-1:-1:-1;1335:9156:121;;;;;;2273:13;;-1:-1:-1;2288:10:121;;;;;;1335:9156;;;;;2137:12;1335:9156;;:::i;2273:13::-;2348:8;2442:43;-1:-1:-1;2348:8:121;;1335:9156;2348:8;;;;:::i;:::-;2397:11;2414:13;2397:11;;;:::i;:::-;2414:13;1335:9156;2414:13;;;;:::i;:::-;1335:9156;;;;;;;;;;:::i;:::-;2397:31;;;;;;:::i;:::-;2370:58;;;;:::i;:::-;;2442:43;:::i;:::-;1335:9156;2273:13;;1335:9156;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;;;10066:12;1335:9156;10056:27;1335:9156;;;;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;10469:13;1335:9156;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4147:35;1335:9156;;;:::i;:::-;4147:35;;:::i;:::-;1335:9156;;4067:12;;;;4101:23;4067:12;1335:9156;;:::i;:::-;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;10326:13;1335:9156;;;;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;9178:12;1335:9156;;;;-1:-1:-1;;;;;1335:9156:121;;;;;:::o;:::-;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;;;;:::i;:::-;9860:12;1335:9156;;;;;;;;;;:::i;:::-;5170:20;;;;:::i;:::-;5235:13;-1:-1:-1;5250:10:121;;;;;;5413:14;1335:9156;;;;;;:::i;5235:13::-;5300;;;;:::i;:::-;;5374:17;5335:8;;;;;:::i;:::-;5395:12;5357:71;-1:-1:-1;5395:12:121;;;;:::i;:::-;5413:14;;;;;;;:::i;5357:71::-;5442:1017;;;;;;;;1335:9156;;5235:13;;5442:1017;-1:-1:-1;;;;5442:1017:121;;;5374:17;1335:9156;5442:1017;;;;-1:-1:-1;;;;;;;;;;;5442:1017:121;;;;;1335:9156;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;9507:14;1335:9156;;;;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;9341:14;1335:9156;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;3054:20;;;:::i;:::-;3117:13;-1:-1:-1;3132:10:121;;;;;;1335:9156;;;;;4067:12;4101:23;;;1335:9156;;:::i;3117:13::-;3182;3341:50;3182:13;4811:4;3182:13;;;:::i;:::-;;-1:-1:-1;3216:8:121;;;;;;:::i;:::-;1335:9156;3293:13;1335:9156;;;;;;:::i;:::-;3293:13;;;;;:::i;:::-;1335:9156;;;;;;;;;;;;;;;3276:31;;;;;;:::i;:::-;3293:13;3255:17;;3238:69;1335:9156;;;;;3341:50;:::i;:::-;1335:9156;3117:13;;1335:9156;;;;;;-1:-1:-1;;1335:9156:121;;;;;;;;;9010:22;1335:9156;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1335:9156:121;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;;:::o;:::-;;:::i;:::-;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;-1:-1:-1;1335:9156:121;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;;;;-1:-1:-1;1335:9156:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1335:9156:121;;;;;;;;-1:-1:-1;;1335:9156:121;;;;:::i;:::-;;;;;-1:-1:-1;1335:9156:121;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1335:9156:121;;;;;;;;;;;;-1:-1:-1;;;1335:9156:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1335:9156:121;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1335:9156:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2846:621::-;;;;3054:20;;;:::i;:::-;3117:13;-1:-1:-1;3132:10:121;;;;;;2846:621;;;;:::o;3117:13::-;3182;;1335:9156;3182:13;;;:::i;:::-;;3216:8;-1:-1:-1;3216:8:121;;;;;;:::i;:::-;1335:9156;3293:13;1335:9156;;;;;;:::i;3293:13::-;1335:9156;;;;;;;;;;;;;;;3276:31;;;;;;:::i;:::-;3293:13;3255:17;;3238:69;1335:9156;;;;;3321:70;;3117:13;1335:9156;;3117:13;;3321:70;3341:50;;;:::i;:::-;3321:70;;","linkReferences":{}},"methodIdentifiers":{"aggregate((address,bytes)[])":"252dba42","aggregate3((address,bool,bytes)[])":"82ad56cb","aggregate3Value((address,bool,uint256,bytes)[])":"174dea71","blockAndAggregate((address,bytes)[])":"c3077fa9","getBasefee()":"3e64a696","getBlockHash(uint256)":"ee82ac5e","getBlockNumber()":"42cbb15c","getChainId()":"3408e470","getCurrentBlockCoinbase()":"a8b0574e","getCurrentBlockGasLimit()":"86d516e8","getCurrentBlockTimestamp()":"0f28c97d","getEthBalance(address)":"4d2301cc","getLastBlockHash()":"27e86d6e","tryAggregate(bool,(address,bytes)[])":"bce38bd7","tryBlockAndAggregate(bool,(address,bytes)[])":"399542e9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>\",\"details\":\"In FluenceLabs it used only for batch reading from Fluence frontends, CLIs.Ref to https://github.com/mds1/multicall/blob/main/src/Multicall3.sol.Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call\",\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of bytes containing the responses\"}},\"aggregate3((address,bool,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3 structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3Value structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"blockAndAggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}},\"getBlockHash(uint256)\":{\"params\":{\"blockNumber\":\"The block number\"}},\"tryAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\",\"requireSuccess\":\"If true, require all calls to succeed\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}}},\"title\":\"Multicall3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible call aggregation with Multicall\"},\"aggregate3((address,bool,bytes)[])\":{\"notice\":\"Aggregate calls, ensuring each returns success if required\"},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"notice\":\"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values\"},\"blockAndAggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"},\"getBasefee()\":{\"notice\":\"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain\"},\"getBlockHash(uint256)\":{\"notice\":\"Returns the block hash for the given block number\"},\"getBlockNumber()\":{\"notice\":\"Returns the block number\"},\"getChainId()\":{\"notice\":\"Returns the chain id\"},\"getCurrentBlockCoinbase()\":{\"notice\":\"Returns the block coinbase\"},\"getCurrentBlockGasLimit()\":{\"notice\":\"Returns the block gas limit\"},\"getCurrentBlockTimestamp()\":{\"notice\":\"Returns the block timestamp\"},\"getEthBalance(address)\":{\"notice\":\"Returns the (ETH) balance of a given address\"},\"getLastBlockHash()\":{\"notice\":\"Returns the block hash of the last block\"},\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls without requiring success\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"}},\"notice\":\"Aggregate results from multiple function calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/Multicall3.sol\":\"Multicall3\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[\":@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":buffer/=lib/filecoin-solidity/lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":filecoin-solidity/=lib/filecoin-solidity/contracts/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/\",\":solidity-cborutils/=lib/solidity-cborutils/contracts/\",\":solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/\"],\"viaIR\":true},\"sources\":{\"src/utils/Multicall3.sol\":{\"keccak256\":\"0x524151a0a40772a029fadba404f7fa58f6557159ef779e9d5a43374939c1381c\",\"urls\":[\"bzz-raw://a4f4540f734bdc412cc4cd83703c8e5e68d854348000d841cafe22f25048faac\",\"dweb:/ipfs/QmTjcjpWUg9cqsvdWuSgy58KgjWWC277vmp2b4YCB8QYZM\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}]},{"inputs":[{"internalType":"struct Multicall3.Call3[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate3","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"struct Multicall3.Call3Value[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"aggregate3Value","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"blockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBasefee","outputs":[{"internalType":"uint256","name":"basefee","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getChainId","outputs":[{"internalType":"uint256","name":"chainid","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockCoinbase","outputs":[{"internalType":"address","name":"coinbase","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockGasLimit","outputs":[{"internalType":"uint256","name":"gaslimit","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"stateMutability":"view","type":"function","name":"getEthBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLastBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}]},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"tryAggregate","outputs":[{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]","components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"tryBlockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]","components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}]}]}],"devdoc":{"kind":"dev","methods":{"aggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockNumber":"The block number where the calls were executed","returnData":"An array of bytes containing the responses"}},"aggregate3((address,bool,bytes)[])":{"params":{"calls":"An array of Call3 structs"},"returns":{"returnData":"An array of Result structs"}},"aggregate3Value((address,bool,uint256,bytes)[])":{"params":{"calls":"An array of Call3Value structs"},"returns":{"returnData":"An array of Result structs"}},"blockAndAggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}},"getBlockHash(uint256)":{"params":{"blockNumber":"The block number"}},"tryAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs","requireSuccess":"If true, require all calls to succeed"},"returns":{"returnData":"An array of Result structs"}},"tryBlockAndAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}}},"version":1},"userdoc":{"kind":"user","methods":{"aggregate((address,bytes)[])":{"notice":"Backwards-compatible call aggregation with Multicall"},"aggregate3((address,bool,bytes)[])":{"notice":"Aggregate calls, ensuring each returns success if required"},"aggregate3Value((address,bool,uint256,bytes)[])":{"notice":"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values"},"blockAndAggregate((address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"},"getBasefee()":{"notice":"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain"},"getBlockHash(uint256)":{"notice":"Returns the block hash for the given block number"},"getBlockNumber()":{"notice":"Returns the block number"},"getChainId()":{"notice":"Returns the chain id"},"getCurrentBlockCoinbase()":{"notice":"Returns the block coinbase"},"getCurrentBlockGasLimit()":{"notice":"Returns the block gas limit"},"getCurrentBlockTimestamp()":{"notice":"Returns the block timestamp"},"getEthBalance(address)":{"notice":"Returns the (ETH) balance of a given address"},"getLastBlockHash()":{"notice":"Returns the block hash of the last block"},"tryAggregate(bool,(address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls without requiring success"},"tryBlockAndAggregate(bool,(address,bytes)[])":{"notice":"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"}},"version":1}},"settings":{"remappings":["@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","buffer/=lib/filecoin-solidity/lib/buffer/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","filecoin-solidity/=lib/filecoin-solidity/contracts/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/filecoin-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","solidity-BigNumber/=lib/filecoin-solidity/contracts/vendor/solidity-BigNumber/src/","solidity-cborutils/=lib/solidity-cborutils/contracts/","solidity-cborutils/contracts/=lib/filecoin-solidity/lib/solidity-cborutils/contracts/"],"optimizer":{"enabled":true,"runs":0},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/utils/Multicall3.sol":"Multicall3"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/utils/Multicall3.sol":{"keccak256":"0x524151a0a40772a029fadba404f7fa58f6557159ef779e9d5a43374939c1381c","urls":["bzz-raw://a4f4540f734bdc412cc4cd83703c8e5e68d854348000d841cafe22f25048faac","dweb:/ipfs/QmTjcjpWUg9cqsvdWuSgy58KgjWWC277vmp2b4YCB8QYZM"],"license":null}},"version":1},"storageLayout":{"storage":[],"types":{}},"devdoc":{"version":1,"kind":"dev","author":"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>","details":"In FluenceLabs it used only for batch reading from Fluence frontends, CLIs.Ref to https://github.com/mds1/multicall/blob/main/src/Multicall3.sol.Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call","methods":{"aggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockNumber":"The block number where the calls were executed","returnData":"An array of bytes containing the responses"}},"aggregate3((address,bool,bytes)[])":{"params":{"calls":"An array of Call3 structs"},"returns":{"returnData":"An array of Result structs"}},"aggregate3Value((address,bool,uint256,bytes)[])":{"params":{"calls":"An array of Call3Value structs"},"returns":{"returnData":"An array of Result structs"}},"blockAndAggregate((address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}},"getBlockHash(uint256)":{"params":{"blockNumber":"The block number"}},"tryAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs","requireSuccess":"If true, require all calls to succeed"},"returns":{"returnData":"An array of Result structs"}},"tryBlockAndAggregate(bool,(address,bytes)[])":{"params":{"calls":"An array of Call structs"},"returns":{"blockHash":"The hash of the block where the calls were executed","blockNumber":"The block number where the calls were executed","returnData":"An array of Result structs"}}},"title":"Multicall3"},"id":121}